{"version":3,"sources":["../src/audio.ts"],"names":[],"mappings":";;;AAmBO,MAAM,gBAAwC,CAAA;AAAA,EAInD,YAAqB,OAAmC,EAAA;AAAnC,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AACnB,IAAK,IAAA,CAAA,IAAA,GACH,QAAQ,MAAU,IAAA,IAAI,cAAc,CAA2B,wBAAA,EAAA,IAAA,CAAK,OAAQ,CAAA,KAAK,CAAE,CAAA,CAAA;AACrF,IAAK,IAAA,CAAA,OAAA,GAAU,IAAI,MAAO,CAAA;AAAA,MACxB,QAAQ,OAAQ,CAAA,MAAA;AAAA,MAChB,SAAS,OAAQ,CAAA,OAAA;AAAA,MACjB,cAAc,OAAQ,CAAA,YAAA;AAAA,MACtB,SAAS,OAAQ,CAAA,OAAA;AAAA,MACjB,gBAAgB,OAAQ,CAAA,OAAA;AAAA,MACxB,OAAO,OAAQ,CAAA,KAAA;AAAA,MACf,SAAS,OAAQ,CAAA;AAAA,KAClB,CAAA;AAAA;AACH,EAfiB,OAAA;AAAA,EACA,IAAA;AAAA,EAgBjB,MAAM,YAAY,MAA2B,EAAA;AAC3C,IAAI,IAAA;AACF,MAAA,MAAM,MAAM,MAAM,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAM,eAAe,MAAO,CAAA;AAAA,QACzD,IAAM,EAAA,MAAM,MAAO,CAAA,MAAA,CAAO,IAAM,EAAA,CAAA,KAAA,EAAQ,MAAO,CAAA,IAAI,CAAI,CAAA,EAAA,EAAE,IAAM,EAAA,MAAA,CAAO,MAAM,CAAA;AAAA,QAC5E,KAAA,EAAO,KAAK,OAAQ,CAAA,KAAA;AAAA,QACpB,UAAU,MAAO,CAAA,IAAA;AAAA,QACjB,QAAQ,MAAO,CAAA;AAAA,OAChB,CAAA;AAED,MAAA,OAAO,GAAI,CAAA,IAAA;AAAA,aACJ,GAAK,EAAA;AACZ,MAAK,IAAA,CAAA,IAAA,CAAK,MAAM,GAAG,CAAA;AACnB,MAAM,MAAA,GAAA;AAAA;AACR;AACF,EAEA,MAAM,YAAY,MAA2B,EAAA;AAC3C,IAAI,IAAA;AACF,MAAA,MAAM,MAAM,MAAM,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAM,OAAO,MAAO,CAAA;AAAA,QACjD,iBAAiB,MAAO,CAAA,IAAA;AAAA,QACxB,KAAA,EAAO,KAAK,OAAQ,CAAA,KAAA;AAAA,QACpB,OAAO,MAAO,CAAA,KAAA;AAAA,QACd,OAAO,MAAO,CAAA;AAAA,OACf,CAAA;AAED,MAAA,OAAO,MAAO,CAAA,IAAA,CAAK,MAAM,GAAA,CAAI,aAAa,CAAA;AAAA,aACnC,GAAK,EAAA;AACZ,MAAK,IAAA,CAAA,IAAA,CAAK,MAAM,GAAG,CAAA;AACnB,MAAM,MAAA,GAAA;AAAA;AACR;AAEJ","file":"audio.mjs","sourcesContent":["import OpenAI, { toFile } from 'openai';\n\nimport { Fetch } from 'openai/core.mjs';\n\nimport { IAudioModel, TextToAudioParams, AudioToTextParams } from '@microsoft/teams.ai';\nimport { ILogger, ConsoleLogger } from '@microsoft/teams.common/logging';\n\nexport type OpenAIAudioPluginOptions = {\n  readonly model: string;\n  readonly apiKey?: string;\n  readonly baseUrl?: string;\n  readonly organization?: string;\n  readonly project?: string;\n  readonly headers?: { [key: string]: string };\n  readonly fetch?: Fetch;\n  readonly timeout?: number;\n  readonly logger?: ILogger;\n};\n\nexport class OpenAIAudioModel implements IAudioModel {\n  private readonly _openai: OpenAI;\n  private readonly _log: ILogger;\n\n  constructor(readonly options: OpenAIAudioPluginOptions) {\n    this._log =\n      options.logger || new ConsoleLogger(`@microsoft/teams.openai/${this.options.model}`);\n    this._openai = new OpenAI({\n      apiKey: options.apiKey,\n      baseURL: options.baseUrl,\n      organization: options.organization,\n      project: options.project,\n      defaultHeaders: options.headers,\n      fetch: options.fetch,\n      timeout: options.timeout,\n    });\n  }\n\n  async audioToText(params: AudioToTextParams) {\n    try {\n      const res = await this._openai.audio.transcriptions.create({\n        file: await toFile(params.data, `temp.${params.type}`, { type: params.type }),\n        model: this.options.model,\n        language: params.lang,\n        prompt: params.prompt,\n      });\n\n      return res.text;\n    } catch (err) {\n      this._log.error(err);\n      throw err;\n    }\n  }\n\n  async textToAudio(params: TextToAudioParams) {\n    try {\n      const res = await this._openai.audio.speech.create({\n        response_format: params.type as any,\n        model: this.options.model,\n        voice: params.voice as any,\n        input: params.text,\n      });\n\n      return Buffer.from(await res.arrayBuffer());\n    } catch (err) {\n      this._log.error(err);\n      throw err;\n    }\n  }\n}\n"]}