{"version":3,"sources":["../src/chat.ts"],"names":["message"],"mappings":"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","file":"chat.mjs","sourcesContent":["import '@azure/openai/types';\nimport OpenAI, { AzureOpenAI } from 'openai';\nimport { Fetch } from 'openai/core';\nimport { Stream } from 'openai/streaming';\n\nimport {\n  ChatSendOptions,\n  IChatModel,\n  LocalMemory,\n  Message,\n  ModelMessage,\n} from '@microsoft/teams.ai';\nimport { ConsoleLogger, ILogger } from '@microsoft/teams.common/logging';\n\nexport type ChatCompletionCreateParams = Omit<\n  OpenAI.ChatCompletionCreateParams,\n  'model' | 'messages' | 'stream'\n>;\n\nexport type OpenAIChatModelOptions = {\n  readonly model: (string & {}) | OpenAI.Chat.ChatModel;\n  readonly apiKey?: string;\n  readonly baseUrl?: string;\n  readonly organization?: string;\n  readonly project?: string;\n  readonly headers?: { [key: string]: string };\n  readonly fetch?: Fetch;\n  readonly timeout?: number;\n  readonly requestOptions?: ChatCompletionCreateParams;\n  readonly logger?: ILogger;\n};\n\nexport type AzureOpenAIChatModelOptions = OpenAIChatModelOptions & {\n  /**\n   * Defaults to process.env['OPENAI_API_VERSION'].\n   */\n  apiVersion?: string;\n\n  /**\n   * Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n   */\n  endpoint?: string;\n\n  /**\n   * A function that returns an access token for Microsoft Entra (formerly known as Azure Active Directory),\n   * which will be invoked on every request.\n   */\n  azureADTokenProvider?: () => Promise<string>;\n};\n\nexport class OpenAIChatModel implements IChatModel<ChatCompletionCreateParams> {\n  private readonly _openai: OpenAI;\n  private readonly _log: ILogger;\n\n  constructor(readonly options: OpenAIChatModelOptions | AzureOpenAIChatModelOptions) {\n    this._log =\n      options.logger || new ConsoleLogger(`@microsoft/teams.openai/${this.options.model}`);\n    this._openai =\n      'endpoint' in options\n        ? new AzureOpenAI({\n            apiKey: options.apiKey,\n            apiVersion: options.apiVersion,\n            endpoint: options.endpoint?.replace(/\\/$/, ''),\n            deployment: options.model,\n            azureADTokenProvider: options.azureADTokenProvider,\n            baseURL: options.baseUrl?.replace(/\\/$/, ''),\n            organization: options.organization,\n            project: options.project,\n            defaultHeaders: options.headers,\n            fetch: options.fetch,\n            timeout: options.timeout,\n          })\n        : new OpenAI({\n            apiKey: options.apiKey,\n            baseURL: options.baseUrl?.replace(/\\/$/, ''),\n            organization: options.organization,\n            project: options.project,\n            defaultHeaders: options.headers,\n            fetch: options.fetch,\n            timeout: options.timeout,\n          });\n  }\n\n  async send(\n    input: Message,\n    options: ChatSendOptions<ChatCompletionCreateParams> = {}\n  ): Promise<ModelMessage> {\n    const memory = options.messages || new LocalMemory();\n    await memory.push(input);\n\n    // call functions\n    if (input.role === 'model' && input.function_calls?.length) {\n      for (const call of input.function_calls) {\n        const log = this._log.child(`tools/${call.name}`);\n        const fn = (options.functions || {})[call.name];\n\n        if (!fn) {\n          throw new Error(`function ${call.name} not found`);\n        }\n\n        let content = '';\n\n        try {\n          log.debug(call.arguments);\n          const output = await fn.handler(call.arguments);\n          content = JSON.stringify(output);\n          log.debug(content);\n        } catch (err) {\n          log.error(err);\n\n          if (err instanceof Error) {\n            content = `Error: ${err.name} => ${err.message}`;\n          }\n        }\n\n        await memory.push({\n          role: 'function',\n          content,\n          function_id: call.id,\n        });\n      }\n    }\n\n    const messages = await memory.values();\n\n    if (options.system) {\n      messages.unshift(options.system);\n    }\n\n    try {\n      const completion = await this._openai.chat.completions.create({\n        ...this.options.requestOptions,\n        ...options.request,\n        model: 'endpoint' in this.options ? '' : this.options.model,\n        stream: !!options.onChunk,\n        tools:\n          Object.keys(options.functions || {}).length === 0\n            ? undefined\n            : Object.values(options.functions || {}).map((fn) => ({\n                type: 'function',\n                function: {\n                  name: fn.name,\n                  description: fn.description,\n                  parameters: fn.parameters,\n                },\n              })),\n        messages: messages.map((message) => {\n          if (message.role === 'model') {\n            return {\n              role: 'assistant',\n              content: message.content,\n              tool_calls: message.function_calls?.map((fn) => ({\n                id: fn.id,\n                type: 'function',\n                function: {\n                  name: fn.name,\n                  arguments: JSON.stringify(fn.arguments),\n                },\n              })),\n            };\n          }\n\n          if (message.role === 'function') {\n            return {\n              role: 'tool',\n              content: message.content || '',\n              tool_call_id: message.function_id,\n            };\n          }\n\n          if (message.role === 'user') {\n            if (!message.content) {\n              message.content = '';\n            }\n\n            return {\n              role: 'user',\n              content:\n                typeof message.content === 'string'\n                  ? message.content\n                  : message.content.map((p) => {\n                      if (p.type === 'image_url') {\n                        return {\n                          type: p.type,\n                          image_url: { url: p.image_url },\n                        };\n                      }\n\n                      return p;\n                    }),\n            };\n          }\n\n          return message;\n        }),\n      });\n\n      let message: OpenAI.Chat.ChatCompletionMessage = {\n        role: 'assistant',\n        content: '',\n        refusal: null,\n      };\n\n      if (!(completion instanceof Stream)) {\n        message = completion.choices[0].message;\n      } else {\n        for await (const chunk of completion) {\n          if (!chunk.choices.length) continue;\n          const delta = chunk.choices[0].delta;\n\n          if (delta.tool_calls) {\n            if (!message.tool_calls) {\n              message.tool_calls = [];\n            }\n\n            for (const call of delta.tool_calls) {\n              if ('index' in call) {\n                if (call.index === message.tool_calls.length) {\n                  message.tool_calls.push({\n                    id: '',\n                    type: 'function',\n                    function: {\n                      name: '',\n                      arguments: '',\n                    },\n                  });\n                }\n\n                if (call.id) {\n                  message.tool_calls[call.index].id += call.id;\n                }\n\n                if (call.function?.name) {\n                  message.tool_calls[call.index].function.name += call.function.name;\n                }\n\n                if (call.function?.arguments) {\n                  message.tool_calls[call.index].function.arguments += call.function.arguments;\n                }\n              } else {\n                message.tool_calls.push(call);\n              }\n            }\n          }\n\n          if (delta.context) {\n            if (message.context) {\n              Object.assign(message.context, delta.context);\n            } else {\n              message.context = delta.context;\n            }\n          }\n\n          if (delta.content) {\n            if (message.content) {\n              message.content += delta.content;\n            } else {\n              message.content = delta.content;\n            }\n\n            if (options.onChunk) {\n              await options.onChunk(delta.content);\n            }\n          }\n        }\n      }\n\n      const modelMessage: ModelMessage = {\n        role: 'model',\n        audio: message.audio || undefined,\n        content: message.content || undefined,\n        context: message.context,\n        function_calls: message.tool_calls?.map((call) => ({\n          id: call.id,\n          name: call.function.name,\n          arguments: JSON.parse(call.function.arguments || '{}'),\n        })),\n      };\n\n      if (message.tool_calls && message.tool_calls.length > 0) {\n        return this.send(modelMessage, {\n          ...options,\n          messages: memory,\n        });\n      }\n\n      await memory.push(modelMessage);\n      return modelMessage;\n    } catch (err) {\n      this._log.error(err);\n      throw err;\n    }\n  }\n}\n"]}