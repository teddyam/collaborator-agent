"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLUGIN_DEPENDENCIES_METADATA_KEY = void 0;
exports.Dependency = Dependency;
exports.Logger = Logger;
exports.Storage = Storage;
require("reflect-metadata");
const plugin_1 = require("./plugin");
exports.PLUGIN_DEPENDENCIES_METADATA_KEY = 'teams:plugin:dependencies';
/**
 * add plugin dependencies via
 * `@Dependency()`
 */
function Dependency(options = {}) {
    const name = options.name;
    const optional = options.optional || false;
    return (target, propertyKey) => {
        if (typeof propertyKey === 'string') {
            const TargetType = target.constructor;
            const FieldType = Reflect.getMetadata('design:type', target, propertyKey);
            let fieldTypeKey = name || FieldType.name;
            // if plugin, resolve using the plugins name
            if (Reflect.hasMetadata(plugin_1.PLUGIN_METADATA_KEY, FieldType)) {
                const meta = Reflect.getMetadata(plugin_1.PLUGIN_METADATA_KEY, FieldType);
                fieldTypeKey = meta.name;
            }
            const targetFieldsMetadata = Reflect.getOwnMetadata(exports.PLUGIN_DEPENDENCIES_METADATA_KEY, TargetType) || [];
            targetFieldsMetadata.push({
                key: propertyKey,
                type: fieldTypeKey,
                optional,
            });
            Reflect.defineMetadata(exports.PLUGIN_DEPENDENCIES_METADATA_KEY, targetFieldsMetadata, TargetType);
        }
    };
}
/**
 * inject the `App` `ILogger` instance
 */
function Logger() {
    return Dependency({ name: 'ILogger' });
}
/**
 * inject the `App` `IStorage` instance
 */
function Storage() {
    return Dependency({ name: 'IStorage' });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZW5kZW5jeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90eXBlcy9wbHVnaW4vZGVjb3JhdG9ycy9kZXBlbmRlbmN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQTJCQSxnQ0E0QkM7QUFLRCx3QkFFQztBQUtELDBCQUVDO0FBckVELDRCQUEwQjtBQUMxQixxQ0FBOEQ7QUFFakQsUUFBQSxnQ0FBZ0MsR0FBRywyQkFBMkIsQ0FBQztBQW9CNUU7OztHQUdHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLFVBQTZCLEVBQUU7SUFDeEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUMxQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQztJQUUzQyxPQUFPLENBQUMsTUFBVyxFQUFFLFdBQWdELEVBQUUsRUFBRTtRQUN2RSxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDdEMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzFFLElBQUksWUFBWSxHQUFHLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDO1lBRTFDLDRDQUE0QztZQUM1QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsNEJBQW1CLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQztnQkFDeEQsTUFBTSxJQUFJLEdBQWtCLE9BQU8sQ0FBQyxXQUFXLENBQUMsNEJBQW1CLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ2hGLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzNCLENBQUM7WUFFRCxNQUFNLG9CQUFvQixHQUN4QixPQUFPLENBQUMsY0FBYyxDQUFDLHdDQUFnQyxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUU3RSxvQkFBb0IsQ0FBQyxJQUFJLENBQUM7Z0JBQ3hCLEdBQUcsRUFBRSxXQUFXO2dCQUNoQixJQUFJLEVBQUUsWUFBWTtnQkFDbEIsUUFBUTthQUNULENBQUMsQ0FBQztZQUVILE9BQU8sQ0FBQyxjQUFjLENBQUMsd0NBQWdDLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0YsQ0FBQztJQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLE1BQU07SUFDcEIsT0FBTyxVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixPQUFPO0lBQ3JCLE9BQU8sVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDMUMsQ0FBQyJ9