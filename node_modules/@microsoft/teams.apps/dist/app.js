"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const axios_1 = require("axios");
const teams_api_1 = require("@microsoft/teams.api");
const events_1 = require("@microsoft/teams.common/events");
const http = __importStar(require("@microsoft/teams.common/http"));
const logging_1 = require("@microsoft/teams.common/logging");
const storage_1 = require("@microsoft/teams.common/storage");
const package_json_1 = __importDefault(require("../package.json"));
const api_1 = require("./api");
const app_embed_1 = require("./app.embed");
const app_events_1 = require("./app.events");
const app_oauth_1 = require("./app.oauth");
const app_plugins_1 = require("./app.plugins");
const app_process_1 = require("./app.process");
const app_routing_1 = require("./app.routing");
const container_1 = require("./container");
const middleware = __importStar(require("./middleware"));
const oauth_1 = require("./oauth");
const plugins_1 = require("./plugins");
const router_1 = require("./router");
/**
 * The orchestrator for receiving/sending activities
 */
class App {
    options;
    api;
    graph;
    log;
    http;
    client;
    storage;
    credentials;
    entraTokenValidator;
    /**
     * the apps id
     */
    get id() {
        return this.tokens.bot?.appId || this.tokens.graph?.appId;
    }
    /**
     * the apps name
     */
    get name() {
        return this.tokens.bot?.appDisplayName || this.tokens.graph?.appDisplayName;
    }
    get oauth() {
        return {
            ...this.options.oauth,
            ...oauth_1.DEFAULT_OAUTH_SETTINGS,
        };
    }
    /**
     * the apps manifest
     */
    get manifest() {
        return {
            id: this.id,
            name: {
                short: this.name || '??',
                full: this.name || '??',
                ...this._manifest.name,
            },
            bots: [
                {
                    botId: this.id || '??',
                    scopes: ['personal'],
                },
            ],
            webApplicationInfo: {
                id: this.credentials?.clientId || '??',
                resource: `api://\${{BOT_DOMAIN}}/${this.credentials?.clientId || '??'}`,
                ...this._manifest.webApplicationInfo,
            },
            ...this._manifest,
        };
    }
    _manifest;
    /**
     * the apps auth tokens
     */
    get tokens() {
        return this._tokens;
    }
    _tokens = {};
    container = new container_1.Container();
    plugins = [];
    router = new router_1.Router();
    tenantTokens = new storage_1.LocalStorage({}, { max: 20000 });
    events = new events_1.EventEmitter();
    startedAt;
    port;
    _userAgent = `teams.ts[apps]/${package_json_1.default.version}`;
    constructor(options = {}) {
        this.options = options;
        this.log = this.options.logger || new logging_1.ConsoleLogger('@teams/app');
        this.storage = this.options.storage || new storage_1.LocalStorage();
        this._manifest = this.options.manifest || {};
        if (!options.client) {
            this.client = new http.Client({
                headers: {
                    'User-Agent': this._userAgent,
                },
            });
        }
        else if (typeof options.client === 'function') {
            this.client = options.client().clone({
                headers: {
                    'User-Agent': this._userAgent,
                },
            });
        }
        else if ('request' in options.client) {
            this.client = options.client.clone({
                headers: {
                    'User-Agent': this._userAgent,
                },
            });
        }
        else {
            this.client = new http.Client({
                ...options.client,
                headers: {
                    ...options.client.headers,
                    'User-Agent': this._userAgent,
                },
            });
        }
        this.api = new api_1.ApiClient('https://smba.trafficmanager.net/teams', this.client.clone({ token: () => this._tokens.bot }));
        this.graph = new api_1.GraphClient(this.client.clone({ token: () => this._tokens.graph }));
        // initialize credentials
        const clientId = this.options.clientId || process.env.CLIENT_ID;
        const clientSecret = ('clientSecret' in this.options
            ? this.options.clientSecret
            : undefined) || process.env.CLIENT_SECRET;
        const tenantId = ('tenantId' in this.options ? this.options.tenantId : undefined) ||
            process.env.TENANT_ID;
        const token = 'token' in this.options ? this.options.token : undefined;
        if (clientId && clientSecret) {
            this.credentials = {
                clientId,
                clientSecret,
                tenantId,
            };
        }
        if (clientId && token) {
            this.credentials = {
                clientId,
                tenantId,
                token,
            };
        }
        if (clientId) {
            this.entraTokenValidator = new middleware.EntraTokenValidator({
                clientId,
                tenantId: tenantId || 'common',
            });
        }
        // add/validate plugins
        const plugins = this.options.plugins || [];
        let httpPlugin = plugins.find((p) => {
            const meta = (0, app_plugins_1.getMetadata)(p);
            return meta.name === 'http';
        });
        if (!httpPlugin) {
            httpPlugin = new plugins_1.HttpPlugin();
            // Casting to any here because a default HttpPlugin is not assignable to TPlugin
            // without a silly level of indirection.
            plugins.unshift(httpPlugin);
        }
        this.http = httpPlugin;
        // add injectable items to container
        this.container.register('id', { useValue: this.id });
        this.container.register('name', { useValue: this.name });
        this.container.register('manifest', { useValue: this.manifest });
        this.container.register('credentials', { useValue: this.credentials });
        this.container.register('botToken', { useValue: () => this.tokens.bot });
        this.container.register('graphToken', {
            useValue: () => this.tokens.graph,
        });
        this.container.register('ILogger', { useValue: this.log });
        this.container.register('IStorage', { useValue: this.storage });
        this.container.register(this.client.constructor.name, {
            useFactory: () => this.client,
        });
        for (const plugin of plugins) {
            this.plugin(plugin);
        }
        if (this.options.activity?.mentions?.stripText) {
            const options = this.options.activity?.mentions?.stripText;
            this.use(middleware.stripMentionsText(typeof options === 'boolean' ? {} : options));
        }
        // default event handlers
        this.on('signin.token-exchange', (...args) => this.onTokenExchange(...args));
        this.on('signin.verify-state', (...args) => this.onVerifyState(...args));
        this.event('error', ({ error }) => {
            this.log.error(error.message);
            if (error instanceof axios_1.AxiosError) {
                this.log.error(error.request.path);
                this.log.error(error.response?.data);
            }
        });
    }
    /**
     * start the app
     * @param port port to listen on
     */
    async start(port) {
        this.port = +(port || process.env.PORT || 3978);
        try {
            await this.refreshTokens(true);
            // initialize plugins
            for (const plugin of this.plugins) {
                // inject dependencies
                this.inject(plugin);
                if (plugin.onInit) {
                    plugin.onInit();
                }
            }
            // start plugins
            for (const plugin of this.plugins) {
                if (plugin.onStart) {
                    await plugin.onStart({ port: this.port });
                }
            }
            this.events.emit('start', this.log);
            this.startedAt = new Date();
        }
        catch (error) {
            this.onError({ error });
        }
    }
    /**
     * stop the app
     */
    async stop() {
        try {
            for (const plugin of this.plugins) {
                if (plugin.onStop) {
                    await plugin.onStop();
                }
            }
        }
        catch (error) {
            this.onError({ error });
        }
    }
    /**
     * send an activity proactively
     * @param conversationId the conversation to send to
     * @param activity the activity to send
     */
    async send(conversationId, activity) {
        if (!this.id || !this.name) {
            throw new Error('app not started');
        }
        const ref = {
            channelId: 'msteams',
            serviceUrl: this.api.serviceUrl,
            bot: {
                id: this.id,
                name: this.name,
                role: 'bot',
            },
            conversation: {
                id: conversationId,
                conversationType: 'personal',
            },
        };
        const res = await this.http.send((0, teams_api_1.toActivityParams)(activity), ref);
        return res;
    }
    /**
     * subscribe to an event
     * @param name event to subscribe to
     * @param cb callback to invoke
     */
    on = app_routing_1.on; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * subscribe to a message event for a specific pattern
     * @param pattern pattern to match against message text
     * @param cb callback to invoke
     */
    message = app_routing_1.message; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * register a middleware
     * @param cb callback to invoke
     */
    use = app_routing_1.use; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * subscribe to an event
     * @param name the event to subscribe to
     * @param cb the callback to invoke
     */
    event = app_events_1.event; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * add a plugin
     * @param plugin plugin to add
     */
    plugin = app_plugins_1.plugin; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * get a plugin
     */
    getPlugin = app_plugins_1.getPlugin; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * add/update a function that can be called remotely
     * @param name The unique function name
     * @param cb The callback to handle the function
     */
    function = app_embed_1.func; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * add/update a static tab.
     * the tab will be hosted at
     * `http://localhost:{{PORT}}/tabs/{{name}}` or `https://{{BOT_DOMAIN}}/tabs/{{name}}`
     * @remark scopes default to `personal`
     * @param name A unique identifier for the entity which the tab displays.
     * @param path The path to the web `dist` folder.
     */
    tab = app_embed_1.tab; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * add a configurable tab
     * @remark scopes defaults to `team`
     * @param url The url to use when configuring the tab.
     */
    configTab = app_embed_1.configTab; // eslint-disable-line @typescript-eslint/member-ordering
    /**
     * activity handler called when an inbound activity is received
     * @param sender the plugin to use for sending activities
     * @param event the received activity event
     */
    process = app_process_1.$process; // eslint-disable-line @typescript-eslint/member-ordering
    ///
    /// OAuth
    ///
    onTokenExchange = app_oauth_1.onTokenExchange; // eslint-disable-line @typescript-eslint/member-ordering
    onVerifyState = app_oauth_1.onVerifyState; // eslint-disable-line @typescript-eslint/member-ordering
    ///
    /// Events
    ///
    inject = app_plugins_1.inject; // eslint-disable-line @typescript-eslint/member-ordering
    onError = app_events_1.onError; // eslint-disable-line @typescript-eslint/member-ordering
    onActivity = app_events_1.onActivity; // eslint-disable-line @typescript-eslint/member-ordering
    onActivitySent = app_events_1.onActivitySent; // eslint-disable-line @typescript-eslint/member-ordering
    onActivityResponse = app_events_1.onActivityResponse; // eslint-disable-line @typescript-eslint/member-ordering
    ///
    /// Token
    ///
    /**
     * Refresh the tokens for the app
     */
    async refreshTokens(force = false) {
        return Promise.all([
            this.refreshBotToken(force),
            this.refreshGraphToken(force),
        ]);
    }
    async refreshBotToken(force = false) {
        if (!this.credentials)
            return;
        if (!this.tokens.bot?.isExpired() && !force)
            return;
        if (this.tokens.bot) {
            this.log.debug('refreshing bot token');
        }
        const botResponse = await this.api.bots.token.get(this.credentials);
        this._tokens.bot = new teams_api_1.JsonWebToken(botResponse.access_token);
    }
    async refreshGraphToken(force = false) {
        if (!this.credentials)
            return;
        if (!this.tokens.graph?.isExpired() && !force)
            return;
        if (this.tokens.graph) {
            this.log.debug('refreshing graph token');
        }
        const graphResponse = await this.api.bots.token.getGraph(this.credentials);
        this._tokens.graph = new teams_api_1.JsonWebToken(graphResponse.access_token);
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,