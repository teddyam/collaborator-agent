import { Activity } from '@microsoft/teams.api';
import { IActivityContext } from './contexts';
import { IRoutes } from './routes';
import { RouteHandler } from './types';
type Route<Name extends keyof IRoutes = keyof IRoutes> = {
    readonly name?: Name;
    readonly select: (activity: Activity) => boolean;
    readonly callback: IRoutes[Name];
};
export declare class Router {
    protected readonly routes: Route[];
    /**
     * select routes that match the inbound activity
     * @param activity the inbound activity
     */
    select(activity: Activity): RouteHandler<IActivityContext<Activity>, any>[];
    /**
     * register a new route
     * @param route the route to register
     */
    register<Name extends keyof IRoutes>(route: Route<Name>): this;
    /**
     * register a middleware
     * @param callback the callback to invoke
     */
    use(callback: RouteHandler<IActivityContext, any>): this;
    /**
     * register an activity route
     * @param event event to subscribe to
     * @param callback the callback to invoke
     */
    on<Name extends keyof IRoutes>(event: Name, callback: Exclude<IRoutes[Name], undefined>): this;
}
export {};
