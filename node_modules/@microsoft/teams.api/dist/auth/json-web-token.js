'use strict';

var jwtDecode = require('jwt-decode');
var caller = require('./caller');

class JsonWebToken {
  get audience() {
    return this._payload.aud;
  }
  get issuer() {
    return this._payload.iss;
  }
  get keyId() {
    return this._payload["kid"];
  }
  get appId() {
    return this._payload["appid"];
  }
  get appDisplayName() {
    return this._payload["app_displayname"];
  }
  get tenantId() {
    return this._payload["tid"];
  }
  get version() {
    return this._payload["version"];
  }
  get serviceUrl() {
    let v = this._payload["serviceurl"] || "https://smba.trafficmanager.net/teams";
    if (v.endsWith("/")) {
      v = v.slice(0, v.length - 1);
    }
    return v;
  }
  get from() {
    if (this.appId) {
      return "bot";
    }
    return "azure";
  }
  get fromId() {
    if (this.from === "bot") {
      return `${caller.CallerIds.bot}:${this.appId}`;
    }
    return caller.CallerIds.azure;
  }
  get expiration() {
    if (this._payload.exp) {
      return this._payload.exp * 1e3;
    }
    return void 0;
  }
  _value;
  _payload;
  constructor(value) {
    this._value = value;
    this._payload = jwtDecode.jwtDecode(value);
  }
  isExpired(bufferMs = 1e3 * 60 * 5) {
    if (!this.expiration) return false;
    return this.expiration < Date.now() + bufferMs;
  }
  toString() {
    return this._value;
  }
}

exports.JsonWebToken = JsonWebToken;
//# sourceMappingURL=json-web-token.js.map
//# sourceMappingURL=json-web-token.js.map