import { IActivity, Activity } from '../activity.mjs';
import { ChannelData } from '../../models/channel-data/index.mjs';
import '../../models/channel-id.mjs';
import '../../models/account.mjs';
import '../../models/role.mjs';
import '../../models/conversation/conversation-reference.mjs';
import '../../models/entity/index.mjs';
import '../../models/entity/ai-message-entity.mjs';
import '../../models/entity/message-entity.mjs';
import '../../models/entity/citation-entity.mjs';
import '../../models/entity/client-info-entity.mjs';
import '../../models/entity/mention-entity.mjs';
import '../../models/entity/sensitive-usage-entity.mjs';
import '../../models/entity/stream-info-entity.mjs';
import '../../models/meeting/meeting-info.mjs';
import '../../models/meeting/meeting-details.mjs';
import '../../models/channel-data/channel-info.mjs';
import '../../models/channel-data/team-info.mjs';
import '../../models/channel-data/notification-info.mjs';
import '../../models/channel-data/tenant-info.mjs';
import '../../models/channel-data/settings.mjs';

interface IMessageUpdateActivity extends IActivity<'messageUpdate'> {
    /**
     * The text content of the message.
     */
    text: string;
    /**
     * The text to speak.
     */
    speak?: string;
    /**
     * The text to display if the channel cannot render cards.
     */
    summary?: string;
    /**
     * The time at which the activity should be considered to be "expired" and should not be
     * presented to the recipient.
     */
    expiration?: Date;
    /**
     * A value that is associated with the activity.
     */
    value?: any;
    channelData: ChannelData & {
        eventType: 'undeleteMessage' | 'editMessage';
    };
}
declare class MessageUpdateActivity extends Activity<'messageUpdate'> implements IMessageUpdateActivity {
    /**
     * The text content of the message.
     */
    text: string;
    /**
     * The text to speak.
     */
    speak?: string;
    /**
     * The text to display if the channel cannot render cards.
     */
    summary?: string;
    /**
     * The time at which the activity should be considered to be "expired" and should not be
     * presented to the recipient.
     */
    expiration?: Date;
    /**
     * A value that is associated with the activity.
     */
    value?: any;
    channelData: ChannelData & {
        eventType: 'undeleteMessage' | 'editMessage';
    };
    constructor(eventType: 'undeleteMessage' | 'editMessage', value?: Omit<Partial<IMessageUpdateActivity>, 'type'>);
    /**
     * initialize from interface
     */
    static from(activity: IMessageUpdateActivity): MessageUpdateActivity;
    /**
     * convert to interface
     */
    toInterface(): IMessageUpdateActivity;
    /**
     * copy to a new instance
     */
    clone(options?: Omit<Partial<IMessageUpdateActivity>, 'type'>): MessageUpdateActivity;
    /**
     * The text content of the message.
     */
    withText(value: string): this;
    /**
     * The text to speak.
     */
    withSpeak(value: string): this;
    /**
     * The text to display if the channel cannot render cards.
     */
    withSummary(value: string): this;
    /**
     * The time at which the activity should be considered to be "expired" and should not be
     * presented to the recipient.
     */
    withExpiration(value: Date): this;
}

export { type IMessageUpdateActivity, MessageUpdateActivity };
