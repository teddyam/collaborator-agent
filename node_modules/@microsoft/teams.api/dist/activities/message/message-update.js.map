{"version":3,"sources":["../../../src/activities/message/message-update.ts"],"names":["Activity"],"mappings":";;;;AAmCO,MAAM,8BACHA,iBAEV,CAAA;AAAA;AAAA;AAAA;AAAA,EAIE,IAAA;AAAA;AAAA;AAAA;AAAA,EAKA,KAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAA;AAAA;AAAA;AAAA;AAAA,EAKA,KAAA;AAAA,EAMA,WACE,CAAA,SAAA,EACA,KAAuD,GAAA,EACvD,EAAA;AACA,IAAM,KAAA,CAAA;AAAA,MACJ,GAAG,KAAA;AAAA,MACH,IAAM,EAAA,eAAA;AAAA,MACN,WAAa,EAAA;AAAA,QACX,GAAG,KAAO,EAAA,WAAA;AAAA,QACV;AAAA;AACF,KACD,CAAA;AAED,IAAA,MAAA,CAAO,OAAO,IAAM,EAAA;AAAA,MAClB,GAAG,KAAA;AAAA,MACH,WAAa,EAAA;AAAA,QACX,GAAG,KAAO,EAAA,WAAA;AAAA,QACV;AAAA;AACF,KACD,CAAA;AAAA;AACH;AAAA;AAAA;AAAA,EAKA,OAAO,KAAK,QAAkC,EAAA;AAC5C,IAAA,OAAO,IAAI,qBAAA,CAAsB,QAAS,CAAA,WAAA,CAAY,WAAW,QAAQ,CAAA;AAAA;AAC3E;AAAA;AAAA;AAAA,EAKA,WAAsC,GAAA;AACpC,IAAA,OAAO,MAAO,CAAA,MAAA,CAAO,EAAC,EAAG,IAAI,CAAA;AAAA;AAC/B;AAAA;AAAA;AAAA,EAKA,KAAA,CAAM,OAAyD,GAAA,EAAI,EAAA;AACjE,IAAA,OAAO,IAAI,qBAAA,CAAsB,IAAK,CAAA,WAAA,CAAY,SAAW,EAAA;AAAA,MAC3D,GAAG,KAAK,WAAY,EAAA;AAAA,MACpB,GAAG;AAAA,KACJ,CAAA;AAAA;AACH;AAAA;AAAA;AAAA,EAKA,SAAS,KAAe,EAAA;AACtB,IAAA,IAAA,CAAK,IAAO,GAAA,KAAA;AACZ,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA,EAKA,UAAU,KAAe,EAAA;AACvB,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA,EAKA,YAAY,KAAe,EAAA;AACzB,IAAA,IAAA,CAAK,OAAU,GAAA,KAAA;AACf,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,KAAa,EAAA;AAC1B,IAAA,IAAA,CAAK,UAAa,GAAA,KAAA;AAClB,IAAO,OAAA,IAAA;AAAA;AAEX","file":"message-update.js","sourcesContent":["import { ChannelData } from '../../models';\nimport { IActivity, Activity } from '../activity';\n\nexport interface IMessageUpdateActivity extends IActivity<'messageUpdate'> {\n  /**\n   * The text content of the message.\n   */\n  text: string;\n\n  /**\n   * The text to speak.\n   */\n  speak?: string;\n\n  /**\n   * The text to display if the channel cannot render cards.\n   */\n  summary?: string;\n\n  /**\n   * The time at which the activity should be considered to be \"expired\" and should not be\n   * presented to the recipient.\n   */\n  expiration?: Date;\n\n  /**\n   * A value that is associated with the activity.\n   */\n  value?: any;\n\n  channelData: ChannelData & {\n    eventType: 'undeleteMessage' | 'editMessage';\n  };\n}\n\nexport class MessageUpdateActivity\n  extends Activity<'messageUpdate'>\n  implements IMessageUpdateActivity\n{\n  /**\n   * The text content of the message.\n   */\n  text!: string;\n\n  /**\n   * The text to speak.\n   */\n  speak?: string;\n\n  /**\n   * The text to display if the channel cannot render cards.\n   */\n  summary?: string;\n\n  /**\n   * The time at which the activity should be considered to be \"expired\" and should not be\n   * presented to the recipient.\n   */\n  expiration?: Date;\n\n  /**\n   * A value that is associated with the activity.\n   */\n  value?: any;\n\n  declare channelData: ChannelData & {\n    eventType: 'undeleteMessage' | 'editMessage';\n  };\n\n  constructor(\n    eventType: 'undeleteMessage' | 'editMessage',\n    value: Omit<Partial<IMessageUpdateActivity>, 'type'> = {}\n  ) {\n    super({\n      ...value,\n      type: 'messageUpdate',\n      channelData: {\n        ...value?.channelData,\n        eventType,\n      },\n    });\n\n    Object.assign(this, {\n      ...value,\n      channelData: {\n        ...value?.channelData,\n        eventType,\n      },\n    });\n  }\n\n  /**\n   * initialize from interface\n   */\n  static from(activity: IMessageUpdateActivity) {\n    return new MessageUpdateActivity(activity.channelData.eventType, activity);\n  }\n\n  /**\n   * convert to interface\n   */\n  toInterface(): IMessageUpdateActivity {\n    return Object.assign({}, this);\n  }\n\n  /**\n   * copy to a new instance\n   */\n  clone(options: Omit<Partial<IMessageUpdateActivity>, 'type'> = {}) {\n    return new MessageUpdateActivity(this.channelData.eventType, {\n      ...this.toInterface(),\n      ...options,\n    });\n  }\n\n  /**\n   * The text content of the message.\n   */\n  withText(value: string) {\n    this.text = value;\n    return this;\n  }\n\n  /**\n   * The text to speak.\n   */\n  withSpeak(value: string) {\n    this.speak = value;\n    return this;\n  }\n\n  /**\n   * The text to display if the channel cannot render cards.\n   */\n  withSummary(value: string) {\n    this.summary = value;\n    return this;\n  }\n\n  /**\n   * The time at which the activity should be considered to be \"expired\" and should not be\n   * presented to the recipient.\n   */\n  withExpiration(value: Date) {\n    this.expiration = value;\n    return this;\n  }\n}\n"]}