import { IActivity, Activity } from './activity.mjs';
import '../models/channel-id.mjs';
import '../models/account.mjs';
import '../models/role.mjs';
import '../models/conversation/conversation-reference.mjs';
import '../models/entity/index.mjs';
import '../models/entity/ai-message-entity.mjs';
import '../models/entity/message-entity.mjs';
import '../models/entity/citation-entity.mjs';
import '../models/entity/client-info-entity.mjs';
import '../models/entity/mention-entity.mjs';
import '../models/entity/sensitive-usage-entity.mjs';
import '../models/entity/stream-info-entity.mjs';
import '../models/channel-data/index.mjs';
import '../models/meeting/meeting-info.mjs';
import '../models/meeting/meeting-details.mjs';
import '../models/channel-data/channel-info.mjs';
import '../models/channel-data/notification-info.mjs';
import '../models/channel-data/settings.mjs';
import '../models/channel-data/team-info.mjs';
import '../models/channel-data/tenant-info.mjs';

interface ITypingActivity extends IActivity<'typing'> {
    /**
     * The text content of the message.
     */
    text?: string;
}
declare class TypingActivity extends Activity<'typing'> implements ITypingActivity {
    /**
     * The text content of the message.
     */
    text?: string;
    constructor(value?: Omit<Partial<ITypingActivity>, 'type'>);
    /**
     * initialize from interface
     */
    static from(activity: ITypingActivity): TypingActivity;
    /**
     * convert to interface
     */
    toInterface(): ITypingActivity;
    /**
     * copy to a new instance
     */
    clone(options?: Omit<Partial<ITypingActivity>, 'type'>): TypingActivity;
    /**
     * The text content of the message.
     */
    withText(value: string): this;
    /**
     * Append text
     */
    addText(text: string): this;
    /**
     * Add stream informative update
     * @param id the stream id
     * @param sequence the sequence number (index) of the chunk
     */
    addStreamUpdate(sequence?: number): this;
}

export { type ITypingActivity, TypingActivity };
