{"version":3,"sources":["../../src/activities/typing.ts"],"names":[],"mappings":";;AASO,MAAM,uBAAuB,QAA8C,CAAA;AAAA;AAAA;AAAA;AAAA,EAIhF,IAAA;AAAA,EAEA,WAAA,CAAY,KAAgD,GAAA,EAAI,EAAA;AAC9D,IAAM,KAAA,CAAA;AAAA,MACJ,IAAM,EAAA,QAAA;AAAA,MACN,GAAG;AAAA,KACJ,CAAA;AAED,IAAO,MAAA,CAAA,MAAA,CAAO,MAAM,KAAK,CAAA;AAAA;AAC3B;AAAA;AAAA;AAAA,EAKA,OAAO,KAAK,QAA2B,EAAA;AACrC,IAAO,OAAA,IAAI,eAAe,QAAQ,CAAA;AAAA;AACpC;AAAA;AAAA;AAAA,EAKA,WAA+B,GAAA;AAC7B,IAAA,OAAO,MAAO,CAAA,MAAA,CAAO,EAAC,EAAG,IAAI,CAAA;AAAA;AAC/B;AAAA;AAAA;AAAA,EAKA,KAAA,CAAM,OAAkD,GAAA,EAAI,EAAA;AAC1D,IAAA,OAAO,IAAI,cAAe,CAAA;AAAA,MACxB,GAAG,KAAK,WAAY,EAAA;AAAA,MACpB,GAAG;AAAA,KACJ,CAAA;AAAA;AACH;AAAA;AAAA;AAAA,EAKA,SAAS,KAAe,EAAA;AACtB,IAAA,IAAA,CAAK,IAAO,GAAA,KAAA;AACZ,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA,EAKA,QAAQ,IAAc,EAAA;AACpB,IAAI,IAAA,CAAC,KAAK,IAAM,EAAA;AACd,MAAA,IAAA,CAAK,IAAO,GAAA,EAAA;AAAA;AAGd,IAAA,IAAA,CAAK,IAAQ,IAAA,IAAA;AACb,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAA,CAAgB,WAAmB,CAAG,EAAA;AACpC,IAAI,IAAA,CAAC,KAAK,WAAa,EAAA;AACrB,MAAA,IAAA,CAAK,cAAc,EAAC;AAAA;AAGtB,IAAK,IAAA,CAAA,WAAA,CAAY,WAAW,IAAK,CAAA,EAAA;AACjC,IAAA,IAAA,CAAK,YAAY,UAAa,GAAA,WAAA;AAC9B,IAAA,IAAA,CAAK,YAAY,cAAiB,GAAA,QAAA;AAElC,IAAA,OAAO,KAAK,SAAU,CAAA;AAAA,MACpB,IAAM,EAAA,YAAA;AAAA,MACN,UAAU,IAAK,CAAA,EAAA;AAAA,MACf,UAAY,EAAA,WAAA;AAAA,MACZ,cAAgB,EAAA;AAAA,KACjB,CAAA;AAAA;AAEL","file":"typing.mjs","sourcesContent":["import { IActivity, Activity } from './activity';\n\nexport interface ITypingActivity extends IActivity<'typing'> {\n  /**\n   * The text content of the message.\n   */\n  text?: string;\n}\n\nexport class TypingActivity extends Activity<'typing'> implements ITypingActivity {\n  /**\n   * The text content of the message.\n   */\n  text?: string;\n\n  constructor(value: Omit<Partial<ITypingActivity>, 'type'> = {}) {\n    super({\n      type: 'typing',\n      ...value,\n    });\n\n    Object.assign(this, value);\n  }\n\n  /**\n   * initialize from interface\n   */\n  static from(activity: ITypingActivity) {\n    return new TypingActivity(activity);\n  }\n\n  /**\n   * convert to interface\n   */\n  toInterface(): ITypingActivity {\n    return Object.assign({}, this);\n  }\n\n  /**\n   * copy to a new instance\n   */\n  clone(options: Omit<Partial<ITypingActivity>, 'type'> = {}) {\n    return new TypingActivity({\n      ...this.toInterface(),\n      ...options,\n    });\n  }\n\n  /**\n   * The text content of the message.\n   */\n  withText(value: string) {\n    this.text = value;\n    return this;\n  }\n\n  /**\n   * Append text\n   */\n  addText(text: string) {\n    if (!this.text) {\n      this.text = '';\n    }\n\n    this.text += text;\n    return this;\n  }\n\n  /**\n   * Add stream informative update\n   * @param id the stream id\n   * @param sequence the sequence number (index) of the chunk\n   */\n  addStreamUpdate(sequence: number = 0) {\n    if (!this.channelData) {\n      this.channelData = {};\n    }\n\n    this.channelData.streamId = this.id;\n    this.channelData.streamType = 'streaming';\n    this.channelData.streamSequence = sequence;\n\n    return this.addEntity({\n      type: 'streaminfo',\n      streamId: this.id,\n      streamType: 'streaming',\n      streamSequence: sequence,\n    });\n  }\n}\n"]}