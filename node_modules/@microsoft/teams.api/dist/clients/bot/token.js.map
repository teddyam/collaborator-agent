{"version":3,"sources":["../../../src/clients/bot/token.ts"],"names":["Client","qs"],"mappings":";;;;;;;;;AAaO,MAAM,cAAe,CAAA;AAAA,EAC1B,IAAI,IAAO,GAAA;AACT,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd,EACA,IAAI,KAAK,CAAG,EAAA;AACV,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AAAA;AACf,EACU,KAAA;AAAA,EAEV,YAAY,OAAkC,EAAA;AAC5C,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAK,IAAA,CAAA,KAAA,GAAQ,IAAIA,WAAO,EAAA;AAAA,KAC1B,MAAA,IAAW,aAAa,OAAS,EAAA;AAC/B,MAAA,IAAA,CAAK,KAAQ,GAAA,OAAA;AAAA,KACR,MAAA;AACL,MAAK,IAAA,CAAA,KAAA,GAAQ,IAAIA,WAAA,CAAO,OAAO,CAAA;AAAA;AACjC;AACF,EAEA,MAAM,IAAI,WAA0B,EAAA;AAClC,IAAA,IAAI,WAAW,WAAa,EAAA;AAC1B,MAAO,OAAA;AAAA,QACL,UAAY,EAAA,QAAA;AAAA,QACZ,UAAY,EAAA,EAAA;AAAA,QACZ,YAAA,EAAc,MAAM,WAAY,CAAA,KAAA;AAAA,UAC9B,uCAAA;AAAA,UACA,WAAY,CAAA;AAAA;AACd,OACF;AAAA;AAGF,IAAM,MAAA,QAAA,GAAW,YAAY,QAAY,IAAA,kBAAA;AACzC,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,IAAA;AAAA,MAC1B,qCAAqC,QAAQ,CAAA,kBAAA,CAAA;AAAA,MAC7CC,oBAAG,SAAU,CAAA;AAAA,QACX,UAAY,EAAA,oBAAA;AAAA,QACZ,WAAW,WAAY,CAAA,QAAA;AAAA,QACvB,eAAe,WAAY,CAAA,YAAA;AAAA,QAC3B,KAAO,EAAA;AAAA,OACR,CAAA;AAAA,MACD;AAAA,QACE,OAAA,EAAS,EAAE,cAAA,EAAgB,mCAAoC;AAAA;AACjE,KACF;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AACb,EAEA,MAAM,SAAS,WAA0B,EAAA;AACvC,IAAA,IAAI,WAAW,WAAa,EAAA;AAC1B,MAAO,OAAA;AAAA,QACL,UAAY,EAAA,QAAA;AAAA,QACZ,UAAY,EAAA,EAAA;AAAA,QACZ,YAAA,EAAc,MAAM,WAAY,CAAA,KAAA;AAAA,UAC9B,sCAAA;AAAA,UACA,WAAY,CAAA;AAAA;AACd,OACF;AAAA;AAGF,IAAM,MAAA,QAAA,GAAW,YAAY,QAAY,IAAA,kBAAA;AACzC,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,IAAA;AAAA,MAC1B,qCAAqC,QAAQ,CAAA,kBAAA,CAAA;AAAA,MAC7CA,oBAAG,SAAU,CAAA;AAAA,QACX,UAAY,EAAA,oBAAA;AAAA,QACZ,WAAW,WAAY,CAAA,QAAA;AAAA,QACvB,eAAe,WAAY,CAAA,YAAA;AAAA,QAC3B,KAAO,EAAA;AAAA,OACR,CAAA;AAAA,MACD;AAAA,QACE,OAAA,EAAS,EAAE,cAAA,EAAgB,mCAAoC;AAAA;AACjE,KACF;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AAEf","file":"token.js","sourcesContent":["import qs from 'qs';\n\nimport { Client, ClientOptions } from '@microsoft/teams.common/http';\n\nimport { Credentials } from '../../auth';\n\nexport type GetBotTokenResponse = {\n  readonly token_type: 'Bearer';\n  readonly expires_in: number;\n  readonly ext_expires_in?: number;\n  readonly access_token: string;\n};\n\nexport class BotTokenClient {\n  get http() {\n    return this._http;\n  }\n  set http(v) {\n    this._http = v;\n  }\n  protected _http: Client;\n\n  constructor(options?: Client | ClientOptions) {\n    if (!options) {\n      this._http = new Client();\n    } else if ('request' in options) {\n      this._http = options;\n    } else {\n      this._http = new Client(options);\n    }\n  }\n\n  async get(credentials: Credentials) {\n    if ('token' in credentials) {\n      return {\n        token_type: 'Bearer',\n        expires_in: -1,\n        access_token: await credentials.token(\n          'https://api.botframework.com/.default',\n          credentials.tenantId\n        ),\n      };\n    }\n\n    const tenantId = credentials.tenantId || 'botframework.com';\n    const res = await this.http.post<GetBotTokenResponse>(\n      `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`,\n      qs.stringify({\n        grant_type: 'client_credentials',\n        client_id: credentials.clientId,\n        client_secret: credentials.clientSecret,\n        scope: 'https://api.botframework.com/.default',\n      }),\n      {\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      }\n    );\n\n    return res.data;\n  }\n\n  async getGraph(credentials: Credentials) {\n    if ('token' in credentials) {\n      return {\n        token_type: 'Bearer',\n        expires_in: -1,\n        access_token: await credentials.token(\n          'https://graph.microsoft.com/.default',\n          credentials.tenantId\n        ),\n      };\n    }\n\n    const tenantId = credentials.tenantId || 'botframework.com';\n    const res = await this.http.post<GetBotTokenResponse>(\n      `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`,\n      qs.stringify({\n        grant_type: 'client_credentials',\n        client_id: credentials.clientId,\n        client_secret: credentials.clientSecret,\n        scope: 'https://graph.microsoft.com/.default',\n      }),\n      {\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      }\n    );\n\n    return res.data;\n  }\n}\n"]}