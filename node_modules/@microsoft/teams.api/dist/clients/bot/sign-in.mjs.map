{"version":3,"sources":["../../../src/clients/bot/sign-in.ts"],"names":[],"mappings":";;;AAoBO,MAAM,eAAgB,CAAA;AAAA,EAC3B,IAAI,IAAO,GAAA;AACT,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd,EACA,IAAI,KAAK,CAAG,EAAA;AACV,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AAAA;AACf,EACU,KAAA;AAAA,EAEV,YAAY,OAAkC,EAAA;AAC5C,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAK,IAAA,CAAA,KAAA,GAAQ,IAAI,MAAO,EAAA;AAAA,KAC1B,MAAA,IAAW,aAAa,OAAS,EAAA;AAC/B,MAAA,IAAA,CAAK,KAAQ,GAAA,OAAA;AAAA,KACR,MAAA;AACL,MAAK,IAAA,CAAA,KAAA,GAAQ,IAAI,MAAA,CAAO,OAAO,CAAA;AAAA;AACjC;AACF,EAEA,MAAM,OAAO,MAA+B,EAAA;AAC1C,IAAM,MAAA,CAAA,GAAI,EAAG,CAAA,SAAA,CAAU,MAAM,CAAA;AAC7B,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,GAAA;AAAA,MAC1B,6DAA6D,CAAC,CAAA;AAAA,KAChE;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AACb,EAEA,MAAM,YAAY,MAAoC,EAAA;AACpD,IAAM,MAAA,CAAA,GAAI,EAAG,CAAA,SAAA,CAAU,MAAM,CAAA;AAC7B,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,GAAA;AAAA,MAC1B,kEAAkE,CAAC,CAAA;AAAA,KACrE;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AAEf","file":"sign-in.mjs","sourcesContent":["import qs from 'qs';\n\nimport { Client, ClientOptions } from '@microsoft/teams.common/http';\n\nimport { SignInUrlResponse } from '../../models';\n\nexport type GetBotSignInUrlParams = {\n  state: string;\n  codeChallenge?: string;\n  emulatorUrl?: string;\n  finalRedirect?: string;\n};\n\nexport type GetBotSignInResourceParams = {\n  state: string;\n  codeChallenge?: string;\n  emulatorUrl?: string;\n  finalRedirect?: string;\n};\n\nexport class BotSignInClient {\n  get http() {\n    return this._http;\n  }\n  set http(v) {\n    this._http = v;\n  }\n  protected _http: Client;\n\n  constructor(options?: Client | ClientOptions) {\n    if (!options) {\n      this._http = new Client();\n    } else if ('request' in options) {\n      this._http = options;\n    } else {\n      this._http = new Client(options);\n    }\n  }\n\n  async getUrl(params: GetBotSignInUrlParams) {\n    const q = qs.stringify(params);\n    const res = await this.http.get<string>(\n      `https://token.botframework.com/api/botsignin/GetSignInUrl?${q}`\n    );\n\n    return res.data;\n  }\n\n  async getResource(params: GetBotSignInResourceParams) {\n    const q = qs.stringify(params);\n    const res = await this.http.get<SignInUrlResponse>(\n      `https://token.botframework.com/api/botsignin/GetSignInResource?${q}`\n    );\n\n    return res.data;\n  }\n}\n"]}