'use strict';

var qs = require('qs');
var http = require('@microsoft/teams.common/http');
var activity = require('./activity');
var member = require('./member');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var qs__default = /*#__PURE__*/_interopDefault(qs);

class ConversationClient {
  serviceUrl;
  get http() {
    return this._http;
  }
  set http(v) {
    this._http = v;
  }
  _http;
  _activities;
  _members;
  constructor(serviceUrl, options) {
    this.serviceUrl = serviceUrl;
    if (!options) {
      this._http = new http.Client();
    } else if ("request" in options) {
      this._http = options;
    } else {
      this._http = new http.Client(options);
    }
    this._activities = new activity.ConversationActivityClient(serviceUrl, this.http);
    this._members = new member.ConversationMemberClient(serviceUrl, this.http);
  }
  activities(conversationId) {
    return {
      create: (params) => this._activities.create(conversationId, params),
      update: (id, params) => this._activities.update(conversationId, id, params),
      reply: (id, params) => this._activities.reply(conversationId, id, params),
      delete: (id) => this._activities.delete(conversationId, id),
      members: (activityId) => this._activities.getMembers(conversationId, activityId)
    };
  }
  members(conversationId) {
    return {
      get: () => this._members.get(conversationId),
      getById: (id) => this._members.getById(conversationId, id),
      delete: (id) => this._members.delete(conversationId, id)
    };
  }
  async get(params) {
    const q = qs__default.default.stringify(params, { addQueryPrefix: true });
    const res = await this.http.get(
      `${this.serviceUrl}/v3/conversations${q}`
    );
    return res.data;
  }
  async create(params) {
    const res = await this.http.post(
      `${this.serviceUrl}/v3/conversations`,
      params
    );
    return res.data;
  }
}

exports.ConversationClient = ConversationClient;
Object.keys(activity).forEach(function (k) {
  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return activity[k]; }
  });
});
Object.keys(member).forEach(function (k) {
  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return member[k]; }
  });
});
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map