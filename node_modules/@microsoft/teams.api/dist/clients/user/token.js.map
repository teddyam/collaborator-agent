{"version":3,"sources":["../../../src/clients/user/token.ts"],"names":["Client","qs"],"mappings":";;;;;;;;;AAuCO,MAAM,eAAgB,CAAA;AAAA,EAC3B,IAAI,IAAO,GAAA;AACT,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd,EACA,IAAI,KAAK,CAAG,EAAA;AACV,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AAAA;AACf,EACU,KAAA;AAAA,EAEV,YAAY,OAAkC,EAAA;AAC5C,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAK,IAAA,CAAA,KAAA,GAAQ,IAAIA,WAAO,EAAA;AAAA,KAC1B,MAAA,IAAW,aAAa,OAAS,EAAA;AAC/B,MAAA,IAAA,CAAK,KAAQ,GAAA,OAAA;AAAA,KACR,MAAA;AACL,MAAK,IAAA,CAAA,KAAA,GAAQ,IAAIA,WAAA,CAAO,OAAO,CAAA;AAAA;AACjC;AACF,EAEA,MAAM,IAAI,MAA4B,EAAA;AACpC,IAAM,MAAA,CAAA,GAAIC,mBAAG,CAAA,SAAA,CAAU,MAAM,CAAA;AAC7B,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,GAAA;AAAA,MAC1B,yDAAyD,CAAC,CAAA;AAAA,KAC5D;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AACb,EAEA,MAAM,OAAO,MAA+B,EAAA;AAC1C,IAAM,MAAA,CAAA,GAAIA,mBAAG,CAAA,SAAA,CAAU,MAAM,CAAA;AAC7B,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,IAAA;AAAA,MAC1B,6DAA6D,CAAC,CAAA,CAAA;AAAA,MAC9D;AAAA,KACF;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AACb,EAEA,MAAM,UAAU,MAAkC,EAAA;AAChD,IAAM,MAAA,CAAA,GAAIA,mBAAG,CAAA,SAAA,CAAU,MAAM,CAAA;AAC7B,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,GAAA;AAAA,MAC1B,+DAA+D,CAAC,CAAA;AAAA,KAClE;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AACb,EAEA,MAAM,QAAQ,MAA2B,EAAA;AACvC,IAAM,MAAA,CAAA,GAAIA,mBAAG,CAAA,SAAA,CAAU,MAAM,CAAA;AAC7B,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,MAAA;AAAA,MAC1B,wDAAwD,CAAC,CAAA,CAAA;AAAA,MACzD,EAAE,MAAM,MAAO;AAAA,KACjB;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AACb,EAEA,MAAM,SAAS,MAAiC,EAAA;AAC9C,IAAM,MAAA,CAAA,GAAIA,oBAAG,SAAU,CAAA;AAAA,MACrB,QAAQ,MAAO,CAAA,MAAA;AAAA,MACf,gBAAgB,MAAO,CAAA,cAAA;AAAA,MACvB,WAAW,MAAO,CAAA;AAAA,KACnB,CAAA;AAED,IAAM,MAAA,GAAA,GAAM,MAAM,IAAA,CAAK,IAAK,CAAA,IAAA;AAAA,MAC1B,yDAAyD,CAAC,CAAA,CAAA;AAAA,MAC1D;AAAA,QACE,iBAAiB,MAAO,CAAA;AAAA;AAC1B,KACF;AAEA,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA;AAEf","file":"token.js","sourcesContent":["import qs from 'qs';\n\nimport { Client, ClientOptions } from '@microsoft/teams.common/http';\n\nimport { ChannelID, TokenExchangeRequest, TokenResponse, TokenStatus } from '../../models';\n\nexport type GetUserTokenParams = {\n  userId: string;\n  connectionName: string;\n  channelId?: ChannelID;\n  code?: string;\n};\n\nexport type GetUserAADTokenParams = {\n  userId: string;\n  connectionName: string;\n  resourceUrls: string[];\n  channelId: ChannelID;\n};\n\nexport type GetUserTokenStatusParams = {\n  userId: string;\n  channelId: ChannelID;\n  includeFilter: string;\n};\n\nexport type SignOutUserParams = {\n  userId: string;\n  connectionName: string;\n  channelId: ChannelID;\n};\n\nexport type ExchangeUserTokenParams = {\n  userId: string;\n  connectionName: string;\n  channelId: ChannelID;\n  exchangeRequest: TokenExchangeRequest;\n};\n\nexport class UserTokenClient {\n  get http() {\n    return this._http;\n  }\n  set http(v) {\n    this._http = v;\n  }\n  protected _http: Client;\n\n  constructor(options?: Client | ClientOptions) {\n    if (!options) {\n      this._http = new Client();\n    } else if ('request' in options) {\n      this._http = options;\n    } else {\n      this._http = new Client(options);\n    }\n  }\n\n  async get(params: GetUserTokenParams) {\n    const q = qs.stringify(params);\n    const res = await this.http.get<TokenResponse>(\n      `https://token.botframework.com/api/usertoken/GetToken?${q}`\n    );\n\n    return res.data;\n  }\n\n  async getAad(params: GetUserAADTokenParams) {\n    const q = qs.stringify(params);\n    const res = await this.http.post<Record<string, TokenResponse>>(\n      `https://token.botframework.com/api/usertoken/GetAadTokens?${q}`,\n      params\n    );\n\n    return res.data;\n  }\n\n  async getStatus(params: GetUserTokenStatusParams) {\n    const q = qs.stringify(params);\n    const res = await this.http.get<TokenStatus[]>(\n      `https://token.botframework.com/api/usertoken/GetTokenStatus?${q}`\n    );\n\n    return res.data;\n  }\n\n  async signOut(params: SignOutUserParams) {\n    const q = qs.stringify(params);\n    const res = await this.http.delete<void>(\n      `https://token.botframework.com/api/usertoken/SignOut?${q}`,\n      { data: params }\n    );\n\n    return res.data;\n  }\n\n  async exchange(params: ExchangeUserTokenParams) {\n    const q = qs.stringify({\n      userId: params.userId,\n      connectionName: params.connectionName,\n      channelId: params.channelId,\n    });\n\n    const res = await this.http.post<TokenResponse>(\n      `https://token.botframework.com/api/usertoken/exchange?${q}`,\n      {\n        exchangeRequest: params.exchangeRequest,\n      }\n    );\n\n    return res.data;\n  }\n}\n"]}