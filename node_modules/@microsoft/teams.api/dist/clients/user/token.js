'use strict';

var qs = require('qs');
var http = require('@microsoft/teams.common/http');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var qs__default = /*#__PURE__*/_interopDefault(qs);

class UserTokenClient {
  get http() {
    return this._http;
  }
  set http(v) {
    this._http = v;
  }
  _http;
  constructor(options) {
    if (!options) {
      this._http = new http.Client();
    } else if ("request" in options) {
      this._http = options;
    } else {
      this._http = new http.Client(options);
    }
  }
  async get(params) {
    const q = qs__default.default.stringify(params);
    const res = await this.http.get(
      `https://token.botframework.com/api/usertoken/GetToken?${q}`
    );
    return res.data;
  }
  async getAad(params) {
    const q = qs__default.default.stringify(params);
    const res = await this.http.post(
      `https://token.botframework.com/api/usertoken/GetAadTokens?${q}`,
      params
    );
    return res.data;
  }
  async getStatus(params) {
    const q = qs__default.default.stringify(params);
    const res = await this.http.get(
      `https://token.botframework.com/api/usertoken/GetTokenStatus?${q}`
    );
    return res.data;
  }
  async signOut(params) {
    const q = qs__default.default.stringify(params);
    const res = await this.http.delete(
      `https://token.botframework.com/api/usertoken/SignOut?${q}`,
      { data: params }
    );
    return res.data;
  }
  async exchange(params) {
    const q = qs__default.default.stringify({
      userId: params.userId,
      connectionName: params.connectionName,
      channelId: params.channelId
    });
    const res = await this.http.post(
      `https://token.botframework.com/api/usertoken/exchange?${q}`,
      {
        exchangeRequest: params.exchangeRequest
      }
    );
    return res.data;
  }
}

exports.UserTokenClient = UserTokenClient;
//# sourceMappingURL=token.js.map
//# sourceMappingURL=token.js.map