import { MeetingInfo } from '../meeting/meeting-info.js';
import { ChannelInfo } from './channel-info.js';
import { NotificationInfo } from './notification-info.js';
import { ChannelDataSettings } from './settings.js';
import { TeamInfo } from './team-info.js';
import { TenantInfo } from './tenant-info.js';
import '../account.js';
import '../role.js';
import '../meeting/meeting-details.js';

/**
 *
 * An interface representing ChannelData.
 * Channel data specific to messages received in Microsoft Teams
 *
 */
type ChannelData = {
    /**
     * @member {ChannelInfo} [channel] Information about the channel in which the
     * message was sent.
     */
    channel?: ChannelInfo;
    /**
     * @member {string} [eventType] Type of event.
     */
    eventType?: unknown;
    /**
     * @member {TeamInfo} [team] Information about the team in which the message
     * was sent.
     */
    team?: TeamInfo;
    /**
     * @member {NotificationInfo} [notification] Notification settings for the
     * message.
     */
    notification?: NotificationInfo;
    /**
     * @member {TenantInfo} [tenant] Information about the tenant in which the
     * message was sent.
     */
    tenant?: TenantInfo;
    /**
     * @member {MeetingInfo} [meeting] Information about the tenant in which the
     * message was sent.
     */
    meeting?: MeetingInfo;
    /**
     * @member {ChannelDataSettings} [settings] Information about the settings in which the
     * message was sent.
     */
    settings?: ChannelDataSettings;
    /**
     * Whether or not the feedback loop feature is enabled.
     */
    feedbackLoopEnabled?: boolean;
    /**
     * ID of the stream.
     * @remarks
     * Assigned after the initial update is sent.
     */
    streamId?: string;
    /**
     * The type of message being sent.
     * @remarks
     * `informative` - An informative update.
     * `streaming` - A chunk of partial message text.
     * `final` - The final message.
     */
    streamType?: 'informative' | 'streaming' | 'final';
    /**
     * Sequence number of the message in the stream.
     * @remarks
     * Starts at 1 for the first message and increments from there.
     */
    streamSequence?: number;
};

export { type ChannelData, ChannelDataSettings, ChannelInfo, NotificationInfo, TeamInfo, TenantInfo };
