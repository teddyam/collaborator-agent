{"version":3,"sources":["../src/local-memory.ts"],"names":[],"mappings":"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","file":"local-memory.js","sourcesContent":["import { IMemory } from './memory';\nimport { Message } from './message';\nimport { IChatModel } from './models';\n\nexport type LocalMemoryOptions = {\n  readonly max?: number;\n  readonly messages?: Message[];\n  readonly collapse?: {\n    readonly strategy: 'half' | 'full';\n    readonly model: IChatModel;\n  };\n};\n\nexport class LocalMemory implements IMemory {\n  protected readonly messages: Message[];\n  protected readonly options: LocalMemoryOptions;\n\n  constructor(options?: LocalMemoryOptions) {\n    this.messages = options?.messages || [];\n    this.options = options || {};\n  }\n\n  get(i: number) {\n    if (i < 0 || i > this.messages.length - 1) return;\n    return this.messages[i];\n  }\n\n  set(i: number, message: Message) {\n    if (i < 0 || i > this.messages.length - 1) return;\n    this.messages[i] = message;\n  }\n\n  delete(i: number) {\n    if (i < 0 || i > this.messages.length - 1) return;\n    this.messages.splice(i, 1);\n  }\n\n  async push(message: Message) {\n    this.messages.push(message);\n    let len = this.length();\n\n    if (len === (this.options.max || 100)) {\n      await this.collapse();\n      len = this.length();\n    }\n\n    while (\n      len > (this.options.max || 100) ||\n      (this.messages[0].role === 'model' && this.messages[0].function_calls?.length) ||\n      this.messages[0].role === 'function'\n    ) {\n      const removed = this.pop();\n\n      if (!removed) break;\n\n      len = this.length();\n\n      if (len === 0) break;\n    }\n  }\n\n  pop() {\n    return this.messages.shift();\n  }\n\n  values() {\n    return this.messages.slice();\n  }\n\n  length() {\n    return this.messages.length;\n  }\n\n  where(predicate: (value: Message, index: number) => boolean) {\n    return this.messages.filter(predicate);\n  }\n\n  async collapse() {\n    if (!this.options.collapse) return;\n\n    const start = 0;\n    let end = this.length() - 1;\n\n    if (this.options.collapse.strategy === 'half') {\n      end = Math.floor(this.length() / 2) - 1;\n    }\n\n    let last = this.messages[end];\n\n    while ((last.role === 'model' && last.function_calls?.length) || last.role === 'function') {\n      end++;\n      last = this.messages[end];\n    }\n\n    const res = await this.options.collapse.model.send(\n      {\n        role: 'user',\n        content: 'summarize this conversation',\n      },\n      {\n        messages: new LocalMemory({\n          messages: this.messages.slice(start, end + 1),\n        }),\n      }\n    );\n\n    this.messages.splice(start, end - start, res);\n    return res;\n  }\n}\n"]}