import { IAudioModel, TextToAudioParams, AudioToTextParams } from '../models/audio.mjs';

type AudioPromptOptions = {
    /**
     * the name of the prompt
     */
    readonly name?: string;
    /**
     * the description of the prompt
     */
    readonly description?: string;
    /**
     * the model to send requests to
     */
    readonly model: IAudioModel;
};
/**
 * a prompt that can interface with
 * an audio model
 */
interface IAudioPrompt {
    /**
     * the prompt name
     */
    readonly name: string;
    /**
     * the prompt description
     */
    readonly description: string;
    /**
     * convert text to audio
     */
    textToAudio?(params: TextToAudioParams): Promise<Buffer>;
    /**
     * transcribe audio to text
     */
    audioToText?(params: AudioToTextParams): Promise<string>;
}
/**
 * a prompt that can interface with
 * an audio model
 */
declare class AudioPrompt implements IAudioPrompt {
    get name(): string;
    protected readonly _name: string;
    get description(): string;
    protected readonly _description: string;
    protected readonly _model: IAudioModel;
    constructor(options: AudioPromptOptions);
    audioToText(params: AudioToTextParams): Promise<string>;
    textToAudio(params: TextToAudioParams): Promise<Buffer<ArrayBufferLike>>;
}

export { AudioPrompt, type AudioPromptOptions, type IAudioPrompt };
