import { ContentPart, ModelMessage } from '../message.mjs';
import { ILogger } from '@microsoft/teams.common';
import { Function, FunctionHandler } from '../function.mjs';
import { IMemory } from '../memory.mjs';
import { IChatModel } from '../models/chat.mjs';
import { Schema } from '../schema.mjs';
import { ITemplate } from '../template.mjs';
import { ChatPromptPlugin, IChatPrompt, ChatPromptOptions, ChatPromptSendOptions } from './chat-types.mjs';
import '../citation.mjs';
import '../utils/types.mjs';
import './plugin.mjs';

/**
 * a prompt that can interface with a
 * chat model that provides utility like
 * streaming and function calling
 */
declare class ChatPrompt<TOptions extends Record<string, any> = Record<string, any>, TChatPromptPlugins extends readonly ChatPromptPlugin<string, any>[] = []> implements IChatPrompt<TOptions, TChatPromptPlugins> {
    get name(): string;
    protected readonly _name: string;
    get description(): string;
    protected readonly _description: string;
    get messages(): IMemory;
    protected readonly _messages: IMemory;
    get functions(): Function[];
    protected readonly _functions: Record<string, Function>;
    get plugins(): TChatPromptPlugins;
    protected readonly _plugins: TChatPromptPlugins;
    protected readonly _role: 'system' | 'user';
    protected readonly _template: ITemplate;
    protected readonly _model: IChatModel<TOptions>;
    protected readonly _log: ILogger;
    constructor(options: ChatPromptOptions<TOptions>, plugins?: TChatPromptPlugins);
    use(prompt: IChatPrompt): this;
    use(name: string, prompt: IChatPrompt): this;
    function(name: string, description: string, handler: FunctionHandler): this;
    function(name: string, description: string, parameters: Schema, handler: FunctionHandler): this;
    usePlugin<K extends TChatPromptPlugins[number]['name']>(name: K, args: Extract<TChatPromptPlugins[number], {
        name: K;
    }>['onUsePlugin'] extends ((args: infer U) => void) | undefined ? U : never): this;
    call<A extends {
        [key: string]: any;
    }, R = any>(name: string, args?: A): Promise<R>;
    send(input: string | ContentPart[], options?: ChatPromptSendOptions<TOptions>): Promise<ModelMessage>;
    protected executeFunction<R = any>(name: string, fn: Function, args?: Record<string, any>): Promise<R>;
}

export { ChatPrompt };
