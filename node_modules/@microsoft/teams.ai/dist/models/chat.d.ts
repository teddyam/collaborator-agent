import { Function } from '../function.js';
import { IMemory } from '../memory.js';
import { Message, SystemMessage, UserMessage, ModelMessage } from '../message.js';
import '../schema.js';
import '@microsoft/teams.common';
import '../citation.js';

type TextChunkHandler = (chunk: string) => void | Promise<void>;
type ChatSendOptions<TOptions = Record<string, any>> = {
    /**
     * the initial system/user message that defines
     * model behavior
     */
    readonly system?: SystemMessage | UserMessage;
    /**
     * the conversation history
     */
    readonly messages?: IMemory;
    /**
     * the registered functions
     */
    readonly functions?: Record<string, Function>;
    /**
     * the request option overrides
     */
    readonly request?: TOptions;
    /**
     * the handler to call with each
     * stream chunk
     */
    readonly onChunk?: TextChunkHandler;
};
/**
 * a conversational model for sending and receiving
 * messages
 */
interface IChatModel<TOptions = Record<string, any>> {
    /**
     * send a message to the model
     * @param input the message to send
     * @param options the send options
     */
    send(input: Message, options?: ChatSendOptions<TOptions>): Promise<ModelMessage>;
}

export type { ChatSendOptions, IChatModel, TextChunkHandler };
