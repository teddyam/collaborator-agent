import { Message, ModelMessage } from './message.mjs';
import { IMemory } from './memory.mjs';
import { IChatModel } from './models/chat.mjs';
import './citation.mjs';
import './function.mjs';
import './schema.mjs';
import '@microsoft/teams.common';

type LocalMemoryOptions = {
    readonly max?: number;
    readonly messages?: Message[];
    readonly collapse?: {
        readonly strategy: 'half' | 'full';
        readonly model: IChatModel;
    };
};
declare class LocalMemory implements IMemory {
    protected readonly messages: Message[];
    protected readonly options: LocalMemoryOptions;
    constructor(options?: LocalMemoryOptions);
    get(i: number): Message | undefined;
    set(i: number, message: Message): void;
    delete(i: number): void;
    push(message: Message): Promise<void>;
    pop(): Message | undefined;
    values(): Message[];
    length(): number;
    where(predicate: (value: Message, index: number) => boolean): Message[];
    collapse(): Promise<ModelMessage | undefined>;
}

export { LocalMemory, type LocalMemoryOptions };
