{"version":3,"sources":["../src/core.ts"],"names":[],"mappings":"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","file":"core.mjs","sourcesContent":[" \n \n/*\n  This file was automatically generated by a tool on 05/02/2025, 4:26 PM UTC.\n  It includes declarations for Adaptive Card features available in Teams.\n*/\nexport type CardElement =\n  | IContainer\n  | IActionSet\n  | IColumnSet\n  | IMedia\n  | IRichTextBlock\n  | ITable\n  | ITextBlock\n  | IFactSet\n  | IImageSet\n  | IImage\n  | ITextInput\n  | IDateInput\n  | ITimeInput\n  | INumberInput\n  | IToggleInput\n  | IChoiceSetInput\n  | IRatingInput\n  | IRating\n  | ICompoundButton\n  | IIcon\n  | ICarousel\n  | IBadge\n  | IDonutChart\n  | IPieChart\n  | IGroupedVerticalBarChart\n  | IVerticalBarChart\n  | IHorizontalBarChart\n  | IStackedHorizontalBarChart\n  | ILineChart\n  | IGaugeChart\n  | ICodeBlock\n  | IComUserMicrosoftGraphComponent\n  | IComUsersMicrosoftGraphComponent\n  | IComResourceMicrosoftGraphComponent\n  | IComFileMicrosoftGraphComponent\n  | IComEventMicrosoftGraphComponent;\n\nexport type CardAction =\n  | ISubmitAction\n  | IOpenUrlAction\n  | IExecuteAction\n  | IToggleVisibilityAction\n  | IShowCardAction\n  | IResetInputsAction;\n\nexport type IconName =\n  | 'AccessTime'\n  | 'Accessibility'\n  | 'AccessibilityCheckmark'\n  | 'Add'\n  | 'AddCircle'\n  | 'AddSquare'\n  | 'AddSquareMultiple'\n  | 'AddSubtractCircle'\n  | 'Airplane'\n  | 'AirplaneLanding'\n  | 'AirplaneTakeOff'\n  | 'Album'\n  | 'AlbumAdd'\n  | 'Alert'\n  | 'AlertBadge'\n  | 'AlertOff'\n  | 'AlertOn'\n  | 'AlertSnooze'\n  | 'AlertUrgent'\n  | 'AlignBottom'\n  | 'AlignCenterHorizontal'\n  | 'AlignCenterVertical'\n  | 'AlignDistributeBottom'\n  | 'AlignDistributeLeft'\n  | 'AlignDistributeRight'\n  | 'AlignDistributeTop'\n  | 'AlignEndHorizontal'\n  | 'AlignEndVertical'\n  | 'AlignLeft'\n  | 'AlignRight'\n  | 'AlignSpaceAroundHorizontal'\n  | 'AlignSpaceAroundVertical'\n  | 'AlignSpaceBetweenHorizontal'\n  | 'AlignSpaceBetweenVertical'\n  | 'AlignSpaceEvenlyHorizontal'\n  | 'AlignSpaceEvenlyVertical'\n  | 'AlignSpaceFitVertical'\n  | 'AlignStartHorizontal'\n  | 'AlignStartVertical'\n  | 'AlignStraighten'\n  | 'AlignStretchHorizontal'\n  | 'AlignStretchVertical'\n  | 'AlignTop'\n  | 'AnimalCat'\n  | 'AnimalDog'\n  | 'AnimalRabbit'\n  | 'AnimalRabbitOff'\n  | 'AnimalTurtle'\n  | 'AppFolder'\n  | 'AppGeneric'\n  | 'AppRecent'\n  | 'AppStore'\n  | 'AppTitle'\n  | 'ApprovalsApp'\n  | 'Apps'\n  | 'AppsAddIn'\n  | 'AppsList'\n  | 'AppsListDetail'\n  | 'Archive'\n  | 'ArchiveArrowBack'\n  | 'ArchiveMultiple'\n  | 'ArchiveSettings'\n  | 'ArrowAutofitContent'\n  | 'ArrowAutofitDown'\n  | 'ArrowAutofitHeight'\n  | 'ArrowAutofitHeightDotted'\n  | 'ArrowAutofitHeightIn'\n  | 'ArrowAutofitUp'\n  | 'ArrowAutofitWidth'\n  | 'ArrowAutofitWidthDotted'\n  | 'ArrowBetweenDown'\n  | 'ArrowBetweenUp'\n  | 'ArrowBidirectionalLeftRight'\n  | 'ArrowBidirectionalUpDown'\n  | 'ArrowBounce'\n  | 'ArrowCircleDown'\n  | 'ArrowCircleDownDouble'\n  | 'ArrowCircleDownRight'\n  | 'ArrowCircleDownSplit'\n  | 'ArrowCircleDownUp'\n  | 'ArrowCircleLeft'\n  | 'ArrowCircleRight'\n  | 'ArrowCircleUp'\n  | 'ArrowCircleUpLeft'\n  | 'ArrowCircleUpRight'\n  | 'ArrowClockwise'\n  | 'ArrowClockwiseDashes'\n  | 'ArrowCollapseAll'\n  | 'ArrowCounterclockwise'\n  | 'ArrowCounterclockwiseDashes'\n  | 'ArrowCurveDownLeft'\n  | 'ArrowCurveDownRight'\n  | 'ArrowCurveUpLeft'\n  | 'ArrowCurveUpRight'\n  | 'ArrowDown'\n  | 'ArrowDownExclamation'\n  | 'ArrowDownLeft'\n  | 'ArrowDownload'\n  | 'ArrowDownloadOff'\n  | 'ArrowEject'\n  | 'ArrowEnter'\n  | 'ArrowEnterLeft'\n  | 'ArrowEnterUp'\n  | 'ArrowExit'\n  | 'ArrowExpand'\n  | 'ArrowExport'\n  | 'ArrowExportLtr'\n  | 'ArrowExportRtl'\n  | 'ArrowExportUp'\n  | 'ArrowFit'\n  | 'ArrowFitIn'\n  | 'ArrowFlowDiagonalUpRight'\n  | 'ArrowFlowUpRight'\n  | 'ArrowFlowUpRightRectangleMultiple'\n  | 'ArrowForward'\n  | 'ArrowForwardDownLightning'\n  | 'ArrowForwardDownPerson'\n  | 'ArrowHookDownLeft'\n  | 'ArrowHookDownRight'\n  | 'ArrowHookUpLeft'\n  | 'ArrowHookUpRight'\n  | 'ArrowImport'\n  | 'ArrowJoin'\n  | 'ArrowLeft'\n  | 'ArrowMaximize'\n  | 'ArrowMaximizeVertical'\n  | 'ArrowMinimize'\n  | 'ArrowMinimizeVertical'\n  | 'ArrowMove'\n  | 'ArrowMoveInward'\n  | 'ArrowNext'\n  | 'ArrowOutlineDownLeft'\n  | 'ArrowOutlineUpRight'\n  | 'ArrowParagraph'\n  | 'ArrowPrevious'\n  | 'ArrowRedo'\n  | 'ArrowRepeat1'\n  | 'ArrowRepeatAll'\n  | 'ArrowRepeatAllOff'\n  | 'ArrowReply'\n  | 'ArrowReplyAll'\n  | 'ArrowReplyDown'\n  | 'ArrowReset'\n  | 'ArrowRight'\n  | 'ArrowRotateClockwise'\n  | 'ArrowRotateCounterclockwise'\n  | 'ArrowRouting'\n  | 'ArrowRoutingRectangleMultiple'\n  | 'ArrowShuffle'\n  | 'ArrowShuffleOff'\n  | 'ArrowSort'\n  | 'ArrowSortDown'\n  | 'ArrowSortDownLines'\n  | 'ArrowSortUp'\n  | 'ArrowSplit'\n  | 'ArrowSprint'\n  | 'ArrowSquareDown'\n  | 'ArrowSquareUpRight'\n  | 'ArrowStepBack'\n  | 'ArrowStepIn'\n  | 'ArrowStepInDiagonalDownLeft'\n  | 'ArrowStepInLeft'\n  | 'ArrowStepInRight'\n  | 'ArrowStepOut'\n  | 'ArrowStepOver'\n  | 'ArrowSwap'\n  | 'ArrowSync'\n  | 'ArrowSyncCheckmark'\n  | 'ArrowSyncCircle'\n  | 'ArrowSyncDismiss'\n  | 'ArrowSyncOff'\n  | 'ArrowTrending'\n  | 'ArrowTrendingCheckmark'\n  | 'ArrowTrendingDown'\n  | 'ArrowTrendingLines'\n  | 'ArrowTrendingSettings'\n  | 'ArrowTrendingSparkle'\n  | 'ArrowTrendingText'\n  | 'ArrowTrendingWrench'\n  | 'ArrowTurnBidirectionalDownRight'\n  | 'ArrowTurnDownLeft'\n  | 'ArrowTurnDownRight'\n  | 'ArrowTurnDownUp'\n  | 'ArrowTurnLeftDown'\n  | 'ArrowTurnLeftRight'\n  | 'ArrowTurnLeftUp'\n  | 'ArrowTurnRight'\n  | 'ArrowTurnRightDown'\n  | 'ArrowTurnRightLeft'\n  | 'ArrowTurnRightUp'\n  | 'ArrowTurnUpDown'\n  | 'ArrowTurnUpLeft'\n  | 'ArrowUndo'\n  | 'ArrowUp'\n  | 'ArrowUpLeft'\n  | 'ArrowUpRight'\n  | 'ArrowUpRightDashes'\n  | 'ArrowUpSquareSettings'\n  | 'ArrowUpload'\n  | 'ArrowWrap'\n  | 'ArrowWrapOff'\n  | 'ArrowsBidirectional'\n  | 'Attach'\n  | 'AttachArrowRight'\n  | 'AttachText'\n  | 'AutoFitHeight'\n  | 'AutoFitWidth'\n  | 'Autocorrect'\n  | 'Autosum'\n  | 'Backpack'\n  | 'BackpackAdd'\n  | 'Backspace'\n  | 'Badge'\n  | 'Balloon'\n  | 'BarcodeScanner'\n  | 'Battery0'\n  | 'Battery10'\n  | 'Battery1'\n  | 'Battery2'\n  | 'Battery3'\n  | 'Battery4'\n  | 'Battery5'\n  | 'Battery6'\n  | 'Battery7'\n  | 'Battery8'\n  | 'Battery9'\n  | 'BatteryCharge'\n  | 'BatteryCheckmark'\n  | 'BatterySaver'\n  | 'BatteryWarning'\n  | 'Beach'\n  | 'Beaker'\n  | 'BeakerAdd'\n  | 'BeakerDismiss'\n  | 'BeakerEdit'\n  | 'BeakerEmpty'\n  | 'BeakerOff'\n  | 'BeakerSettings'\n  | 'Bed'\n  | 'BezierCurveSquare'\n  | 'BinFull'\n  | 'BinRecycle'\n  | 'BinRecycleFull'\n  | 'BinderTriangle'\n  | 'Bluetooth'\n  | 'BluetoothConnected'\n  | 'BluetoothDisabled'\n  | 'BluetoothSearching'\n  | 'Blur'\n  | 'Board'\n  | 'BoardGames'\n  | 'BoardHeart'\n  | 'BoardSplit'\n  | 'Book'\n  | 'BookAdd'\n  | 'BookArrowClockwise'\n  | 'BookClock'\n  | 'BookCoins'\n  | 'BookCompass'\n  | 'BookContacts'\n  | 'BookDatabase'\n  | 'BookDefault'\n  | 'BookDismiss'\n  | 'BookExclamationMark'\n  | 'BookGlobe'\n  | 'BookInformation'\n  | 'BookLetter'\n  | 'BookNumber'\n  | 'BookOpen'\n  | 'BookOpenGlobe'\n  | 'BookOpenMicrophone'\n  | 'BookPulse'\n  | 'BookQuestionMark'\n  | 'BookQuestionMarkRtl'\n  | 'BookSearch'\n  | 'BookStar'\n  | 'BookTemplate'\n  | 'BookTheta'\n  | 'BookToolbox'\n  | 'Bookmark'\n  | 'BookmarkAdd'\n  | 'BookmarkMultiple'\n  | 'BookmarkOff'\n  | 'BookmarkSearch'\n  | 'BorderAll'\n  | 'BorderBottom'\n  | 'BorderBottomDouble'\n  | 'BorderBottomThick'\n  | 'BorderInside'\n  | 'BorderLeft'\n  | 'BorderLeftRight'\n  | 'BorderNone'\n  | 'BorderOutside'\n  | 'BorderOutsideThick'\n  | 'BorderRight'\n  | 'BorderTop'\n  | 'BorderTopBottom'\n  | 'BorderTopBottomDouble'\n  | 'BorderTopBottomThick'\n  | 'Bot'\n  | 'BotAdd'\n  | 'BotSparkle'\n  | 'BowTie'\n  | 'BowlChopsticks'\n  | 'BowlSalad'\n  | 'Box'\n  | 'BoxArrowLeft'\n  | 'BoxArrowUp'\n  | 'BoxCheckmark'\n  | 'BoxDismiss'\n  | 'BoxEdit'\n  | 'BoxMultiple'\n  | 'BoxMultipleArrowLeft'\n  | 'BoxMultipleArrowRight'\n  | 'BoxMultipleCheckmark'\n  | 'BoxMultipleSearch'\n  | 'BoxSearch'\n  | 'BoxToolbox'\n  | 'Braces'\n  | 'BracesCheckmark'\n  | 'BracesDismiss'\n  | 'BracesVariable'\n  | 'BrainCircuit'\n  | 'Branch'\n  | 'BranchCompare'\n  | 'BranchFork'\n  | 'BranchForkHint'\n  | 'BranchForkLink'\n  | 'BranchRequest'\n  | 'BreakoutRoom'\n  | 'Briefcase'\n  | 'BriefcaseMedical'\n  | 'BriefcaseOff'\n  | 'BriefcasePerson'\n  | 'BriefcaseSearch'\n  | 'BrightnessHigh'\n  | 'BrightnessLow'\n  | 'BroadActivityFeed'\n  | 'Broom'\n  | 'BubbleMultiple'\n  | 'Bug'\n  | 'BugArrowCounterclockwise'\n  | 'BugProhibited'\n  | 'Building'\n  | 'BuildingBank'\n  | 'BuildingBankLink'\n  | 'BuildingBankToolbox'\n  | 'BuildingCloud'\n  | 'BuildingDesktop'\n  | 'BuildingFactory'\n  | 'BuildingGovernment'\n  | 'BuildingGovernmentSearch'\n  | 'BuildingHome'\n  | 'BuildingLighthouse'\n  | 'BuildingMosque'\n  | 'BuildingMultiple'\n  | 'BuildingPeople'\n  | 'BuildingRetail'\n  | 'BuildingRetailMoney'\n  | 'BuildingRetailMore'\n  | 'BuildingRetailShield'\n  | 'BuildingRetailToolbox'\n  | 'BuildingShop'\n  | 'BuildingSkyscraper'\n  | 'BuildingSwap'\n  | 'BuildingTownhouse'\n  | 'Button'\n  | 'Calculator'\n  | 'CalculatorArrowClockwise'\n  | 'CalculatorMultiple'\n  | 'Calendar'\n  | 'Calendar3Day'\n  | 'CalendarAdd'\n  | 'CalendarAgenda'\n  | 'CalendarArrowCounterclockwise'\n  | 'CalendarArrowDown'\n  | 'CalendarArrowRight'\n  | 'CalendarAssistant'\n  | 'CalendarCancel'\n  | 'CalendarChat'\n  | 'CalendarCheckmark'\n  | 'CalendarClock'\n  | 'CalendarDataBar'\n  | 'CalendarDate'\n  | 'CalendarDay'\n  | 'CalendarEdit'\n  | 'CalendarEmpty'\n  | 'CalendarError'\n  | 'CalendarEye'\n  | 'CalendarInfo'\n  | 'CalendarLink'\n  | 'CalendarLock'\n  | 'CalendarLtr'\n  | 'CalendarMail'\n  | 'CalendarMention'\n  | 'CalendarMonth'\n  | 'CalendarMultiple'\n  | 'CalendarNote'\n  | 'CalendarPattern'\n  | 'CalendarPerson'\n  | 'CalendarPhone'\n  | 'CalendarPlay'\n  | 'CalendarQuestionMark'\n  | 'CalendarRecord'\n  | 'CalendarReply'\n  | 'CalendarRtl'\n  | 'CalendarSearch'\n  | 'CalendarSettings'\n  | 'CalendarShield'\n  | 'CalendarStar'\n  | 'CalendarSync'\n  | 'CalendarToday'\n  | 'CalendarToolbox'\n  | 'CalendarVideo'\n  | 'CalendarWeekNumbers'\n  | 'CalendarWeekStart'\n  | 'CalendarWorkWeek'\n  | 'Call'\n  | 'CallAdd'\n  | 'CallCheckmark'\n  | 'CallConnecting'\n  | 'CallDismiss'\n  | 'CallEnd'\n  | 'CallExclamation'\n  | 'CallForward'\n  | 'CallInbound'\n  | 'CallMissed'\n  | 'CallOutbound'\n  | 'CallPark'\n  | 'CallPause'\n  | 'CallProhibited'\n  | 'CallTransfer'\n  | 'CallWarning'\n  | 'CalligraphyPen'\n  | 'CalligraphyPenCheckmark'\n  | 'CalligraphyPenError'\n  | 'CalligraphyPenQuestionMark'\n  | 'Camera'\n  | 'CameraAdd'\n  | 'CameraDome'\n  | 'CameraEdit'\n  | 'CameraOff'\n  | 'CameraSparkles'\n  | 'CameraSwitch'\n  | 'CardUi'\n  | 'CaretDown'\n  | 'CaretDownRight'\n  | 'CaretLeft'\n  | 'CaretRight'\n  | 'CaretUp'\n  | 'Cart'\n  | 'Cast'\n  | 'CastMultiple'\n  | 'CatchUp'\n  | 'Cd'\n  | 'Cellular3G'\n  | 'Cellular4G'\n  | 'Cellular5G'\n  | 'CellularData1'\n  | 'CellularData2'\n  | 'CellularData3'\n  | 'CellularData4'\n  | 'CellularData5'\n  | 'CellularOff'\n  | 'CellularWarning'\n  | 'CenterHorizontal'\n  | 'CenterVertical'\n  | 'Certificate'\n  | 'Channel'\n  | 'ChannelAdd'\n  | 'ChannelAlert'\n  | 'ChannelArrowLeft'\n  | 'ChannelDismiss'\n  | 'ChannelShare'\n  | 'ChannelSubtract'\n  | 'ChartMultiple'\n  | 'ChartPerson'\n  | 'Chat'\n  | 'ChatAdd'\n  | 'ChatArrowBack'\n  | 'ChatArrowDoubleBack'\n  | 'ChatBubblesQuestion'\n  | 'ChatCursor'\n  | 'ChatDismiss'\n  | 'ChatEmpty'\n  | 'ChatHelp'\n  | 'ChatLock'\n  | 'ChatMail'\n  | 'ChatMultiple'\n  | 'ChatMultipleHeart'\n  | 'ChatOff'\n  | 'ChatSettings'\n  | 'ChatSparkle'\n  | 'ChatVideo'\n  | 'ChatWarning'\n  | 'Check'\n  | 'Checkbox1'\n  | 'Checkbox2'\n  | 'CheckboxArrowRight'\n  | 'CheckboxChecked'\n  | 'CheckboxCheckedSync'\n  | 'CheckboxIndeterminate'\n  | 'CheckboxPerson'\n  | 'CheckboxUnchecked'\n  | 'CheckboxWarning'\n  | 'Checkmark'\n  | 'CheckmarkCircle'\n  | 'CheckmarkCircleSquare'\n  | 'CheckmarkLock'\n  | 'CheckmarkNote'\n  | 'CheckmarkSquare'\n  | 'CheckmarkStarburst'\n  | 'CheckmarkUnderlineCircle'\n  | 'Chess'\n  | 'ChevronCircleDown'\n  | 'ChevronCircleLeft'\n  | 'ChevronCircleRight'\n  | 'ChevronCircleUp'\n  | 'ChevronDoubleDown'\n  | 'ChevronDoubleLeft'\n  | 'ChevronDoubleRight'\n  | 'ChevronDoubleUp'\n  | 'ChevronDown'\n  | 'ChevronDownUp'\n  | 'ChevronLeft'\n  | 'ChevronRight'\n  | 'ChevronUp'\n  | 'ChevronUpDown'\n  | 'Circle'\n  | 'CircleEdit'\n  | 'CircleEraser'\n  | 'CircleHalfFill'\n  | 'CircleHint'\n  | 'CircleHintHalfVertical'\n  | 'CircleImage'\n  | 'CircleLine'\n  | 'CircleMultipleSubtractCheckmark'\n  | 'CircleOff'\n  | 'CircleSmall'\n  | 'City'\n  | 'Class'\n  | 'Classification'\n  | 'ClearFormatting'\n  | 'Clipboard'\n  | 'Clipboard3Day'\n  | 'ClipboardArrowRight'\n  | 'ClipboardBrush'\n  | 'ClipboardBulletList'\n  | 'ClipboardBulletListLtr'\n  | 'ClipboardBulletListRtl'\n  | 'ClipboardCheckmark'\n  | 'ClipboardClock'\n  | 'ClipboardCode'\n  | 'ClipboardDataBar'\n  | 'ClipboardDay'\n  | 'ClipboardEdit'\n  | 'ClipboardError'\n  | 'ClipboardHeart'\n  | 'ClipboardImage'\n  | 'ClipboardLetter'\n  | 'ClipboardLink'\n  | 'ClipboardMathFormula'\n  | 'ClipboardMonth'\n  | 'ClipboardMore'\n  | 'ClipboardMultiple'\n  | 'ClipboardNote'\n  | 'ClipboardNumber123'\n  | 'ClipboardPaste'\n  | 'ClipboardPulse'\n  | 'ClipboardSearch'\n  | 'ClipboardSettings'\n  | 'ClipboardTask'\n  | 'ClipboardTaskAdd'\n  | 'ClipboardTaskList'\n  | 'ClipboardTaskListLtr'\n  | 'ClipboardTaskListRtl'\n  | 'ClipboardText'\n  | 'ClipboardTextEdit'\n  | 'ClipboardTextLtr'\n  | 'ClipboardTextRtl'\n  | 'Clock'\n  | 'ClockAlarm'\n  | 'ClockArrowDownload'\n  | 'ClockDismiss'\n  | 'ClockLock'\n  | 'ClockPause'\n  | 'ClockToolbox'\n  | 'ClosedCaption'\n  | 'ClosedCaptionOff'\n  | 'Cloud'\n  | 'CloudAdd'\n  | 'CloudArchive'\n  | 'CloudArrowDown'\n  | 'CloudArrowUp'\n  | 'CloudBeaker'\n  | 'CloudBidirectional'\n  | 'CloudCheckmark'\n  | 'CloudCube'\n  | 'CloudDatabase'\n  | 'CloudDesktop'\n  | 'CloudDismiss'\n  | 'CloudEdit'\n  | 'CloudError'\n  | 'CloudFlow'\n  | 'CloudLink'\n  | 'CloudOff'\n  | 'CloudSwap'\n  | 'CloudSync'\n  | 'CloudWords'\n  | 'Clover'\n  | 'Code'\n  | 'CodeBlock'\n  | 'CodeCircle'\n  | 'CodeCs'\n  | 'CodeCsRectangle'\n  | 'CodeFs'\n  | 'CodeFsRectangle'\n  | 'CodeJs'\n  | 'CodeJsRectangle'\n  | 'CodePy'\n  | 'CodePyRectangle'\n  | 'CodeRb'\n  | 'CodeRbRectangle'\n  | 'CodeText'\n  | 'CodeTextEdit'\n  | 'CodeTextOff'\n  | 'CodeTs'\n  | 'CodeTsRectangle'\n  | 'CodeVb'\n  | 'CodeVbRectangle'\n  | 'Collections'\n  | 'CollectionsAdd'\n  | 'Color'\n  | 'ColorBackground'\n  | 'ColorBackgroundAccent'\n  | 'ColorFill'\n  | 'ColorFillAccent'\n  | 'ColorLine'\n  | 'ColorLineAccent'\n  | 'Column'\n  | 'ColumnArrowRight'\n  | 'ColumnDoubleCompare'\n  | 'ColumnEdit'\n  | 'ColumnSingle'\n  | 'ColumnSingleCompare'\n  | 'ColumnTriple'\n  | 'ColumnTripleEdit'\n  | 'Comma'\n  | 'Comment'\n  | 'CommentAdd'\n  | 'CommentArrowLeft'\n  | 'CommentArrowRight'\n  | 'CommentCheckmark'\n  | 'CommentDismiss'\n  | 'CommentEdit'\n  | 'CommentError'\n  | 'CommentLightning'\n  | 'CommentLink'\n  | 'CommentMention'\n  | 'CommentMultiple'\n  | 'CommentMultipleCheckmark'\n  | 'CommentMultipleLink'\n  | 'CommentNote'\n  | 'CommentOff'\n  | 'Communication'\n  | 'CommunicationPerson'\n  | 'CommunicationShield'\n  | 'CompassNorthwest'\n  | 'Component2DoubleTapSwipeDown'\n  | 'Component2DoubleTapSwipeUp'\n  | 'Compose'\n  | 'Cone'\n  | 'ConferenceRoom'\n  | 'Connected'\n  | 'Connector'\n  | 'ContactCard'\n  | 'ContactCardGroup'\n  | 'ContactCardLink'\n  | 'ContactCardRibbon'\n  | 'ContentSettings'\n  | 'ContentView'\n  | 'ContentViewGallery'\n  | 'ContentViewGalleryLightning'\n  | 'ContractDownLeft'\n  | 'ContractUpRight'\n  | 'ControlButton'\n  | 'ConvertRange'\n  | 'Cookies'\n  | 'Copy'\n  | 'CopyAdd'\n  | 'CopyArrowRight'\n  | 'CopySelect'\n  | 'Couch'\n  | 'CreditCardClock'\n  | 'CreditCardPerson'\n  | 'CreditCardToolbox'\n  | 'Crop'\n  | 'CropInterim'\n  | 'CropInterimOff'\n  | 'CropSparkle'\n  | 'Crown'\n  | 'CrownSubtract'\n  | 'Cube'\n  | 'CubeAdd'\n  | 'CubeArrowCurveDown'\n  | 'CubeLink'\n  | 'CubeMultiple'\n  | 'CubeQuick'\n  | 'CubeRotate'\n  | 'CubeSync'\n  | 'CubeTree'\n  | 'CurrencyDollarEuro'\n  | 'CurrencyDollarRupee'\n  | 'Cursor'\n  | 'CursorClick'\n  | 'CursorHover'\n  | 'CursorHoverOff'\n  | 'CursorProhibited'\n  | 'Cut'\n  | 'DarkTheme'\n  | 'DataArea'\n  | 'DataBarHorizontal'\n  | 'DataBarHorizontalDescending'\n  | 'DataBarVertical'\n  | 'DataBarVerticalAdd'\n  | 'DataBarVerticalAscending'\n  | 'DataBarVerticalStar'\n  | 'DataFunnel'\n  | 'DataHistogram'\n  | 'DataLine'\n  | 'DataPie'\n  | 'DataScatter'\n  | 'DataSunburst'\n  | 'DataTreemap'\n  | 'DataTrending'\n  | 'DataUsage'\n  | 'DataUsageEdit'\n  | 'DataUsageSettings'\n  | 'DataUsageToolbox'\n  | 'DataWaterfall'\n  | 'DataWhisker'\n  | 'Database'\n  | 'DatabaseArrowDown'\n  | 'DatabaseArrowRight'\n  | 'DatabaseArrowUp'\n  | 'DatabaseLightning'\n  | 'DatabaseLink'\n  | 'DatabaseMultiple'\n  | 'DatabasePerson'\n  | 'DatabasePlugConnected'\n  | 'DatabaseSearch'\n  | 'DatabaseStack'\n  | 'DatabaseSwitch'\n  | 'DatabaseWarning'\n  | 'DatabaseWindow'\n  | 'DecimalArrowLeft'\n  | 'DecimalArrowRight'\n  | 'Delete'\n  | 'DeleteArrowBack'\n  | 'DeleteDismiss'\n  | 'DeleteLines'\n  | 'DeleteOff'\n  | 'Dentist'\n  | 'DesignIdeas'\n  | 'Desk'\n  | 'Desktop'\n  | 'DesktopArrowDown'\n  | 'DesktopArrowRight'\n  | 'DesktopCheckmark'\n  | 'DesktopCursor'\n  | 'DesktopEdit'\n  | 'DesktopFlow'\n  | 'DesktopKeyboard'\n  | 'DesktopMac'\n  | 'DesktopPulse'\n  | 'DesktopSignal'\n  | 'DesktopSpeaker'\n  | 'DesktopSpeakerOff'\n  | 'DesktopSync'\n  | 'DesktopToolbox'\n  | 'DesktopTower'\n  | 'DeveloperBoard'\n  | 'DeveloperBoardLightning'\n  | 'DeveloperBoardLightningToolbox'\n  | 'DeveloperBoardSearch'\n  | 'DeviceEq'\n  | 'DeviceMeetingRoom'\n  | 'DeviceMeetingRoomRemote'\n  | 'Diagram'\n  | 'Dialpad'\n  | 'DialpadOff'\n  | 'DialpadQuestionMark'\n  | 'Diamond'\n  | 'Directions'\n  | 'Dishwasher'\n  | 'Dismiss'\n  | 'DismissCircle'\n  | 'DismissSquare'\n  | 'DismissSquareMultiple'\n  | 'Diversity'\n  | 'DividerShort'\n  | 'DividerTall'\n  | 'Dock'\n  | 'DockRow'\n  | 'Doctor'\n  | 'Document100'\n  | 'Document'\n  | 'DocumentAdd'\n  | 'DocumentArrowDown'\n  | 'DocumentArrowLeft'\n  | 'DocumentArrowRight'\n  | 'DocumentArrowUp'\n  | 'DocumentBorder'\n  | 'DocumentBorderPrint'\n  | 'DocumentBriefcase'\n  | 'DocumentBulletList'\n  | 'DocumentBulletListArrowLeft'\n  | 'DocumentBulletListClock'\n  | 'DocumentBulletListCube'\n  | 'DocumentBulletListMultiple'\n  | 'DocumentBulletListOff'\n  | 'DocumentCatchUp'\n  | 'DocumentCheckmark'\n  | 'DocumentChevronDouble'\n  | 'DocumentContract'\n  | 'DocumentCopy'\n  | 'DocumentCs'\n  | 'DocumentCss'\n  | 'DocumentCube'\n  | 'DocumentData'\n  | 'DocumentDataLink'\n  | 'DocumentDataLock'\n  | 'DocumentDatabase'\n  | 'DocumentDismiss'\n  | 'DocumentEdit'\n  | 'DocumentEndnote'\n  | 'DocumentError'\n  | 'DocumentFit'\n  | 'DocumentFlowchart'\n  | 'DocumentFolder'\n  | 'DocumentFooter'\n  | 'DocumentFooterDismiss'\n  | 'DocumentFs'\n  | 'DocumentHeader'\n  | 'DocumentHeaderArrowDown'\n  | 'DocumentHeaderDismiss'\n  | 'DocumentHeaderFooter'\n  | 'DocumentHeart'\n  | 'DocumentHeartPulse'\n  | 'DocumentImage'\n  | 'DocumentJava'\n  | 'DocumentJavascript'\n  | 'DocumentJs'\n  | 'DocumentKey'\n  | 'DocumentLandscape'\n  | 'DocumentLandscapeData'\n  | 'DocumentLandscapeSplit'\n  | 'DocumentLandscapeSplitHint'\n  | 'DocumentLightning'\n  | 'DocumentLink'\n  | 'DocumentLock'\n  | 'DocumentMargins'\n  | 'DocumentMention'\n  | 'DocumentMultiple'\n  | 'DocumentMultiplePercent'\n  | 'DocumentMultipleProhibited'\n  | 'DocumentMultipleSync'\n  | 'DocumentNumber1'\n  | 'DocumentOnePage'\n  | 'DocumentOnePageAdd'\n  | 'DocumentOnePageBeaker'\n  | 'DocumentOnePageColumns'\n  | 'DocumentOnePageLink'\n  | 'DocumentOnePageMultiple'\n  | 'DocumentOnePageSparkle'\n  | 'DocumentPageBottomCenter'\n  | 'DocumentPageBottomLeft'\n  | 'DocumentPageBottomRight'\n  | 'DocumentPageBreak'\n  | 'DocumentPageNumber'\n  | 'DocumentPageTopCenter'\n  | 'DocumentPageTopLeft'\n  | 'DocumentPageTopRight'\n  | 'DocumentPdf'\n  | 'DocumentPercent'\n  | 'DocumentPerson'\n  | 'DocumentPill'\n  | 'DocumentPrint'\n  | 'DocumentProhibited'\n  | 'DocumentPy'\n  | 'DocumentQuestionMark'\n  | 'DocumentQueue'\n  | 'DocumentQueueAdd'\n  | 'DocumentQueueMultiple'\n  | 'DocumentRb'\n  | 'DocumentRibbon'\n  | 'DocumentSass'\n  | 'DocumentSave'\n  | 'DocumentSearch'\n  | 'DocumentSettings'\n  | 'DocumentSplitHint'\n  | 'DocumentSplitHintOff'\n  | 'DocumentSync'\n  | 'DocumentTable'\n  | 'DocumentTableArrowRight'\n  | 'DocumentTableCheckmark'\n  | 'DocumentTableCube'\n  | 'DocumentTableSearch'\n  | 'DocumentTableTruck'\n  | 'DocumentTarget'\n  | 'DocumentText'\n  | 'DocumentTextClock'\n  | 'DocumentTextExtract'\n  | 'DocumentTextLink'\n  | 'DocumentTextToolbox'\n  | 'DocumentToolbox'\n  | 'DocumentTs'\n  | 'DocumentVb'\n  | 'DocumentWidth'\n  | 'DocumentYml'\n  | 'Door'\n  | 'DoorArrowLeft'\n  | 'DoorArrowRight'\n  | 'DoorTag'\n  | 'DoubleSwipeDown'\n  | 'DoubleSwipeUp'\n  | 'DoubleTapSwipeDown'\n  | 'DoubleTapSwipeUp'\n  | 'Drafts'\n  | 'Drag'\n  | 'DrawImage'\n  | 'DrawShape'\n  | 'DrawText'\n  | 'Drawer'\n  | 'DrawerAdd'\n  | 'DrawerArrowDownload'\n  | 'DrawerDismiss'\n  | 'DrawerPlay'\n  | 'DrawerSubtract'\n  | 'DrinkBeer'\n  | 'DrinkBottle'\n  | 'DrinkBottleOff'\n  | 'DrinkCoffee'\n  | 'DrinkMargarita'\n  | 'DrinkToGo'\n  | 'DrinkWine'\n  | 'DriveTrain'\n  | 'Drop'\n  | 'DualScreen'\n  | 'DualScreenAdd'\n  | 'DualScreenArrowRight'\n  | 'DualScreenArrowUp'\n  | 'DualScreenClock'\n  | 'DualScreenClosedAlert'\n  | 'DualScreenDesktop'\n  | 'DualScreenDismiss'\n  | 'DualScreenGroup'\n  | 'DualScreenHeader'\n  | 'DualScreenLock'\n  | 'DualScreenMirror'\n  | 'DualScreenPagination'\n  | 'DualScreenSettings'\n  | 'DualScreenSpan'\n  | 'DualScreenSpeaker'\n  | 'DualScreenStatusBar'\n  | 'DualScreenTablet'\n  | 'DualScreenUpdate'\n  | 'DualScreenVerticalScroll'\n  | 'DualScreenVibrate'\n  | 'Dumbbell'\n  | 'Dust'\n  | 'Earth'\n  | 'EarthLeaf'\n  | 'Edit'\n  | 'EditArrowBack'\n  | 'EditOff'\n  | 'EditProhibited'\n  | 'EditSettings'\n  | 'Elevator'\n  | 'Emoji'\n  | 'EmojiAdd'\n  | 'EmojiAngry'\n  | 'EmojiEdit'\n  | 'EmojiHand'\n  | 'EmojiHint'\n  | 'EmojiLaugh'\n  | 'EmojiMeh'\n  | 'EmojiMultiple'\n  | 'EmojiSad'\n  | 'EmojiSadSlight'\n  | 'EmojiSmileSlight'\n  | 'EmojiSparkle'\n  | 'EmojiSurprise'\n  | 'Engine'\n  | 'EqualCircle'\n  | 'EqualOff'\n  | 'Eraser'\n  | 'EraserMedium'\n  | 'EraserSegment'\n  | 'EraserSmall'\n  | 'EraserTool'\n  | 'ErrorCircle'\n  | 'ErrorCircleSettings'\n  | 'ExpandUpLeft'\n  | 'ExpandUpRight'\n  | 'ExtendedDock'\n  | 'Eye'\n  | 'EyeLines'\n  | 'EyeOff'\n  | 'EyeTracking'\n  | 'EyeTrackingOff'\n  | 'Eyedropper'\n  | 'EyedropperOff'\n  | 'FStop'\n  | 'FastAcceleration'\n  | 'FastForward'\n  | 'Fax'\n  | 'Feed'\n  | 'Filmstrip'\n  | 'FilmstripImage'\n  | 'FilmstripOff'\n  | 'FilmstripPlay'\n  | 'FilmstripSplit'\n  | 'Filter'\n  | 'FilterAdd'\n  | 'FilterDismiss'\n  | 'FilterSync'\n  | 'Fingerprint'\n  | 'Fire'\n  | 'Fireplace'\n  | 'FixedWidth'\n  | 'Flag'\n  | 'FlagCheckered'\n  | 'FlagClock'\n  | 'FlagOff'\n  | 'FlagPride'\n  | 'FlagPrideIntersexInclusiveProgress'\n  | 'FlagPridePhiladelphia'\n  | 'FlagPrideProgress'\n  | 'Flash'\n  | 'FlashAdd'\n  | 'FlashAuto'\n  | 'FlashCheckmark'\n  | 'FlashFlow'\n  | 'FlashOff'\n  | 'FlashPlay'\n  | 'FlashSettings'\n  | 'FlashSparkle'\n  | 'Flashlight'\n  | 'FlashlightOff'\n  | 'FlipHorizontal'\n  | 'FlipVertical'\n  | 'Flow'\n  | 'Flowchart'\n  | 'FlowchartCircle'\n  | 'Fluent'\n  | 'Fluid'\n  | 'Folder'\n  | 'FolderAdd'\n  | 'FolderArrowLeft'\n  | 'FolderArrowRight'\n  | 'FolderArrowUp'\n  | 'FolderBriefcase'\n  | 'FolderGlobe'\n  | 'FolderLightning'\n  | 'FolderLink'\n  | 'FolderList'\n  | 'FolderMail'\n  | 'FolderMultiple'\n  | 'FolderOpen'\n  | 'FolderOpenVertical'\n  | 'FolderPeople'\n  | 'FolderPerson'\n  | 'FolderProhibited'\n  | 'FolderSearch'\n  | 'FolderSwap'\n  | 'FolderSync'\n  | 'FolderZip'\n  | 'FontDecrease'\n  | 'FontIncrease'\n  | 'FontSpaceTrackingIn'\n  | 'FontSpaceTrackingOut'\n  | 'Food'\n  | 'FoodApple'\n  | 'FoodCake'\n  | 'FoodCarrot'\n  | 'FoodChickenLeg'\n  | 'FoodEgg'\n  | 'FoodFish'\n  | 'FoodGrains'\n  | 'FoodPizza'\n  | 'FoodToast'\n  | 'Form'\n  | 'FormMultiple'\n  | 'FormNew'\n  | 'Fps120'\n  | 'Fps240'\n  | 'Fps30'\n  | 'Fps60'\n  | 'Fps960'\n  | 'Frame'\n  | 'FullScreenMaximize'\n  | 'FullScreenMinimize'\n  | 'Games'\n  | 'GanttChart'\n  | 'Gas'\n  | 'GasPump'\n  | 'Gather'\n  | 'Gauge'\n  | 'GaugeAdd'\n  | 'Gavel'\n  | 'GavelProhibited'\n  | 'Gesture'\n  | 'Gif'\n  | 'Gift'\n  | 'GiftCard'\n  | 'GiftCardAdd'\n  | 'GiftCardArrowRight'\n  | 'GiftCardMoney'\n  | 'GiftCardMultiple'\n  | 'GiftOpen'\n  | 'Glance'\n  | 'GlanceDefault'\n  | 'GlanceHorizontal'\n  | 'GlanceHorizontalSparkle'\n  | 'GlanceHorizontalSparkles'\n  | 'Glasses'\n  | 'GlassesOff'\n  | 'Globe'\n  | 'GlobeAdd'\n  | 'GlobeArrowForward'\n  | 'GlobeArrowUp'\n  | 'GlobeClock'\n  | 'GlobeDesktop'\n  | 'GlobeError'\n  | 'GlobeLocation'\n  | 'GlobePerson'\n  | 'GlobeProhibited'\n  | 'GlobeSearch'\n  | 'GlobeShield'\n  | 'GlobeStar'\n  | 'GlobeSurface'\n  | 'GlobeSync'\n  | 'GlobeVideo'\n  | 'GlobeWarning'\n  | 'Grid'\n  | 'GridCircles'\n  | 'GridDots'\n  | 'GridKanban'\n  | 'Group'\n  | 'GroupDismiss'\n  | 'GroupList'\n  | 'GroupReturn'\n  | 'Guardian'\n  | 'Guest'\n  | 'GuestAdd'\n  | 'Guitar'\n  | 'HandDraw'\n  | 'HandLeft'\n  | 'HandLeftChat'\n  | 'HandOpenHeart'\n  | 'HandRight'\n  | 'HandRightOff'\n  | 'HandWave'\n  | 'Handshake'\n  | 'HardDrive'\n  | 'HardDriveCall'\n  | 'HatGraduation'\n  | 'HatGraduationAdd'\n  | 'HatGraduationSparkle'\n  | 'Hd'\n  | 'Hdr'\n  | 'HdrOff'\n  | 'Headphones'\n  | 'HeadphonesSoundWave'\n  | 'Headset'\n  | 'HeadsetAdd'\n  | 'HeadsetVr'\n  | 'Heart'\n  | 'HeartBroken'\n  | 'HeartCircle'\n  | 'HeartCircleHint'\n  | 'HeartOff'\n  | 'HeartPulse'\n  | 'HeartPulseCheckmark'\n  | 'HeartPulseError'\n  | 'HeartPulseWarning'\n  | 'Hexagon'\n  | 'HexagonThree'\n  | 'Highlight'\n  | 'HighlightAccent'\n  | 'HighlightLink'\n  | 'History'\n  | 'HistoryDismiss'\n  | 'Home'\n  | 'HomeAdd'\n  | 'HomeCheckmark'\n  | 'HomeDatabase'\n  | 'HomeHeart'\n  | 'HomeMore'\n  | 'HomePerson'\n  | 'HomeSplit'\n  | 'Hourglass'\n  | 'HourglassHalf'\n  | 'HourglassOneQuarter'\n  | 'HourglassThreeQuarter'\n  | 'Icons'\n  | 'Image'\n  | 'ImageAdd'\n  | 'ImageAltText'\n  | 'ImageArrowBack'\n  | 'ImageArrowCounterclockwise'\n  | 'ImageArrowForward'\n  | 'ImageBorder'\n  | 'ImageCircle'\n  | 'ImageCopy'\n  | 'ImageEdit'\n  | 'ImageGlobe'\n  | 'ImageMultiple'\n  | 'ImageMultipleOff'\n  | 'ImageOff'\n  | 'ImageProhibited'\n  | 'ImageReflection'\n  | 'ImageSearch'\n  | 'ImageShadow'\n  | 'ImageSparkle'\n  | 'ImageStack'\n  | 'ImageTable'\n  | 'ImmersiveReader'\n  | 'Important'\n  | 'Incognito'\n  | 'Info'\n  | 'InfoShield'\n  | 'InkStroke'\n  | 'InkStrokeArrowDown'\n  | 'InkStrokeArrowUpDown'\n  | 'InkingTool'\n  | 'InkingToolAccent'\n  | 'InprivateAccount'\n  | 'Insert'\n  | 'IosArrow'\n  | 'IosArrowLtr'\n  | 'IosArrowRtl'\n  | 'IosChevronRight'\n  | 'Iot'\n  | 'IotAlert'\n  | 'Javascript'\n  | 'Joystick'\n  | 'Key'\n  | 'KeyCommand'\n  | 'KeyMultiple'\n  | 'KeyReset'\n  | 'Keyboard123'\n  | 'Keyboard'\n  | 'KeyboardDock'\n  | 'KeyboardLayoutFloat'\n  | 'KeyboardLayoutOneHandedLeft'\n  | 'KeyboardLayoutResize'\n  | 'KeyboardLayoutSplit'\n  | 'KeyboardMouse'\n  | 'KeyboardShift'\n  | 'KeyboardShiftUppercase'\n  | 'KeyboardTab'\n  | 'Kiosk'\n  | 'Laptop'\n  | 'LaptopDismiss'\n  | 'LaptopMultiple'\n  | 'LaptopSettings'\n  | 'LaptopShield'\n  | 'LaserTool'\n  | 'Lasso'\n  | 'LauncherSettings'\n  | 'Layer'\n  | 'LayerDiagonal'\n  | 'LayerDiagonalAdd'\n  | 'LayerDiagonalPerson'\n  | 'LayoutCellFour'\n  | 'LayoutCellFourFocusBottomLeft'\n  | 'LayoutCellFourFocusBottomRight'\n  | 'LayoutCellFourFocusTopLeft'\n  | 'LayoutCellFourFocusTopRight'\n  | 'LayoutColumnFour'\n  | 'LayoutColumnFourFocusCenterLeft'\n  | 'LayoutColumnFourFocusCenterRight'\n  | 'LayoutColumnFourFocusLeft'\n  | 'LayoutColumnFourFocusRight'\n  | 'LayoutColumnOneThirdLeft'\n  | 'LayoutColumnOneThirdRight'\n  | 'LayoutColumnOneThirdRightHint'\n  | 'LayoutColumnThree'\n  | 'LayoutColumnThreeFocusCenter'\n  | 'LayoutColumnThreeFocusLeft'\n  | 'LayoutColumnThreeFocusRight'\n  | 'LayoutColumnTwo'\n  | 'LayoutColumnTwoFocusLeft'\n  | 'LayoutColumnTwoFocusRight'\n  | 'LayoutColumnTwoSplitLeft'\n  | 'LayoutColumnTwoSplitLeftFocusBottomLeft'\n  | 'LayoutColumnTwoSplitLeftFocusRight'\n  | 'LayoutColumnTwoSplitLeftFocusTopLeft'\n  | 'LayoutColumnTwoSplitRight'\n  | 'LayoutColumnTwoSplitRightFocusBottomRight'\n  | 'LayoutColumnTwoSplitRightFocusLeft'\n  | 'LayoutColumnTwoSplitRightFocusTopRight'\n  | 'LayoutRowFour'\n  | 'LayoutRowFourFocusBottom'\n  | 'LayoutRowFourFocusCenterBottom'\n  | 'LayoutRowFourFocusCenterTop'\n  | 'LayoutRowFourFocusTop'\n  | 'LayoutRowThree'\n  | 'LayoutRowThreeFocusBottom'\n  | 'LayoutRowThreeFocusCenter'\n  | 'LayoutRowThreeFocusTop'\n  | 'LayoutRowTwo'\n  | 'LayoutRowTwoFocusBottom'\n  | 'LayoutRowTwoFocusTop'\n  | 'LayoutRowTwoSplitBottom'\n  | 'LayoutRowTwoSplitBottomFocusBottomLeft'\n  | 'LayoutRowTwoSplitBottomFocusBottomRight'\n  | 'LayoutRowTwoSplitBottomFocusTop'\n  | 'LayoutRowTwoSplitTop'\n  | 'LayoutRowTwoSplitTopFocusBottom'\n  | 'LayoutRowTwoSplitTopFocusTopLeft'\n  | 'LayoutRowTwoSplitTopFocusTopRight'\n  | 'LeafOne'\n  | 'LeafThree'\n  | 'LeafTwo'\n  | 'LearningApp'\n  | 'Library'\n  | 'Lightbulb'\n  | 'LightbulbCheckmark'\n  | 'LightbulbCircle'\n  | 'LightbulbFilament'\n  | 'LightbulbPerson'\n  | 'Likert'\n  | 'Line'\n  | 'LineDashes'\n  | 'LineHorizontal1'\n  | 'LineHorizontal1Dashes'\n  | 'LineHorizontal2DashesSolid'\n  | 'LineHorizontal3'\n  | 'LineHorizontal4'\n  | 'LineHorizontal4Search'\n  | 'LineHorizontal5'\n  | 'LineHorizontal5Error'\n  | 'LineStyle'\n  | 'LineThickness'\n  | 'Link'\n  | 'LinkAdd'\n  | 'LinkDismiss'\n  | 'LinkEdit'\n  | 'LinkMultiple'\n  | 'LinkPerson'\n  | 'LinkSettings'\n  | 'LinkSquare'\n  | 'LinkToolbox'\n  | 'List'\n  | 'ListBar'\n  | 'ListBarTree'\n  | 'ListBarTreeOffset'\n  | 'ListRtl'\n  | 'Live'\n  | 'LiveOff'\n  | 'LocalLanguage'\n  | 'Location'\n  | 'LocationAdd'\n  | 'LocationAddLeft'\n  | 'LocationAddRight'\n  | 'LocationAddUp'\n  | 'LocationArrow'\n  | 'LocationArrowLeft'\n  | 'LocationArrowRight'\n  | 'LocationArrowUp'\n  | 'LocationDismiss'\n  | 'LocationLive'\n  | 'LocationOff'\n  | 'LocationTargetSquare'\n  | 'LockClosed'\n  | 'LockClosedKey'\n  | 'LockMultiple'\n  | 'LockOpen'\n  | 'LockShield'\n  | 'Lottery'\n  | 'Luggage'\n  | 'Mail'\n  | 'MailAdd'\n  | 'MailAlert'\n  | 'MailAllRead'\n  | 'MailAllUnread'\n  | 'MailArrowDoubleBack'\n  | 'MailArrowDown'\n  | 'MailArrowForward'\n  | 'MailArrowUp'\n  | 'MailAttach'\n  | 'MailCheckmark'\n  | 'MailClock'\n  | 'MailCopy'\n  | 'MailDismiss'\n  | 'MailEdit'\n  | 'MailError'\n  | 'MailInbox'\n  | 'MailInboxAdd'\n  | 'MailInboxAll'\n  | 'MailInboxArrowDown'\n  | 'MailInboxArrowRight'\n  | 'MailInboxArrowUp'\n  | 'MailInboxCheckmark'\n  | 'MailInboxDismiss'\n  | 'MailLink'\n  | 'MailList'\n  | 'MailMultiple'\n  | 'MailOff'\n  | 'MailOpenPerson'\n  | 'MailPause'\n  | 'MailProhibited'\n  | 'MailRead'\n  | 'MailReadMultiple'\n  | 'MailRewind'\n  | 'MailSettings'\n  | 'MailShield'\n  | 'MailTemplate'\n  | 'MailUnread'\n  | 'MailWarning'\n  | 'Mailbox'\n  | 'Map'\n  | 'MapDrive'\n  | 'Markdown'\n  | 'MatchAppLayout'\n  | 'MathFormatLinear'\n  | 'MathFormatProfessional'\n  | 'MathFormula'\n  | 'MathSymbols'\n  | 'Maximize'\n  | 'MeetNow'\n  | 'Megaphone'\n  | 'MegaphoneCircle'\n  | 'MegaphoneLoud'\n  | 'MegaphoneOff'\n  | 'Memory'\n  | 'Mention'\n  | 'MentionArrowDown'\n  | 'MentionBrackets'\n  | 'Merge'\n  | 'Mic'\n  | 'MicOff'\n  | 'MicProhibited'\n  | 'MicPulse'\n  | 'MicPulseOff'\n  | 'MicRecord'\n  | 'MicSettings'\n  | 'MicSparkle'\n  | 'MicSync'\n  | 'Microscope'\n  | 'Midi'\n  | 'MobileOptimized'\n  | 'Mold'\n  | 'Molecule'\n  | 'Money'\n  | 'MoneyCalculator'\n  | 'MoneyDismiss'\n  | 'MoneyHand'\n  | 'MoneyOff'\n  | 'MoneySettings'\n  | 'MoreCircle'\n  | 'MoreHorizontal'\n  | 'MoreVertical'\n  | 'MountainLocationBottom'\n  | 'MountainLocationTop'\n  | 'MountainTrail'\n  | 'MoviesAndTv'\n  | 'Multiplier12X'\n  | 'Multiplier15X'\n  | 'Multiplier18X'\n  | 'Multiplier1X'\n  | 'Multiplier2X'\n  | 'Multiplier5X'\n  | 'MultiselectLtr'\n  | 'MultiselectRtl'\n  | 'MusicNote1'\n  | 'MusicNote2'\n  | 'MusicNote2Play'\n  | 'MusicNoteOff1'\n  | 'MusicNoteOff2'\n  | 'MyLocation'\n  | 'Navigation'\n  | 'NavigationLocationTarget'\n  | 'NavigationPlay'\n  | 'NavigationUnread'\n  | 'NetworkAdapter'\n  | 'NetworkCheck'\n  | 'New'\n  | 'News'\n  | 'Next'\n  | 'NextFrame'\n  | 'Note'\n  | 'NoteAdd'\n  | 'NoteEdit'\n  | 'NotePin'\n  | 'Notebook'\n  | 'NotebookAdd'\n  | 'NotebookArrowCurveDown'\n  | 'NotebookError'\n  | 'NotebookEye'\n  | 'NotebookLightning'\n  | 'NotebookQuestionMark'\n  | 'NotebookSection'\n  | 'NotebookSectionArrowRight'\n  | 'NotebookSubsection'\n  | 'NotebookSync'\n  | 'Notepad'\n  | 'NotepadEdit'\n  | 'NotepadPerson'\n  | 'NumberCircle0'\n  | 'NumberCircle1'\n  | 'NumberCircle2'\n  | 'NumberCircle3'\n  | 'NumberCircle4'\n  | 'NumberCircle5'\n  | 'NumberCircle6'\n  | 'NumberCircle7'\n  | 'NumberCircle8'\n  | 'NumberCircle9'\n  | 'NumberRow'\n  | 'NumberSymbol'\n  | 'NumberSymbolDismiss'\n  | 'NumberSymbolSquare'\n  | 'Open'\n  | 'OpenFolder'\n  | 'OpenOff'\n  | 'Options'\n  | 'Organization'\n  | 'OrganizationHorizontal'\n  | 'Orientation'\n  | 'Oval'\n  | 'Oven'\n  | 'PaddingDown'\n  | 'PaddingLeft'\n  | 'PaddingRight'\n  | 'PaddingTop'\n  | 'PageFit'\n  | 'PaintBrush'\n  | 'PaintBrushArrowDown'\n  | 'PaintBrushArrowUp'\n  | 'PaintBucket'\n  | 'Pair'\n  | 'PanelBottom'\n  | 'PanelBottomContract'\n  | 'PanelBottomExpand'\n  | 'PanelLeft'\n  | 'PanelLeftAdd'\n  | 'PanelLeftContract'\n  | 'PanelLeftExpand'\n  | 'PanelLeftFocusRight'\n  | 'PanelLeftHeader'\n  | 'PanelLeftHeaderAdd'\n  | 'PanelLeftHeaderKey'\n  | 'PanelLeftKey'\n  | 'PanelLeftText'\n  | 'PanelLeftTextAdd'\n  | 'PanelLeftTextDismiss'\n  | 'PanelRight'\n  | 'PanelRightAdd'\n  | 'PanelRightContract'\n  | 'PanelRightCursor'\n  | 'PanelRightExpand'\n  | 'PanelRightGallery'\n  | 'PanelSeparateWindow'\n  | 'PanelTopContract'\n  | 'PanelTopExpand'\n  | 'PanelTopGallery'\n  | 'Password'\n  | 'Patch'\n  | 'Patient'\n  | 'Pause'\n  | 'PauseCircle'\n  | 'PauseOff'\n  | 'PauseSettings'\n  | 'Payment'\n  | 'Pen'\n  | 'PenDismiss'\n  | 'PenOff'\n  | 'PenProhibited'\n  | 'PenSparkle'\n  | 'Pentagon'\n  | 'People'\n  | 'PeopleAdd'\n  | 'PeopleAudience'\n  | 'PeopleCall'\n  | 'PeopleChat'\n  | 'PeopleCheckmark'\n  | 'PeopleCommunity'\n  | 'PeopleCommunityAdd'\n  | 'PeopleEdit'\n  | 'PeopleError'\n  | 'PeopleList'\n  | 'PeopleLock'\n  | 'PeopleMoney'\n  | 'PeopleProhibited'\n  | 'PeopleQueue'\n  | 'PeopleSearch'\n  | 'PeopleSettings'\n  | 'PeopleStar'\n  | 'PeopleSwap'\n  | 'PeopleSync'\n  | 'PeopleTeam'\n  | 'PeopleTeamAdd'\n  | 'PeopleTeamDelete'\n  | 'PeopleTeamToolbox'\n  | 'PeopleToolbox'\n  | 'Person'\n  | 'Person5'\n  | 'Person6'\n  | 'PersonAccounts'\n  | 'PersonAdd'\n  | 'PersonAlert'\n  | 'PersonArrowBack'\n  | 'PersonArrowLeft'\n  | 'PersonArrowRight'\n  | 'PersonAvailable'\n  | 'PersonBoard'\n  | 'PersonCall'\n  | 'PersonChat'\n  | 'PersonCircle'\n  | 'PersonClock'\n  | 'PersonDelete'\n  | 'PersonDesktop'\n  | 'PersonEdit'\n  | 'PersonFeedback'\n  | 'PersonHeart'\n  | 'PersonInfo'\n  | 'PersonKey'\n  | 'PersonLightbulb'\n  | 'PersonLightning'\n  | 'PersonLink'\n  | 'PersonLock'\n  | 'PersonMail'\n  | 'PersonMoney'\n  | 'PersonNote'\n  | 'PersonPhone'\n  | 'PersonPill'\n  | 'PersonProhibited'\n  | 'PersonQuestionMark'\n  | 'PersonRibbon'\n  | 'PersonRunning'\n  | 'PersonSearch'\n  | 'PersonSettings'\n  | 'PersonSquare'\n  | 'PersonSquareCheckmark'\n  | 'PersonStanding'\n  | 'PersonStar'\n  | 'PersonStarburst'\n  | 'PersonSubtract'\n  | 'PersonSupport'\n  | 'PersonSwap'\n  | 'PersonSync'\n  | 'PersonTag'\n  | 'PersonVoice'\n  | 'PersonWalking'\n  | 'PersonWarning'\n  | 'PersonWrench'\n  | 'Phone'\n  | 'PhoneAdd'\n  | 'PhoneArrowRight'\n  | 'PhoneBriefcase'\n  | 'PhoneChat'\n  | 'PhoneCheckmark'\n  | 'PhoneDesktop'\n  | 'PhoneDesktopAdd'\n  | 'PhoneDismiss'\n  | 'PhoneEdit'\n  | 'PhoneEraser'\n  | 'PhoneFooterArrowDown'\n  | 'PhoneHeaderArrowUp'\n  | 'PhoneKey'\n  | 'PhoneLaptop'\n  | 'PhoneLinkSetup'\n  | 'PhoneLock'\n  | 'PhoneMultiple'\n  | 'PhoneMultipleSettings'\n  | 'PhonePageHeader'\n  | 'PhonePagination'\n  | 'PhonePerson'\n  | 'PhoneScreenTime'\n  | 'PhoneShake'\n  | 'PhoneSpanIn'\n  | 'PhoneSpanOut'\n  | 'PhoneSpeaker'\n  | 'PhoneStatusBar'\n  | 'PhoneSubtract'\n  | 'PhoneTablet'\n  | 'PhoneUpdate'\n  | 'PhoneUpdateCheckmark'\n  | 'PhoneVerticalScroll'\n  | 'PhoneVibrate'\n  | 'PhotoFilter'\n  | 'Pi'\n  | 'PictureInPicture'\n  | 'PictureInPictureEnter'\n  | 'PictureInPictureExit'\n  | 'Pill'\n  | 'Pin'\n  | 'PinOff'\n  | 'Pipeline'\n  | 'PipelineAdd'\n  | 'PipelineArrowCurveDown'\n  | 'PipelinePlay'\n  | 'Pivot'\n  | 'PlantGrass'\n  | 'PlantRagweed'\n  | 'Play'\n  | 'PlayCircle'\n  | 'PlayCircleHint'\n  | 'PlayMultiple'\n  | 'PlaySettings'\n  | 'PlayingCards'\n  | 'PlugConnected'\n  | 'PlugConnectedAdd'\n  | 'PlugConnectedCheckmark'\n  | 'PlugConnectedSettings'\n  | 'PlugDisconnected'\n  | 'PointScan'\n  | 'Poll'\n  | 'PollHorizontal'\n  | 'PollOff'\n  | 'PortHdmi'\n  | 'PortMicroUsb'\n  | 'PortUsbA'\n  | 'PortUsbC'\n  | 'PositionBackward'\n  | 'PositionForward'\n  | 'PositionToBack'\n  | 'PositionToFront'\n  | 'Power'\n  | 'Predictions'\n  | 'Premium'\n  | 'PremiumPerson'\n  | 'PresenceAvailable'\n  | 'PresenceAway'\n  | 'PresenceBlocked'\n  | 'PresenceBusy'\n  | 'PresenceDnd'\n  | 'PresenceOffline'\n  | 'PresenceOof'\n  | 'PresenceUnknown'\n  | 'Presenter'\n  | 'PresenterOff'\n  | 'PreviewLink'\n  | 'Previous'\n  | 'PreviousFrame'\n  | 'Print'\n  | 'PrintAdd'\n  | 'Production'\n  | 'ProductionCheckmark'\n  | 'Prohibited'\n  | 'ProhibitedMultiple'\n  | 'ProhibitedNote'\n  | 'ProjectionScreen'\n  | 'ProjectionScreenDismiss'\n  | 'ProjectionScreenText'\n  | 'ProtocolHandler'\n  | 'Pulse'\n  | 'PulseSquare'\n  | 'PuzzleCube'\n  | 'PuzzleCubePiece'\n  | 'PuzzlePiece'\n  | 'PuzzlePieceShield'\n  | 'QrCode'\n  | 'Question'\n  | 'QuestionCircle'\n  | 'QuizNew'\n  | 'Radar'\n  | 'RadarCheckmark'\n  | 'RadarRectangleMultiple'\n  | 'RadioButton'\n  | 'RadioButtonOff'\n  | 'Ram'\n  | 'RatingMature'\n  | 'RatioOneToOne'\n  | 'ReOrder'\n  | 'ReOrderDotsHorizontal'\n  | 'ReOrderDotsVertical'\n  | 'ReadAloud'\n  | 'ReadingList'\n  | 'ReadingListAdd'\n  | 'ReadingModeMobile'\n  | 'RealEstate'\n  | 'Receipt'\n  | 'ReceiptAdd'\n  | 'ReceiptBag'\n  | 'ReceiptCube'\n  | 'ReceiptMoney'\n  | 'ReceiptPlay'\n  | 'ReceiptSearch'\n  | 'ReceiptSparkles'\n  | 'Record'\n  | 'RecordStop'\n  | 'RectangleLandscape'\n  | 'RectangleLandscapeHintCopy'\n  | 'RectangleLandscapeSparkle'\n  | 'RectangleLandscapeSync'\n  | 'RectangleLandscapeSyncOff'\n  | 'RectanglePortraitLocationTarget'\n  | 'Recycle'\n  | 'RemixAdd'\n  | 'Remote'\n  | 'Rename'\n  | 'Reorder'\n  | 'Replay'\n  | 'Resize'\n  | 'ResizeImage'\n  | 'ResizeLarge'\n  | 'ResizeSmall'\n  | 'ResizeTable'\n  | 'ResizeVideo'\n  | 'Reward'\n  | 'Rewind'\n  | 'Rhombus'\n  | 'Ribbon'\n  | 'RibbonAdd'\n  | 'RibbonOff'\n  | 'RibbonStar'\n  | 'RoadCone'\n  | 'Rocket'\n  | 'RotateLeft'\n  | 'RotateRight'\n  | 'Router'\n  | 'RowTriple'\n  | 'Rss'\n  | 'Ruler'\n  | 'Run'\n  | 'Sanitize'\n  | 'Save'\n  | 'SaveArrowRight'\n  | 'SaveCopy'\n  | 'SaveEdit'\n  | 'SaveImage'\n  | 'SaveMultiple'\n  | 'SaveSearch'\n  | 'SaveSync'\n  | 'Savings'\n  | 'ScaleFill'\n  | 'ScaleFit'\n  | 'Scales'\n  | 'Scan'\n  | 'ScanCamera'\n  | 'ScanDash'\n  | 'ScanObject'\n  | 'ScanPerson'\n  | 'ScanQrCode'\n  | 'ScanTable'\n  | 'ScanText'\n  | 'ScanThumbUp'\n  | 'ScanThumbUpOff'\n  | 'ScanType'\n  | 'ScanTypeCheckmark'\n  | 'ScanTypeOff'\n  | 'Scratchpad'\n  | 'ScreenCut'\n  | 'ScreenPerson'\n  | 'ScreenSearch'\n  | 'Screenshot'\n  | 'ScreenshotRecord'\n  | 'Script'\n  | 'Search'\n  | 'SearchInfo'\n  | 'SearchSettings'\n  | 'SearchShield'\n  | 'SearchSquare'\n  | 'SearchVisual'\n  | 'Seat'\n  | 'SeatAdd'\n  | 'SelectAllOff'\n  | 'SelectAllOn'\n  | 'SelectObject'\n  | 'SelectObjectSkew'\n  | 'SelectObjectSkewDismiss'\n  | 'SelectObjectSkewEdit'\n  | 'Send'\n  | 'SendBeaker'\n  | 'SendClock'\n  | 'SendCopy'\n  | 'SerialPort'\n  | 'Server'\n  | 'ServerLink'\n  | 'ServerMultiple'\n  | 'ServerPlay'\n  | 'ServerSurface'\n  | 'ServerSurfaceMultiple'\n  | 'ServiceBell'\n  | 'Settings'\n  | 'SettingsChat'\n  | 'SettingsCogMultiple'\n  | 'ShapeExclude'\n  | 'ShapeIntersect'\n  | 'ShapeOrganic'\n  | 'ShapeSubtract'\n  | 'ShapeUnion'\n  | 'Shapes'\n  | 'Share'\n  | 'ShareAndroid'\n  | 'ShareCloseTray'\n  | 'ShareIos'\n  | 'ShareScreenPerson'\n  | 'ShareScreenPersonOverlay'\n  | 'ShareScreenPersonOverlayInside'\n  | 'ShareScreenPersonP'\n  | 'ShareScreenStart'\n  | 'ShareScreenStop'\n  | 'Shield'\n  | 'ShieldAdd'\n  | 'ShieldBadge'\n  | 'ShieldCheckmark'\n  | 'ShieldDismiss'\n  | 'ShieldDismissShield'\n  | 'ShieldError'\n  | 'ShieldGlobe'\n  | 'ShieldKeyhole'\n  | 'ShieldLock'\n  | 'ShieldPerson'\n  | 'ShieldPersonAdd'\n  | 'ShieldProhibited'\n  | 'ShieldQuestion'\n  | 'ShieldTask'\n  | 'Shifts'\n  | 'Shifts30Minutes'\n  | 'ShiftsActivity'\n  | 'ShiftsAdd'\n  | 'ShiftsAvailability'\n  | 'ShiftsCheckmark'\n  | 'ShiftsDay'\n  | 'ShiftsOpen'\n  | 'ShiftsProhibited'\n  | 'ShiftsQuestionMark'\n  | 'ShiftsTeam'\n  | 'ShoppingBag'\n  | 'ShoppingBagAdd'\n  | 'ShoppingBagArrowLeft'\n  | 'ShoppingBagDismiss'\n  | 'ShoppingBagPause'\n  | 'ShoppingBagPercent'\n  | 'ShoppingBagPlay'\n  | 'ShoppingBagTag'\n  | 'Shortpick'\n  | 'Showerhead'\n  | 'SidebarSearchLtr'\n  | 'SidebarSearchRtl'\n  | 'SignOut'\n  | 'Signature'\n  | 'Sim'\n  | 'SkipBack10'\n  | 'SkipForward10'\n  | 'SkipForward30'\n  | 'SkipForwardTab'\n  | 'SlashForward'\n  | 'Sleep'\n  | 'SlideAdd'\n  | 'SlideArrowRight'\n  | 'SlideContent'\n  | 'SlideEraser'\n  | 'SlideGrid'\n  | 'SlideHide'\n  | 'SlideLayout'\n  | 'SlideLink'\n  | 'SlideMicrophone'\n  | 'SlideMultiple'\n  | 'SlideMultipleArrowRight'\n  | 'SlideMultipleSearch'\n  | 'SlideRecord'\n  | 'SlideSearch'\n  | 'SlideSettings'\n  | 'SlideSize'\n  | 'SlideText'\n  | 'SlideTextEdit'\n  | 'SlideTextMultiple'\n  | 'SlideTextPerson'\n  | 'SlideTextSparkle'\n  | 'SlideTransition'\n  | 'Smartwatch'\n  | 'SmartwatchDot'\n  | 'Snooze'\n  | 'SoundSource'\n  | 'SoundWaveCircle'\n  | 'Space3D'\n  | 'Spacebar'\n  | 'Sparkle'\n  | 'SparkleCircle'\n  | 'Speaker0'\n  | 'Speaker1'\n  | 'Speaker2'\n  | 'SpeakerBluetooth'\n  | 'SpeakerBox'\n  | 'SpeakerEdit'\n  | 'SpeakerMute'\n  | 'SpeakerOff'\n  | 'SpeakerSettings'\n  | 'SpeakerUsb'\n  | 'SpinnerIos'\n  | 'SplitHint'\n  | 'SplitHorizontal'\n  | 'SplitVertical'\n  | 'Sport'\n  | 'SportAmericanFootball'\n  | 'SportBaseball'\n  | 'SportBasketball'\n  | 'SportHockey'\n  | 'SportSoccer'\n  | 'SprayCan'\n  | 'Square'\n  | 'SquareAdd'\n  | 'SquareArrowForward'\n  | 'SquareDismiss'\n  | 'SquareEraser'\n  | 'SquareHint'\n  | 'SquareHintApps'\n  | 'SquareHintArrowBack'\n  | 'SquareHintHexagon'\n  | 'SquareHintSparkles'\n  | 'SquareMultiple'\n  | 'SquareShadow'\n  | 'SquaresNested'\n  | 'Stack'\n  | 'StackAdd'\n  | 'StackArrowForward'\n  | 'StackStar'\n  | 'StackVertical'\n  | 'Star'\n  | 'StarAdd'\n  | 'StarArrowBack'\n  | 'StarArrowRightEnd'\n  | 'StarArrowRightStart'\n  | 'StarCheckmark'\n  | 'StarDismiss'\n  | 'StarEdit'\n  | 'StarEmphasis'\n  | 'StarHalf'\n  | 'StarLineHorizontal3'\n  | 'StarOff'\n  | 'StarOneQuarter'\n  | 'StarProhibited'\n  | 'StarSettings'\n  | 'StarThreeQuarter'\n  | 'Status'\n  | 'Step'\n  | 'Steps'\n  | 'Stethoscope'\n  | 'Sticker'\n  | 'StickerAdd'\n  | 'Stop'\n  | 'Storage'\n  | 'StoreMicrosoft'\n  | 'Stream'\n  | 'StreamInput'\n  | 'StreamInputOutput'\n  | 'StreamOutput'\n  | 'StreetSign'\n  | 'StyleGuide'\n  | 'SubGrid'\n  | 'Subtitles'\n  | 'Subtract'\n  | 'SubtractCircle'\n  | 'SubtractCircleArrowBack'\n  | 'SubtractCircleArrowForward'\n  | 'SubtractParentheses'\n  | 'SubtractSquare'\n  | 'SubtractSquareMultiple'\n  | 'SurfaceEarbuds'\n  | 'SurfaceHub'\n  | 'SwimmingPool'\n  | 'SwipeDown'\n  | 'SwipeRight'\n  | 'SwipeUp'\n  | 'Symbols'\n  | 'SyncOff'\n  | 'Syringe'\n  | 'System'\n  | 'Tab'\n  | 'TabAdd'\n  | 'TabArrowLeft'\n  | 'TabDesktop'\n  | 'TabDesktopArrowClockwise'\n  | 'TabDesktopArrowLeft'\n  | 'TabDesktopBottom'\n  | 'TabDesktopClock'\n  | 'TabDesktopCopy'\n  | 'TabDesktopImage'\n  | 'TabDesktopLink'\n  | 'TabDesktopMultiple'\n  | 'TabDesktopMultipleAdd'\n  | 'TabDesktopMultipleBottom'\n  | 'TabDesktopNewPage'\n  | 'TabInPrivate'\n  | 'TabInprivateAccount'\n  | 'TabProhibited'\n  | 'TabShieldDismiss'\n  | 'Table'\n  | 'TableAdd'\n  | 'TableArrowUp'\n  | 'TableBottomRow'\n  | 'TableCalculator'\n  | 'TableCellEdit'\n  | 'TableCellsMerge'\n  | 'TableCellsSplit'\n  | 'TableChecker'\n  | 'TableColumnTopBottom'\n  | 'TableCopy'\n  | 'TableDefault'\n  | 'TableDeleteColumn'\n  | 'TableDeleteRow'\n  | 'TableDismiss'\n  | 'TableEdit'\n  | 'TableFreezeColumn'\n  | 'TableFreezeColumnAndRow'\n  | 'TableFreezeRow'\n  | 'TableImage'\n  | 'TableInsertColumn'\n  | 'TableInsertRow'\n  | 'TableLightning'\n  | 'TableLink'\n  | 'TableLock'\n  | 'TableMoveAbove'\n  | 'TableMoveBelow'\n  | 'TableMoveLeft'\n  | 'TableMoveRight'\n  | 'TableMultiple'\n  | 'TableOffset'\n  | 'TableOffsetAdd'\n  | 'TableOffsetLessThanOrEqualTo'\n  | 'TableOffsetSettings'\n  | 'TableResizeColumn'\n  | 'TableResizeRow'\n  | 'TableSearch'\n  | 'TableSettings'\n  | 'TableSimple'\n  | 'TableSimpleCheckmark'\n  | 'TableSimpleExclude'\n  | 'TableSimpleInclude'\n  | 'TableSimpleMultiple'\n  | 'TableSplit'\n  | 'TableStackAbove'\n  | 'TableStackBelow'\n  | 'TableStackLeft'\n  | 'TableStackRight'\n  | 'TableSwitch'\n  | 'Tablet'\n  | 'TabletLaptop'\n  | 'TabletSpeaker'\n  | 'Tabs'\n  | 'Tag'\n  | 'TagCircle'\n  | 'TagDismiss'\n  | 'TagError'\n  | 'TagLock'\n  | 'TagLockAccent'\n  | 'TagMultiple'\n  | 'TagOff'\n  | 'TagQuestionMark'\n  | 'TagReset'\n  | 'TagSearch'\n  | 'TapDouble'\n  | 'TapSingle'\n  | 'Target'\n  | 'TargetAdd'\n  | 'TargetArrow'\n  | 'TargetDismiss'\n  | 'TargetEdit'\n  | 'TaskListAdd'\n  | 'TaskListLtr'\n  | 'TaskListRtl'\n  | 'TaskListSquareAdd'\n  | 'TaskListSquareDatabase'\n  | 'TaskListSquareLtr'\n  | 'TaskListSquarePerson'\n  | 'TaskListSquareRtl'\n  | 'TaskListSquareSettings'\n  | 'TasksApp'\n  | 'TeardropBottomRight'\n  | 'Teddy'\n  | 'Temperature'\n  | 'Tent'\n  | 'TetrisApp'\n  | 'Text'\n  | 'TextAbcUnderlineDouble'\n  | 'TextAdd'\n  | 'TextAddSpaceAfter'\n  | 'TextAddSpaceBefore'\n  | 'TextAddT'\n  | 'TextAlignCenter'\n  | 'TextAlignCenterRotate270'\n  | 'TextAlignCenterRotate90'\n  | 'TextAlignDistributed'\n  | 'TextAlignDistributedEvenly'\n  | 'TextAlignDistributedVertical'\n  | 'TextAlignJustify'\n  | 'TextAlignJustifyLow'\n  | 'TextAlignJustifyLow90'\n  | 'TextAlignJustifyLowRotate270'\n  | 'TextAlignJustifyLowRotate90'\n  | 'TextAlignJustifyRotate270'\n  | 'TextAlignJustifyRotate90'\n  | 'TextAlignLeft'\n  | 'TextAlignLeftRotate270'\n  | 'TextAlignLeftRotate90'\n  | 'TextAlignRight'\n  | 'TextAlignRightRotate270'\n  | 'TextAlignRightRotate90'\n  | 'TextArrowDownRightColumn'\n  | 'TextAsterisk'\n  | 'TextBaseline'\n  | 'TextBold'\n  | 'TextBoxSettings'\n  | 'TextBulletList'\n  | 'TextBulletList270'\n  | 'TextBulletList90'\n  | 'TextBulletListAdd'\n  | 'TextBulletListCheckmark'\n  | 'TextBulletListDismiss'\n  | 'TextBulletListLtr'\n  | 'TextBulletListLtr90'\n  | 'TextBulletListLtrRotate270'\n  | 'TextBulletListRtl'\n  | 'TextBulletListRtl90'\n  | 'TextBulletListSquare'\n  | 'TextBulletListSquareClock'\n  | 'TextBulletListSquareEdit'\n  | 'TextBulletListSquarePerson'\n  | 'TextBulletListSquareSearch'\n  | 'TextBulletListSquareSettings'\n  | 'TextBulletListSquareShield'\n  | 'TextBulletListSquareSparkle'\n  | 'TextBulletListSquareToolbox'\n  | 'TextBulletListSquareWarning'\n  | 'TextBulletListTree'\n  | 'TextCaseLowercase'\n  | 'TextCaseTitle'\n  | 'TextCaseUppercase'\n  | 'TextChangeCase'\n  | 'TextClearFormatting'\n  | 'TextCollapse'\n  | 'TextColor'\n  | 'TextColorAccent'\n  | 'TextColumnOne'\n  | 'TextColumnOneNarrow'\n  | 'TextColumnOneSemiNarrow'\n  | 'TextColumnOneWide'\n  | 'TextColumnOneWideLightning'\n  | 'TextColumnThree'\n  | 'TextColumnTwo'\n  | 'TextColumnTwoLeft'\n  | 'TextColumnTwoRight'\n  | 'TextColumnWide'\n  | 'TextContinuous'\n  | 'TextDensity'\n  | 'TextDescription'\n  | 'TextDescriptionLtr'\n  | 'TextDescriptionRtl'\n  | 'TextDirectionHorizontalLeft'\n  | 'TextDirectionHorizontalLtr'\n  | 'TextDirectionHorizontalRight'\n  | 'TextDirectionHorizontalRtl'\n  | 'TextDirectionRotate270Right'\n  | 'TextDirectionRotate315Right'\n  | 'TextDirectionRotate45Right'\n  | 'TextDirectionRotate90Left'\n  | 'TextDirectionRotate90Ltr'\n  | 'TextDirectionRotate90Right'\n  | 'TextDirectionRotate90Rtl'\n  | 'TextDirectionVertical'\n  | 'TextEditStyle'\n  | 'TextEditStyleCharacterA'\n  | 'TextEditStyleCharacterGa'\n  | 'TextEffects'\n  | 'TextEffectsSparkle'\n  | 'TextExpand'\n  | 'TextField'\n  | 'TextFirstLine'\n  | 'TextFont'\n  | 'TextFontInfo'\n  | 'TextFontSize'\n  | 'TextFootnote'\n  | 'TextGrammarArrowLeft'\n  | 'TextGrammarArrowRight'\n  | 'TextGrammarCheckmark'\n  | 'TextGrammarDismiss'\n  | 'TextGrammarError'\n  | 'TextGrammarLightning'\n  | 'TextGrammarSettings'\n  | 'TextGrammarWand'\n  | 'TextHanging'\n  | 'TextHeader1'\n  | 'TextHeader1Lines'\n  | 'TextHeader1LinesCaret'\n  | 'TextHeader2'\n  | 'TextHeader2Lines'\n  | 'TextHeader2LinesCaret'\n  | 'TextHeader3'\n  | 'TextHeader3Lines'\n  | 'TextHeader3LinesCaret'\n  | 'TextIndentDecrease'\n  | 'TextIndentDecreaseLtr'\n  | 'TextIndentDecreaseLtr90'\n  | 'TextIndentDecreaseLtrRotate270'\n  | 'TextIndentDecreaseRotate270'\n  | 'TextIndentDecreaseRotate90'\n  | 'TextIndentDecreaseRtl'\n  | 'TextIndentDecreaseRtl90'\n  | 'TextIndentDecreaseRtlRotate270'\n  | 'TextIndentIncrease'\n  | 'TextIndentIncreaseLtr'\n  | 'TextIndentIncreaseLtr90'\n  | 'TextIndentIncreaseLtrRotate270'\n  | 'TextIndentIncreaseRotate270'\n  | 'TextIndentIncreaseRotate90'\n  | 'TextIndentIncreaseRtl'\n  | 'TextIndentIncreaseRtl90'\n  | 'TextIndentIncreaseRtlRotate270'\n  | 'TextItalic'\n  | 'TextLineSpacing'\n  | 'TextMore'\n  | 'TextNumberFormat'\n  | 'TextNumberListLtr'\n  | 'TextNumberListLtr90'\n  | 'TextNumberListLtrRotate270'\n  | 'TextNumberListRotate270'\n  | 'TextNumberListRotate90'\n  | 'TextNumberListRtl'\n  | 'TextNumberListRtl90'\n  | 'TextNumberListRtlRotate270'\n  | 'TextParagraph'\n  | 'TextParagraphDirection'\n  | 'TextParagraphDirectionLeft'\n  | 'TextParagraphDirectionRight'\n  | 'TextPeriodAsterisk'\n  | 'TextPositionBehind'\n  | 'TextPositionFront'\n  | 'TextPositionLine'\n  | 'TextPositionSquare'\n  | 'TextPositionSquareLeft'\n  | 'TextPositionSquareRight'\n  | 'TextPositionThrough'\n  | 'TextPositionTight'\n  | 'TextPositionTopBottom'\n  | 'TextProofingTools'\n  | 'TextQuote'\n  | 'TextSortAscending'\n  | 'TextSortDescending'\n  | 'TextStrikethrough'\n  | 'TextSubscript'\n  | 'TextSuperscript'\n  | 'TextT'\n  | 'TextTTag'\n  | 'TextUnderline'\n  | 'TextUnderlineCharacterU'\n  | 'TextUnderlineDouble'\n  | 'TextWholeWord'\n  | 'TextWordCount'\n  | 'TextWrap'\n  | 'TextWrapOff'\n  | 'Textbox'\n  | 'TextboxAlignBottom'\n  | 'TextboxAlignBottomCenter'\n  | 'TextboxAlignBottomLeft'\n  | 'TextboxAlignBottomRight'\n  | 'TextboxAlignBottomRotate90'\n  | 'TextboxAlignCenter'\n  | 'TextboxAlignMiddle'\n  | 'TextboxAlignMiddleLeft'\n  | 'TextboxAlignMiddleRight'\n  | 'TextboxAlignMiddleRotate90'\n  | 'TextboxAlignTop'\n  | 'TextboxAlignTopCenter'\n  | 'TextboxAlignTopLeft'\n  | 'TextboxAlignTopRight'\n  | 'TextboxAlignTopRotate90'\n  | 'TextboxMore'\n  | 'TextboxRotate90'\n  | 'TextboxSettings'\n  | 'Thinking'\n  | 'ThumbDislike'\n  | 'ThumbLike'\n  | 'ThumbLikeDislike'\n  | 'TicketDiagonal'\n  | 'TicketHorizontal'\n  | 'TimeAndWeather'\n  | 'TimePicker'\n  | 'Timeline'\n  | 'Timer10'\n  | 'Timer'\n  | 'Timer2'\n  | 'Timer3'\n  | 'TimerOff'\n  | 'ToggleLeft'\n  | 'ToggleMultiple'\n  | 'ToggleRight'\n  | 'Toolbox'\n  | 'TooltipQuote'\n  | 'TopSpeed'\n  | 'Translate'\n  | 'TranslateAuto'\n  | 'TranslateOff'\n  | 'Transmission'\n  | 'TrayItemAdd'\n  | 'TrayItemRemove'\n  | 'TreeDeciduous'\n  | 'TreeEvergreen'\n  | 'Triangle'\n  | 'TriangleDown'\n  | 'TriangleLeft'\n  | 'TriangleRight'\n  | 'TriangleUp'\n  | 'Trophy'\n  | 'TrophyLock'\n  | 'TrophyOff'\n  | 'Tv'\n  | 'TvArrowRight'\n  | 'TvUsb'\n  | 'Umbrella'\n  | 'UninstallApp'\n  | 'UsbPlug'\n  | 'UsbStick'\n  | 'Vault'\n  | 'VehicleBicycle'\n  | 'VehicleBus'\n  | 'VehicleCab'\n  | 'VehicleCableCar'\n  | 'VehicleCar'\n  | 'VehicleCarCollision'\n  | 'VehicleCarParking'\n  | 'VehicleCarProfile'\n  | 'VehicleCarProfileLtr'\n  | 'VehicleCarProfileLtrClock'\n  | 'VehicleCarProfileRtl'\n  | 'VehicleShip'\n  | 'VehicleSubway'\n  | 'VehicleSubwayClock'\n  | 'VehicleTruck'\n  | 'VehicleTruckBag'\n  | 'VehicleTruckCube'\n  | 'VehicleTruckProfile'\n  | 'Video'\n  | 'Video360'\n  | 'Video360Off'\n  | 'VideoAdd'\n  | 'VideoBackgroundEffect'\n  | 'VideoBackgroundEffectHorizontal'\n  | 'VideoChat'\n  | 'VideoClip'\n  | 'VideoClipMultiple'\n  | 'VideoClipOff'\n  | 'VideoClipOptimize'\n  | 'VideoLink'\n  | 'VideoOff'\n  | 'VideoPeople'\n  | 'VideoPerson'\n  | 'VideoPersonCall'\n  | 'VideoPersonClock'\n  | 'VideoPersonOff'\n  | 'VideoPersonPulse'\n  | 'VideoPersonSparkle'\n  | 'VideoPersonSparkleOff'\n  | 'VideoPersonStar'\n  | 'VideoPersonStarOff'\n  | 'VideoPlayPause'\n  | 'VideoProhibited'\n  | 'VideoRecording'\n  | 'VideoSecurity'\n  | 'VideoSwitch'\n  | 'VideoSync'\n  | 'ViewDesktop'\n  | 'ViewDesktopMobile'\n  | 'VirtualNetwork'\n  | 'VirtualNetworkToolbox'\n  | 'Voicemail'\n  | 'VoicemailArrowBack'\n  | 'VoicemailArrowForward'\n  | 'VoicemailArrowSubtract'\n  | 'VoicemailShield'\n  | 'VoicemailSubtract'\n  | 'Vote'\n  | 'WalkieTalkie'\n  | 'Wallet'\n  | 'WalletCreditCard'\n  | 'Wallpaper'\n  | 'Wand'\n  | 'Warning'\n  | 'WarningShield'\n  | 'Washer'\n  | 'Water'\n  | 'WeatherBlowingSnow'\n  | 'WeatherCloudy'\n  | 'WeatherDrizzle'\n  | 'WeatherDuststorm'\n  | 'WeatherFog'\n  | 'WeatherHailDay'\n  | 'WeatherHailNight'\n  | 'WeatherHaze'\n  | 'WeatherMoon'\n  | 'WeatherMoonOff'\n  | 'WeatherPartlyCloudyDay'\n  | 'WeatherPartlyCloudyNight'\n  | 'WeatherRain'\n  | 'WeatherRainShowersDay'\n  | 'WeatherRainShowersNight'\n  | 'WeatherRainSnow'\n  | 'WeatherSnow'\n  | 'WeatherSnowShowerDay'\n  | 'WeatherSnowShowerNight'\n  | 'WeatherSnowflake'\n  | 'WeatherSqualls'\n  | 'WeatherSunny'\n  | 'WeatherSunnyHigh'\n  | 'WeatherSunnyLow'\n  | 'WeatherThunderstorm'\n  | 'WebAsset'\n  | 'Whiteboard'\n  | 'WhiteboardOff'\n  | 'Wifi1'\n  | 'Wifi2'\n  | 'Wifi3'\n  | 'Wifi4'\n  | 'WifiLock'\n  | 'WifiOff'\n  | 'WifiSettings'\n  | 'WifiWarning'\n  | 'Window'\n  | 'WindowAd'\n  | 'WindowAdOff'\n  | 'WindowAdPerson'\n  | 'WindowApps'\n  | 'WindowArrowUp'\n  | 'WindowBulletList'\n  | 'WindowBulletListAdd'\n  | 'WindowConsole'\n  | 'WindowDatabase'\n  | 'WindowDevEdit'\n  | 'WindowDevTools'\n  | 'WindowEdit'\n  | 'WindowHeaderHorizontal'\n  | 'WindowHeaderHorizontalOff'\n  | 'WindowHeaderVertical'\n  | 'WindowInprivate'\n  | 'WindowInprivateAccount'\n  | 'WindowLocationTarget'\n  | 'WindowMultiple'\n  | 'WindowMultipleSwap'\n  | 'WindowNew'\n  | 'WindowPlay'\n  | 'WindowSettings'\n  | 'WindowShield'\n  | 'WindowText'\n  | 'WindowWrench'\n  | 'Wrench'\n  | 'WrenchScrewdriver'\n  | 'WrenchSettings'\n  | 'XboxConsole'\n  | 'XboxController'\n  | 'XboxControllerError'\n  | 'Xray'\n  | 'ZoomFit'\n  | 'ZoomIn'\n  | 'ZoomOut';\n\nexport type ActionStyle = 'default' | 'positive' | 'destructive';\n\nexport type ActionMode = 'primary' | 'secondary';\n\nexport type FallbackAction =\n  | ISubmitAction\n  | IOpenUrlAction\n  | IExecuteAction\n  | IToggleVisibilityAction\n  | IShowCardAction\n  | IResetInputsAction\n  | 'drop';\n\nexport type ContainerStyle = 'default' | 'emphasis' | 'accent' | 'good' | 'attention' | 'warning';\n\nexport type TargetWidth =\n  | 'VeryNarrow'\n  | 'Narrow'\n  | 'Standard'\n  | 'Wide'\n  | 'atLeast:VeryNarrow'\n  | 'atMost:VeryNarrow'\n  | 'atLeast:Narrow'\n  | 'atMost:Narrow'\n  | 'atLeast:Standard'\n  | 'atMost:Standard'\n  | 'atLeast:Wide'\n  | 'atMost:Wide';\n\nexport type HorizontalAlignment = 'Left' | 'Center' | 'Right';\n\nexport type VerticalAlignment = 'Top' | 'Center' | 'Bottom';\n\nexport type FlowLayoutItemFit = 'Fit' | 'Fill';\n\nexport type Spacing =\n  | 'None'\n  | 'ExtraSmall'\n  | 'Small'\n  | 'Default'\n  | 'Medium'\n  | 'Large'\n  | 'ExtraLarge'\n  | 'Padding';\n\nexport type FillMode = 'Cover' | 'RepeatHorizontally' | 'RepeatVertically' | 'Repeat';\n\nexport type MentionType = 'Person' | 'Tag';\n\nexport type ElementHeight = 'auto' | 'stretch';\n\nexport type TextSize = 'Small' | 'Default' | 'Medium' | 'Large' | 'ExtraLarge';\n\nexport type TextWeight = 'Lighter' | 'Default' | 'Bolder';\n\nexport type TextColor = 'Default' | 'Dark' | 'Light' | 'Accent' | 'Good' | 'Warning' | 'Attention';\n\nexport type FontType = 'Default' | 'Monospace';\n\nexport type ImageStyle = 'Default' | 'Person' | 'RoundedCorners';\n\nexport type Size = 'Auto' | 'Stretch' | 'Small' | 'Medium' | 'Large';\n\nexport type InputTextStyle = 'Text' | 'Tel' | 'Url' | 'Email' | 'Password';\n\nexport type RatingSize = 'Medium' | 'Large';\n\nexport type RatingColor = 'Neutral' | 'Marigold';\n\nexport type RatingStyle = 'Default' | 'Compact';\n\nexport type IconSize =\n  | 'xxSmall'\n  | 'xSmall'\n  | 'Small'\n  | 'Standard'\n  | 'Medium'\n  | 'Large'\n  | 'xLarge'\n  | 'xxLarge';\n\nexport type IconStyle = 'Regular' | 'Filled';\n\nexport type CarouselPageAnimation = 'Slide' | 'CrossFade' | 'None';\n\nexport type BadgeIconPosition = 'Before' | 'After';\n\nexport type BadgeAppearance = 'Filled' | 'Tint';\n\nexport type BadgeSize = 'Medium' | 'Large' | 'ExtraLarge';\n\nexport type BadgeShape = 'Square' | 'Rounded' | 'Circular';\n\nexport type BadgeStyle =\n  | 'Default'\n  | 'Subtle'\n  | 'Informative'\n  | 'Accent'\n  | 'Good'\n  | 'Attention'\n  | 'Warning';\n\nexport type ChartColorSet = 'categorical' | 'sequential' | 'diverging';\n\nexport type ChartColor =\n  | 'good'\n  | 'warning'\n  | 'attention'\n  | 'neutral'\n  | 'categoricalRed'\n  | 'categoricalPurple'\n  | 'categoricalLavender'\n  | 'categoricalBlue'\n  | 'categoricalLightBlue'\n  | 'categoricalTeal'\n  | 'categoricalGreen'\n  | 'categoricalLime'\n  | 'categoricalMarigold'\n  | 'sequential1'\n  | 'sequential2'\n  | 'sequential3'\n  | 'sequential4'\n  | 'sequential5'\n  | 'sequential6'\n  | 'sequential7'\n  | 'sequential8'\n  | 'divergingBlue'\n  | 'divergingLightBlue'\n  | 'divergingCyan'\n  | 'divergingTeal'\n  | 'divergingYellow'\n  | 'divergingPeach'\n  | 'divergingLightRed'\n  | 'divergingRed'\n  | 'divergingMaroon'\n  | 'divergingGray';\n\nexport type HorizontalBarChartDisplayMode = 'AbsoluteWithAxis' | 'AbsoluteNoAxis' | 'PartToWhole';\n\nexport type GaugeChartValueFormat = 'Percentage' | 'Fraction';\n\nexport type FallbackElement =\n  | IContainer\n  | IActionSet\n  | IColumnSet\n  | IMedia\n  | IRichTextBlock\n  | ITable\n  | ITextBlock\n  | IFactSet\n  | IImageSet\n  | IImage\n  | ITextInput\n  | IDateInput\n  | ITimeInput\n  | INumberInput\n  | IToggleInput\n  | IChoiceSetInput\n  | IRatingInput\n  | IRating\n  | ICompoundButton\n  | IIcon\n  | ICarousel\n  | IBadge\n  | IDonutChart\n  | IPieChart\n  | IGroupedVerticalBarChart\n  | IVerticalBarChart\n  | IHorizontalBarChart\n  | IStackedHorizontalBarChart\n  | ILineChart\n  | IGaugeChart\n  | ICodeBlock\n  | IComUserMicrosoftGraphComponent\n  | IComUsersMicrosoftGraphComponent\n  | IComResourceMicrosoftGraphComponent\n  | IComFileMicrosoftGraphComponent\n  | IComEventMicrosoftGraphComponent\n  | 'drop';\n\nexport type CardElementArray = (\n  | IActionSet\n  | IBadge\n  | ICarousel\n  | IDonutChart\n  | IGaugeChart\n  | IHorizontalBarChart\n  | IStackedHorizontalBarChart\n  | ILineChart\n  | IPieChart\n  | IVerticalBarChart\n  | IGroupedVerticalBarChart\n  | ICodeBlock\n  | IColumnSet\n  | IComEventMicrosoftGraphComponent\n  | IComFileMicrosoftGraphComponent\n  | IComResourceMicrosoftGraphComponent\n  | IComUserMicrosoftGraphComponent\n  | IComUsersMicrosoftGraphComponent\n  | ICompoundButton\n  | IContainer\n  | IFactSet\n  | IIcon\n  | IImage\n  | IImageSet\n  | IChoiceSetInput\n  | IDateInput\n  | INumberInput\n  | IRatingInput\n  | ITextInput\n  | ITimeInput\n  | IToggleInput\n  | IMedia\n  | IRating\n  | IRichTextBlock\n  | ITable\n  | ITextBlock\n)[];\n\nexport type ImageSize = 'Small' | 'Medium' | 'Large';\n\nexport type TableCellArray = ITableCell[];\n\nexport type TableRowArray = ITableRow[];\n\nexport type RichTextBlockInlineArray = (ITextRun | string)[];\n\nexport type ColumnArray = IColumn[];\n\nexport type ActionArray = (\n  | IExecuteAction\n  | IOpenUrlAction\n  | IResetInputsAction\n  | IShowCardAction\n  | ISubmitAction\n  | IToggleVisibilityAction\n)[];\n\n/**\n * An Adaptive Card, containing a free-form body of card elements, and an optional set of actions.\n */\nexport interface IAdaptiveCard {\n  /**\n   * Must be **AdaptiveCard**.\n   */\n  readonly type: 'AdaptiveCard';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * A URL to the Adaptive Card schema the card is authored against.\n   */\n  $schema?: string;\n  /**\n   * The Adaptive Card schema version the card is authored against.\n   */\n  version?: '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6';\n  /**\n   * The text that should be displayed if the client is not able to render the card.\n   */\n  fallbackText?: string;\n  /**\n   * The text that should be spoken for the entire card.\n   */\n  speak?: string;\n  /**\n   * Defines how the card can be refreshed by making a request to the target Bot.\n   */\n  refresh?: IRefreshDefinition;\n  /**\n   * Defines authentication information to enable on-behalf-of single-sign-on or just-in-time OAuth. This information is used in conjunction with the refresh property and Action.Execute in general.\n   */\n  authentication?: IAuthentication;\n  /**\n   * Teams-specific metadata associated with the card.\n   */\n  msTeams?: ITeamsCardProperties;\n  /**\n   * Metadata associated with the card.\n   */\n  metadata?: ICardMetadata;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The body of the card, comprised of a list of elements displayed according to the layouts property. If the layouts property is not specified, a Layout.Stack is used.\n   */\n  body: CardElementArray;\n  /**\n   * The card level actions, which always appear at the bottom of the card.\n   */\n  actions?: ActionArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IAdaptiveCard.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of AdaptiveCard, false otherwise.\n */\nexport function isAdaptiveCard(value: unknown): value is IAdaptiveCard {\n  const obj = value as IAdaptiveCard;\n  return typeof obj === 'object' && obj.type === 'AdaptiveCard';\n}\n\nexport type AdaptiveCardOptions = Omit<IAdaptiveCard, 'type' | 'body'>;\n\n/**\n * An Adaptive Card, containing a free-form body of card elements, and an optional set of actions.\n */\nexport class AdaptiveCard implements IAdaptiveCard {\n  /**\n   * Must be **AdaptiveCard**.\n   */\n  readonly type = 'AdaptiveCard';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * A URL to the Adaptive Card schema the card is authored against.\n   */\n  $schema?: string;\n  /**\n   * The Adaptive Card schema version the card is authored against.\n   */\n  version?: '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6';\n  /**\n   * The text that should be displayed if the client is not able to render the card.\n   */\n  fallbackText?: string;\n  /**\n   * The text that should be spoken for the entire card.\n   */\n  speak?: string;\n  /**\n   * Defines how the card can be refreshed by making a request to the target Bot.\n   */\n  refresh?: IRefreshDefinition;\n  /**\n   * Defines authentication information to enable on-behalf-of single-sign-on or just-in-time OAuth. This information is used in conjunction with the refresh property and Action.Execute in general.\n   */\n  authentication?: IAuthentication;\n  /**\n   * Teams-specific metadata associated with the card.\n   */\n  msTeams?: ITeamsCardProperties;\n  /**\n   * Metadata associated with the card.\n   */\n  metadata?: ICardMetadata;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The body of the card, comprised of a list of elements displayed according to the layouts property. If the layouts property is not specified, a Layout.Stack is used.\n   */\n  body: CardElementArray;\n  /**\n   * The card level actions, which always appear at the bottom of the card.\n   */\n  actions?: ActionArray;\n\n  constructor(...body: CardElementArray) {\n    this.body = body;\n  }\n\n  withOptions(value: AdaptiveCardOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this {\n    this.layouts = layouts;\n    return this;\n  }\n\n  withMinHeight(minHeight: string): this {\n    this.minHeight = minHeight;\n    return this;\n  }\n\n  withBackgroundImage(backgroundImage: string | IBackgroundImage): this {\n    this.backgroundImage = backgroundImage;\n    return this;\n  }\n\n  withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this {\n    this.verticalContentAlignment = verticalContentAlignment;\n    return this;\n  }\n\n  withRtl(rtl: boolean): this {\n    this.rtl = rtl;\n    return this;\n  }\n\n  with$schema($schema: string): this {\n    this.$schema = $schema;\n    return this;\n  }\n\n  withVersion(version: '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6'): this {\n    this.version = version;\n    return this;\n  }\n\n  withFallbackText(fallbackText: string): this {\n    this.fallbackText = fallbackText;\n    return this;\n  }\n\n  withSpeak(speak: string): this {\n    this.speak = speak;\n    return this;\n  }\n\n  withRefresh(refresh: IRefreshDefinition): this {\n    this.refresh = refresh;\n    return this;\n  }\n\n  withAuthentication(authentication: IAuthentication): this {\n    this.authentication = authentication;\n    return this;\n  }\n\n  withMsTeams(msTeams: ITeamsCardProperties): this {\n    this.msTeams = msTeams;\n    return this;\n  }\n\n  withMetadata(metadata: ICardMetadata): this {\n    this.metadata = metadata;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withBody(...body: CardElementArray): this {\n    this.body = body;\n    return this;\n  }\n\n  withActions(...actions: ActionArray): this {\n    this.actions = actions;\n    return this;\n  }\n}\n\n/**\n * Represents a list of versioned capabilities a host application must support.\n */\nexport interface IHostCapabilities {}\n\n/**\n * Represents a list of versioned capabilities a host application must support.\n */\nexport class HostCapabilities implements IHostCapabilities {}\n\n/**\n * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can respond synchronously and return an updated Adaptive Card to be displayed by the client. Action.Execute works in all Adaptive Card hosts.\n */\nexport interface IExecuteAction {\n  /**\n   * Must be **Action.Execute**.\n   */\n  readonly type: 'Action.Execute';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.\n   */\n  data?: any;\n  /**\n   * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  associatedInputs?: 'auto' | 'none';\n  /**\n   * Controls if the action is enabled only if at least one required input has been filled by the user.\n   */\n  conditionallyEnabled?: boolean;\n  /**\n   * The verb of the action.\n   */\n  verb?: string;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IExecuteAction.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ExecuteAction, false otherwise.\n */\nexport function isExecuteAction(value: unknown): value is IExecuteAction {\n  const obj = value as IExecuteAction;\n  return typeof obj === 'object' && obj.type === 'Action.Execute';\n}\n\nexport type ExecuteActionOptions = Omit<IExecuteAction, 'type'>;\n\n/**\n * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can respond synchronously and return an updated Adaptive Card to be displayed by the client. Action.Execute works in all Adaptive Card hosts.\n */\nexport class ExecuteAction implements IExecuteAction {\n  /**\n   * Must be **Action.Execute**.\n   */\n  readonly type = 'Action.Execute';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.\n   */\n  data?: any;\n  /**\n   * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  associatedInputs?: 'auto' | 'none';\n  /**\n   * Controls if the action is enabled only if at least one required input has been filled by the user.\n   */\n  conditionallyEnabled?: boolean;\n  /**\n   * The verb of the action.\n   */\n  verb?: string;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n\n  constructor(options: ExecuteActionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IExecuteAction, 'type'>): ExecuteAction {\n    return new ExecuteAction(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withIconUrl(iconUrl: string): this {\n    this.iconUrl = iconUrl;\n    return this;\n  }\n\n  withStyle(style: ActionStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withMode(mode: ActionMode): this {\n    this.mode = mode;\n    return this;\n  }\n\n  withTooltip(tooltip: string): this {\n    this.tooltip = tooltip;\n    return this;\n  }\n\n  withIsEnabled(isEnabled = false): this {\n    this.isEnabled = isEnabled;\n    return this;\n  }\n\n  withData(data: any): this {\n    this.data = data;\n    return this;\n  }\n\n  withAssociatedInputs(associatedInputs: 'auto' | 'none'): this {\n    this.associatedInputs = associatedInputs;\n    return this;\n  }\n\n  withConditionallyEnabled(conditionallyEnabled = true): this {\n    this.conditionallyEnabled = conditionallyEnabled;\n    return this;\n  }\n\n  withVerb(verb: string): this {\n    this.verb = verb;\n    return this;\n  }\n\n  withFallback(fallback: FallbackAction): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can only acknowledge is has received the request. Action.Submit only works in Teams.\n */\nexport interface ISubmitAction {\n  /**\n   * Must be **Action.Submit**.\n   */\n  readonly type: 'Action.Submit';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.\n   */\n  data?: any;\n  /**\n   * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  associatedInputs?: 'auto' | 'none';\n  /**\n   * Controls if the action is enabled only if at least one required input has been filled by the user.\n   */\n  conditionallyEnabled?: boolean;\n  /**\n   * Teams-specific metadata associated with the action.\n   */\n  msTeams?: ITeamsSubmitActionProperties;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ISubmitAction.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of SubmitAction, false otherwise.\n */\nexport function isSubmitAction(value: unknown): value is ISubmitAction {\n  const obj = value as ISubmitAction;\n  return typeof obj === 'object' && obj.type === 'Action.Submit';\n}\n\nexport type SubmitActionOptions = Omit<ISubmitAction, 'type'>;\n\n/**\n * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can only acknowledge is has received the request. Action.Submit only works in Teams.\n */\nexport class SubmitAction implements ISubmitAction {\n  /**\n   * Must be **Action.Submit**.\n   */\n  readonly type = 'Action.Submit';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.\n   */\n  data?: any;\n  /**\n   * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  associatedInputs?: 'auto' | 'none';\n  /**\n   * Controls if the action is enabled only if at least one required input has been filled by the user.\n   */\n  conditionallyEnabled?: boolean;\n  /**\n   * Teams-specific metadata associated with the action.\n   */\n  msTeams?: ITeamsSubmitActionProperties;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n\n  constructor(options: SubmitActionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ISubmitAction, 'type'>): SubmitAction {\n    return new SubmitAction(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withIconUrl(iconUrl: string): this {\n    this.iconUrl = iconUrl;\n    return this;\n  }\n\n  withStyle(style: ActionStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withMode(mode: ActionMode): this {\n    this.mode = mode;\n    return this;\n  }\n\n  withTooltip(tooltip: string): this {\n    this.tooltip = tooltip;\n    return this;\n  }\n\n  withIsEnabled(isEnabled = false): this {\n    this.isEnabled = isEnabled;\n    return this;\n  }\n\n  withData(data: any): this {\n    this.data = data;\n    return this;\n  }\n\n  withAssociatedInputs(associatedInputs: 'auto' | 'none'): this {\n    this.associatedInputs = associatedInputs;\n    return this;\n  }\n\n  withConditionallyEnabled(conditionallyEnabled = true): this {\n    this.conditionallyEnabled = conditionallyEnabled;\n    return this;\n  }\n\n  withMsTeams(msTeams: ITeamsSubmitActionProperties): this {\n    this.msTeams = msTeams;\n    return this;\n  }\n\n  withFallback(fallback: FallbackAction): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Teams-specific properties associated with the action.\n */\nexport interface ITeamsSubmitActionProperties {\n  /**\n   * Defines how feedback is provided to the end-user when the action is executed.\n   */\n  feedback?: ITeamsSubmitActionFeedback;\n}\n\nexport type TeamsSubmitActionPropertiesOptions = ITeamsSubmitActionProperties;\n\n/**\n * Teams-specific properties associated with the action.\n */\nexport class TeamsSubmitActionProperties implements ITeamsSubmitActionProperties {\n  /**\n   * Defines how feedback is provided to the end-user when the action is executed.\n   */\n  feedback?: ITeamsSubmitActionFeedback;\n\n  constructor(options: TeamsSubmitActionPropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ITeamsSubmitActionProperties): TeamsSubmitActionProperties {\n    return new TeamsSubmitActionProperties(options);\n  }\n\n  withFeedback(feedback: ITeamsSubmitActionFeedback): this {\n    this.feedback = feedback;\n    return this;\n  }\n}\n\n/**\n * Represents feedback options for an [Action.Submit](https://adaptivecards.microsoft.com/?topic=Action.Submit).\n */\nexport interface ITeamsSubmitActionFeedback {\n  /**\n   * Defines if a feedback message should be displayed after the action is executed.\n   */\n  hide?: boolean;\n}\n\nexport type TeamsSubmitActionFeedbackOptions = ITeamsSubmitActionFeedback;\n\n/**\n * Represents feedback options for an [Action.Submit](https://adaptivecards.microsoft.com/?topic=Action.Submit).\n */\nexport class TeamsSubmitActionFeedback implements ITeamsSubmitActionFeedback {\n  /**\n   * Defines if a feedback message should be displayed after the action is executed.\n   */\n  hide?: boolean;\n\n  constructor(options: TeamsSubmitActionFeedbackOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ITeamsSubmitActionFeedback): TeamsSubmitActionFeedback {\n    return new TeamsSubmitActionFeedback(options);\n  }\n\n  withHide(hide: boolean): this {\n    this.hide = hide;\n    return this;\n  }\n}\n\n/**\n * Opens the provided URL in either a separate browser tab or within the host application.\n */\nexport interface IOpenUrlAction {\n  /**\n   * Must be **Action.OpenUrl**.\n   */\n  readonly type: 'Action.OpenUrl';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The URL to open.\n   */\n  url: string;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IOpenUrlAction.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of OpenUrlAction, false otherwise.\n */\nexport function isOpenUrlAction(value: unknown): value is IOpenUrlAction {\n  const obj = value as IOpenUrlAction;\n  return typeof obj === 'object' && obj.type === 'Action.OpenUrl';\n}\n\nexport type OpenUrlActionOptions = Omit<IOpenUrlAction, 'type' | 'url'>;\n\n/**\n * Opens the provided URL in either a separate browser tab or within the host application.\n */\nexport class OpenUrlAction implements IOpenUrlAction {\n  /**\n   * Must be **Action.OpenUrl**.\n   */\n  readonly type = 'Action.OpenUrl';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The URL to open.\n   */\n  url: string;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n\n  constructor(url: string, options: OpenUrlActionOptions = {}) {\n    Object.assign(this, options);\n    this.url = url;\n  }\n\n  static from(options: Omit<IOpenUrlAction, 'type'>): OpenUrlAction {\n    return new OpenUrlAction(options.url, options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withIconUrl(iconUrl: string): this {\n    this.iconUrl = iconUrl;\n    return this;\n  }\n\n  withStyle(style: ActionStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withMode(mode: ActionMode): this {\n    this.mode = mode;\n    return this;\n  }\n\n  withTooltip(tooltip: string): this {\n    this.tooltip = tooltip;\n    return this;\n  }\n\n  withIsEnabled(isEnabled = false): this {\n    this.isEnabled = isEnabled;\n    return this;\n  }\n\n  withUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n\n  withFallback(fallback: FallbackAction): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Toggles the visibility of a set of elements. Action.ToggleVisibility is useful for creating \"Show more\" type UI patterns.\n */\nexport interface IToggleVisibilityAction {\n  /**\n   * Must be **Action.ToggleVisibility**.\n   */\n  readonly type: 'Action.ToggleVisibility';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The Ids of the elements to toggle the visibility of.\n   */\n  targetElements?: (string | ITargetElement)[];\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IToggleVisibilityAction.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ToggleVisibilityAction, false otherwise.\n */\nexport function isToggleVisibilityAction(value: unknown): value is IToggleVisibilityAction {\n  const obj = value as IToggleVisibilityAction;\n  return typeof obj === 'object' && obj.type === 'Action.ToggleVisibility';\n}\n\nexport type ToggleVisibilityActionOptions = Omit<IToggleVisibilityAction, 'type'>;\n\n/**\n * Toggles the visibility of a set of elements. Action.ToggleVisibility is useful for creating \"Show more\" type UI patterns.\n */\nexport class ToggleVisibilityAction implements IToggleVisibilityAction {\n  /**\n   * Must be **Action.ToggleVisibility**.\n   */\n  readonly type = 'Action.ToggleVisibility';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The Ids of the elements to toggle the visibility of.\n   */\n  targetElements?: (string | ITargetElement)[];\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n\n  constructor(options: ToggleVisibilityActionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IToggleVisibilityAction, 'type'>): ToggleVisibilityAction {\n    return new ToggleVisibilityAction(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withIconUrl(iconUrl: string): this {\n    this.iconUrl = iconUrl;\n    return this;\n  }\n\n  withStyle(style: ActionStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withMode(mode: ActionMode): this {\n    this.mode = mode;\n    return this;\n  }\n\n  withTooltip(tooltip: string): this {\n    this.tooltip = tooltip;\n    return this;\n  }\n\n  withIsEnabled(isEnabled = false): this {\n    this.isEnabled = isEnabled;\n    return this;\n  }\n\n  withTargetElements(...targetElements: (string | ITargetElement)[]): this {\n    this.targetElements = targetElements;\n    return this;\n  }\n\n  withFallback(fallback: FallbackAction): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Defines a target element in an Action.ToggleVisibility.\n */\nexport interface ITargetElement {\n  /**\n   * The Id of the element to change the visibility of.\n   */\n  elementId?: string;\n  /**\n   * The new visibility state of the element.\n   */\n  isVisible?: boolean;\n}\n\nexport type TargetElementOptions = ITargetElement;\n\n/**\n * Defines a target element in an Action.ToggleVisibility.\n */\nexport class TargetElement implements ITargetElement {\n  /**\n   * The Id of the element to change the visibility of.\n   */\n  elementId?: string;\n  /**\n   * The new visibility state of the element.\n   */\n  isVisible?: boolean;\n\n  constructor(options: TargetElementOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ITargetElement): TargetElement {\n    return new TargetElement(options);\n  }\n\n  withElementId(elementId: string): this {\n    this.elementId = elementId;\n    return this;\n  }\n\n  withIsVisible(isVisible: boolean): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n}\n\n/**\n * Expands or collapses an embedded card within the main card.\n */\nexport interface IShowCardAction {\n  /**\n   * Must be **Action.ShowCard**.\n   */\n  readonly type: 'Action.ShowCard';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n  /**\n   * The card that should be displayed when the action is executed.\n   */\n  card?: IAdaptiveCard;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IShowCardAction.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ShowCardAction, false otherwise.\n */\nexport function isShowCardAction(value: unknown): value is IShowCardAction {\n  const obj = value as IShowCardAction;\n  return typeof obj === 'object' && obj.type === 'Action.ShowCard';\n}\n\nexport type ShowCardActionOptions = Omit<IShowCardAction, 'type'>;\n\n/**\n * Expands or collapses an embedded card within the main card.\n */\nexport class ShowCardAction implements IShowCardAction {\n  /**\n   * Must be **Action.ShowCard**.\n   */\n  readonly type = 'Action.ShowCard';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n  /**\n   * The card that should be displayed when the action is executed.\n   */\n  card?: IAdaptiveCard;\n\n  constructor(options: ShowCardActionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IShowCardAction, 'type'>): ShowCardAction {\n    return new ShowCardAction(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withIconUrl(iconUrl: string): this {\n    this.iconUrl = iconUrl;\n    return this;\n  }\n\n  withStyle(style: ActionStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withMode(mode: ActionMode): this {\n    this.mode = mode;\n    return this;\n  }\n\n  withTooltip(tooltip: string): this {\n    this.tooltip = tooltip;\n    return this;\n  }\n\n  withIsEnabled(isEnabled = false): this {\n    this.isEnabled = isEnabled;\n    return this;\n  }\n\n  withFallback(fallback: FallbackAction): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withCard(card: IAdaptiveCard): this {\n    this.card = card;\n    return this;\n  }\n}\n\n/**\n * Resets the values of the inputs in the card.\n */\nexport interface IResetInputsAction {\n  /**\n   * Must be **Action.ResetInputs**.\n   */\n  readonly type: 'Action.ResetInputs';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The Ids of the inputs that should be reset.\n   */\n  targetInputIds?: string[];\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IResetInputsAction.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ResetInputsAction, false otherwise.\n */\nexport function isResetInputsAction(value: unknown): value is IResetInputsAction {\n  const obj = value as IResetInputsAction;\n  return typeof obj === 'object' && obj.type === 'Action.ResetInputs';\n}\n\nexport type ResetInputsActionOptions = Omit<IResetInputsAction, 'type'>;\n\n/**\n * Resets the values of the inputs in the card.\n */\nexport class ResetInputsAction implements IResetInputsAction {\n  /**\n   * Must be **Action.ResetInputs**.\n   */\n  readonly type = 'Action.ResetInputs';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The title of the action, as it appears on buttons.\n   */\n  title?: string;\n  /**\n   * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.\n\n`iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.\n   */\n  iconUrl?: string;\n  /**\n   * Control the style of the action, affecting its visual and spoken representations.\n   */\n  style?: ActionStyle;\n  /**\n   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.\n   */\n  mode?: ActionMode;\n  /**\n   * The tooltip text to display when the action is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.\n   */\n  isEnabled?: boolean;\n  /**\n   * The Ids of the inputs that should be reset.\n   */\n  targetInputIds?: string[];\n  /**\n   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackAction;\n\n  constructor(options: ResetInputsActionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IResetInputsAction, 'type'>): ResetInputsAction {\n    return new ResetInputsAction(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withIconUrl(iconUrl: string): this {\n    this.iconUrl = iconUrl;\n    return this;\n  }\n\n  withStyle(style: ActionStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withMode(mode: ActionMode): this {\n    this.mode = mode;\n    return this;\n  }\n\n  withTooltip(tooltip: string): this {\n    this.tooltip = tooltip;\n    return this;\n  }\n\n  withIsEnabled(isEnabled = false): this {\n    this.isEnabled = isEnabled;\n    return this;\n  }\n\n  withTargetInputIds(...targetInputIds: string[]): this {\n    this.targetInputIds = targetInputIds;\n    return this;\n  }\n\n  withFallback(fallback: FallbackAction): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A layout that stacks elements on top of each other. Layout.Stack is the default layout used by AdaptiveCard and all containers.\n */\nexport interface IStackLayout {\n  /**\n   * Must be **Layout.Stack**.\n   */\n  readonly type: 'Layout.Stack';\n  /**\n   * Controls for which card width the layout should be used.\n   */\n  targetWidth?: TargetWidth;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IStackLayout.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of StackLayout, false otherwise.\n */\nexport function isStackLayout(value: unknown): value is IStackLayout {\n  const obj = value as IStackLayout;\n  return typeof obj === 'object' && obj.type === 'Layout.Stack';\n}\n\nexport type StackLayoutOptions = Omit<IStackLayout, 'type'>;\n\n/**\n * A layout that stacks elements on top of each other. Layout.Stack is the default layout used by AdaptiveCard and all containers.\n */\nexport class StackLayout implements IStackLayout {\n  /**\n   * Must be **Layout.Stack**.\n   */\n  readonly type = 'Layout.Stack';\n  /**\n   * Controls for which card width the layout should be used.\n   */\n  targetWidth?: TargetWidth;\n\n  constructor(options: StackLayoutOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IStackLayout, 'type'>): StackLayout {\n    return new StackLayout(options);\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n}\n\n/**\n * A layout that spreads elements horizontally and wraps them across multiple rows, as needed.\n */\nexport interface IFlowLayout {\n  /**\n   * Must be **Layout.Flow**.\n   */\n  readonly type: 'Layout.Flow';\n  /**\n   * Controls for which card width the layout should be used.\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls how the content of the container should be horizontally aligned.\n   */\n  horizontalItemsAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of the container should be vertically aligned.\n   */\n  verticalItemsAlignment?: VerticalAlignment;\n  /**\n   * Controls how item should fit inside the container.\n   */\n  itemFit?: FlowLayoutItemFit;\n  /**\n   * The minimum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.\n   */\n  minItemWidth?: string;\n  /**\n   * The maximum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.\n   */\n  maxItemWidth?: string;\n  /**\n   * The width, in pixels, of each item, in the `<number>px` format. Should not be used if maxItemWidth and/or minItemWidth are set.\n   */\n  itemWidth?: string;\n  /**\n   * The space between items.\n   */\n  columnSpacing?: Spacing;\n  /**\n   * The space between rows of items.\n   */\n  rowSpacing?: Spacing;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IFlowLayout.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of FlowLayout, false otherwise.\n */\nexport function isFlowLayout(value: unknown): value is IFlowLayout {\n  const obj = value as IFlowLayout;\n  return typeof obj === 'object' && obj.type === 'Layout.Flow';\n}\n\nexport type FlowLayoutOptions = Omit<IFlowLayout, 'type'>;\n\n/**\n * A layout that spreads elements horizontally and wraps them across multiple rows, as needed.\n */\nexport class FlowLayout implements IFlowLayout {\n  /**\n   * Must be **Layout.Flow**.\n   */\n  readonly type = 'Layout.Flow';\n  /**\n   * Controls for which card width the layout should be used.\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls how the content of the container should be horizontally aligned.\n   */\n  horizontalItemsAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of the container should be vertically aligned.\n   */\n  verticalItemsAlignment?: VerticalAlignment;\n  /**\n   * Controls how item should fit inside the container.\n   */\n  itemFit?: FlowLayoutItemFit;\n  /**\n   * The minimum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.\n   */\n  minItemWidth?: string;\n  /**\n   * The maximum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.\n   */\n  maxItemWidth?: string;\n  /**\n   * The width, in pixels, of each item, in the `<number>px` format. Should not be used if maxItemWidth and/or minItemWidth are set.\n   */\n  itemWidth?: string;\n  /**\n   * The space between items.\n   */\n  columnSpacing?: Spacing;\n  /**\n   * The space between rows of items.\n   */\n  rowSpacing?: Spacing;\n\n  constructor(options: FlowLayoutOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IFlowLayout, 'type'>): FlowLayout {\n    return new FlowLayout(options);\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withHorizontalItemsAlignment(horizontalItemsAlignment: HorizontalAlignment): this {\n    this.horizontalItemsAlignment = horizontalItemsAlignment;\n    return this;\n  }\n\n  withVerticalItemsAlignment(verticalItemsAlignment: VerticalAlignment): this {\n    this.verticalItemsAlignment = verticalItemsAlignment;\n    return this;\n  }\n\n  withItemFit(itemFit: FlowLayoutItemFit): this {\n    this.itemFit = itemFit;\n    return this;\n  }\n\n  withMinItemWidth(minItemWidth: string): this {\n    this.minItemWidth = minItemWidth;\n    return this;\n  }\n\n  withMaxItemWidth(maxItemWidth: string): this {\n    this.maxItemWidth = maxItemWidth;\n    return this;\n  }\n\n  withItemWidth(itemWidth: string): this {\n    this.itemWidth = itemWidth;\n    return this;\n  }\n\n  withColumnSpacing(columnSpacing: Spacing): this {\n    this.columnSpacing = columnSpacing;\n    return this;\n  }\n\n  withRowSpacing(rowSpacing: Spacing): this {\n    this.rowSpacing = rowSpacing;\n    return this;\n  }\n}\n\n/**\n * A layout that divides a container into named areas into which elements can be placed.\n */\nexport interface IAreaGridLayout {\n  /**\n   * Must be **Layout.AreaGrid**.\n   */\n  readonly type: 'Layout.AreaGrid';\n  /**\n   * Controls for which card width the layout should be used.\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * The columns in the grid layout, defined as a percentage of the available width or in pixels using the `<number>px` format.\n   */\n  columns?: (number | string)[];\n  /**\n   * The areas in the grid layout.\n   */\n  areas?: IGridArea[];\n  /**\n   * The space between columns.\n   */\n  columnSpacing?: Spacing;\n  /**\n   * The space between rows.\n   */\n  rowSpacing?: Spacing;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IAreaGridLayout.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of AreaGridLayout, false otherwise.\n */\nexport function isAreaGridLayout(value: unknown): value is IAreaGridLayout {\n  const obj = value as IAreaGridLayout;\n  return typeof obj === 'object' && obj.type === 'Layout.AreaGrid';\n}\n\nexport type AreaGridLayoutOptions = Omit<IAreaGridLayout, 'type'>;\n\n/**\n * A layout that divides a container into named areas into which elements can be placed.\n */\nexport class AreaGridLayout implements IAreaGridLayout {\n  /**\n   * Must be **Layout.AreaGrid**.\n   */\n  readonly type = 'Layout.AreaGrid';\n  /**\n   * Controls for which card width the layout should be used.\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * The columns in the grid layout, defined as a percentage of the available width or in pixels using the `<number>px` format.\n   */\n  columns?: (number | string)[];\n  /**\n   * The areas in the grid layout.\n   */\n  areas?: IGridArea[];\n  /**\n   * The space between columns.\n   */\n  columnSpacing?: Spacing;\n  /**\n   * The space between rows.\n   */\n  rowSpacing?: Spacing;\n\n  constructor(options: AreaGridLayoutOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IAreaGridLayout, 'type'>): AreaGridLayout {\n    return new AreaGridLayout(options);\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withColumns(...columns: (number | string)[]): this {\n    this.columns = columns;\n    return this;\n  }\n\n  withAreas(...areas: IGridArea[]): this {\n    this.areas = areas;\n    return this;\n  }\n\n  withColumnSpacing(columnSpacing: Spacing): this {\n    this.columnSpacing = columnSpacing;\n    return this;\n  }\n\n  withRowSpacing(rowSpacing: Spacing): this {\n    this.rowSpacing = rowSpacing;\n    return this;\n  }\n}\n\n/**\n * Defines an area in a Layout.AreaGrid layout.\n */\nexport interface IGridArea {\n  /**\n   * The name of the area. To place an element in this area, set its `grid.area` property to match the name of the area.\n   */\n  name?: string;\n  /**\n   * The start column index of the area. Column indices start at 1.\n   */\n  column?: number;\n  /**\n   * Defines how many columns the area should span.\n   */\n  columnSpan?: number;\n  /**\n   * The start row index of the area. Row indices start at 1.\n   */\n  row?: number;\n  /**\n   * Defines how many rows the area should span.\n   */\n  rowSpan?: number;\n}\n\nexport type GridAreaOptions = IGridArea;\n\n/**\n * Defines an area in a Layout.AreaGrid layout.\n */\nexport class GridArea implements IGridArea {\n  /**\n   * The name of the area. To place an element in this area, set its `grid.area` property to match the name of the area.\n   */\n  name?: string;\n  /**\n   * The start column index of the area. Column indices start at 1.\n   */\n  column?: number;\n  /**\n   * Defines how many columns the area should span.\n   */\n  columnSpan?: number;\n  /**\n   * The start row index of the area. Row indices start at 1.\n   */\n  row?: number;\n  /**\n   * Defines how many rows the area should span.\n   */\n  rowSpan?: number;\n\n  constructor(options: GridAreaOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IGridArea): GridArea {\n    return new GridArea(options);\n  }\n\n  withName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  withColumn(column: number): this {\n    this.column = column;\n    return this;\n  }\n\n  withColumnSpan(columnSpan: number): this {\n    this.columnSpan = columnSpan;\n    return this;\n  }\n\n  withRow(row: number): this {\n    this.row = row;\n    return this;\n  }\n\n  withRowSpan(rowSpan: number): this {\n    this.rowSpan = rowSpan;\n    return this;\n  }\n}\n\n/**\n * Defines a container's background image and the way it should be rendered.\n */\nexport interface IBackgroundImage {\n  /**\n   * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.\n   */\n  url?: string;\n  /**\n   * Controls how the image should fill the area.\n   */\n  fillMode?: FillMode;\n  /**\n   * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.\n   */\n  verticalAlignment?: VerticalAlignment;\n}\n\nexport type BackgroundImageOptions = IBackgroundImage;\n\n/**\n * Defines a container's background image and the way it should be rendered.\n */\nexport class BackgroundImage implements IBackgroundImage {\n  /**\n   * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.\n   */\n  url?: string;\n  /**\n   * Controls how the image should fill the area.\n   */\n  fillMode?: FillMode;\n  /**\n   * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.\n   */\n  verticalAlignment?: VerticalAlignment;\n\n  constructor(options: BackgroundImageOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IBackgroundImage): BackgroundImage {\n    return new BackgroundImage(options);\n  }\n\n  withUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n\n  withFillMode(fillMode: FillMode): this {\n    this.fillMode = fillMode;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withVerticalAlignment(verticalAlignment: VerticalAlignment): this {\n    this.verticalAlignment = verticalAlignment;\n    return this;\n  }\n}\n\n/**\n * Defines how a card can be refreshed by making a request to the target Bot.\n */\nexport interface IRefreshDefinition {\n  /**\n   * The Action.Execute action to invoke to refresh the card.\n   */\n  action?: IExecuteAction;\n  /**\n   * The list of user Ids for which the card will be automatically refreshed. In Teams, in chats or channels with more than 60 users, the card will automatically refresh only for users specified in the userIds list. Other users will have to manually click on a \"refresh\" button. In contexts with fewer than 60 users, the card will automatically refresh for all users.\n   */\n  userIds?: string[];\n}\n\nexport type RefreshDefinitionOptions = IRefreshDefinition;\n\n/**\n * Defines how a card can be refreshed by making a request to the target Bot.\n */\nexport class RefreshDefinition implements IRefreshDefinition {\n  /**\n   * The Action.Execute action to invoke to refresh the card.\n   */\n  action?: IExecuteAction;\n  /**\n   * The list of user Ids for which the card will be automatically refreshed. In Teams, in chats or channels with more than 60 users, the card will automatically refresh only for users specified in the userIds list. Other users will have to manually click on a \"refresh\" button. In contexts with fewer than 60 users, the card will automatically refresh for all users.\n   */\n  userIds?: string[];\n\n  constructor(options: RefreshDefinitionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IRefreshDefinition): RefreshDefinition {\n    return new RefreshDefinition(options);\n  }\n\n  withAction(action: IExecuteAction): this {\n    this.action = action;\n    return this;\n  }\n\n  withUserIds(...userIds: string[]): this {\n    this.userIds = userIds;\n    return this;\n  }\n}\n\n/**\n * Defines authentication information associated with a card. For more information, refer to the [Bot Framework OAuthCard type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.oauthcard)\n */\nexport interface IAuthentication {\n  /**\n   * The text that can be displayed to the end user when prompting them to authenticate.\n   */\n  text?: string;\n  /**\n   * The identifier for registered OAuth connection setting information.\n   */\n  connectionName?: string;\n  /**\n   * The buttons that should be displayed to the user when prompting for authentication. The array MUST contain one button of type “signin”. Other button types are not currently supported.\n   */\n  buttons?: IAuthCardButton[];\n  /**\n   * Provides information required to enable on-behalf-of single sign-on user authentication.\n   */\n  tokenExchangeResource?: ITokenExchangeResource;\n}\n\nexport type AuthenticationOptions = IAuthentication;\n\n/**\n * Defines authentication information associated with a card. For more information, refer to the [Bot Framework OAuthCard type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.oauthcard)\n */\nexport class Authentication implements IAuthentication {\n  /**\n   * The text that can be displayed to the end user when prompting them to authenticate.\n   */\n  text?: string;\n  /**\n   * The identifier for registered OAuth connection setting information.\n   */\n  connectionName?: string;\n  /**\n   * The buttons that should be displayed to the user when prompting for authentication. The array MUST contain one button of type “signin”. Other button types are not currently supported.\n   */\n  buttons?: IAuthCardButton[];\n  /**\n   * Provides information required to enable on-behalf-of single sign-on user authentication.\n   */\n  tokenExchangeResource?: ITokenExchangeResource;\n\n  constructor(options: AuthenticationOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IAuthentication): Authentication {\n    return new Authentication(options);\n  }\n\n  withText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  withConnectionName(connectionName: string): this {\n    this.connectionName = connectionName;\n    return this;\n  }\n\n  withButtons(...buttons: IAuthCardButton[]): this {\n    this.buttons = buttons;\n    return this;\n  }\n\n  withTokenExchangeResource(tokenExchangeResource: ITokenExchangeResource): this {\n    this.tokenExchangeResource = tokenExchangeResource;\n    return this;\n  }\n}\n\n/**\n * Defines a button as displayed when prompting a user to authenticate. For more information, refer to the [Bot Framework CardAction type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.cardaction).\n */\nexport interface IAuthCardButton {\n  /**\n   * Must be **signin**.\n   */\n  type?: string;\n  /**\n   * The caption of the button.\n   */\n  title?: string;\n  /**\n   * A URL to an image to display alongside the button’s caption.\n   */\n  image?: string;\n  /**\n   * The value associated with the button. The meaning of value depends on the button’s type.\n   */\n  value?: string;\n}\n\nexport type AuthCardButtonOptions = IAuthCardButton;\n\n/**\n * Defines a button as displayed when prompting a user to authenticate. For more information, refer to the [Bot Framework CardAction type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.cardaction).\n */\nexport class AuthCardButton implements IAuthCardButton {\n  /**\n   * Must be **signin**.\n   */\n  type?: string;\n  /**\n   * The caption of the button.\n   */\n  title?: string;\n  /**\n   * A URL to an image to display alongside the button’s caption.\n   */\n  image?: string;\n  /**\n   * The value associated with the button. The meaning of value depends on the button’s type.\n   */\n  value?: string;\n\n  constructor(options: AuthCardButtonOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IAuthCardButton): AuthCardButton {\n    return new AuthCardButton(options);\n  }\n\n  withType(type: string): this {\n    this.type = type;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withImage(image: string): this {\n    this.image = image;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n}\n\n/**\n * Defines information required to enable on-behalf-of single sign-on user authentication. For more information, refer to the [Bot Framework TokenExchangeResource type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.tokenexchangeresource)\n */\nexport interface ITokenExchangeResource {\n  /**\n   * The unique identified of this token exchange instance.\n   */\n  id?: string;\n  /**\n   * An application ID or resource identifier with which to exchange a token on behalf of. This property is identity provider- and application-specific.\n   */\n  uri?: string;\n  /**\n   * An identifier for the identity provider with which to attempt a token exchange.\n   */\n  providerId?: string;\n}\n\nexport type TokenExchangeResourceOptions = ITokenExchangeResource;\n\n/**\n * Defines information required to enable on-behalf-of single sign-on user authentication. For more information, refer to the [Bot Framework TokenExchangeResource type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.tokenexchangeresource)\n */\nexport class TokenExchangeResource implements ITokenExchangeResource {\n  /**\n   * The unique identified of this token exchange instance.\n   */\n  id?: string;\n  /**\n   * An application ID or resource identifier with which to exchange a token on behalf of. This property is identity provider- and application-specific.\n   */\n  uri?: string;\n  /**\n   * An identifier for the identity provider with which to attempt a token exchange.\n   */\n  providerId?: string;\n\n  constructor(options: TokenExchangeResourceOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ITokenExchangeResource): TokenExchangeResource {\n    return new TokenExchangeResource(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withUri(uri: string): this {\n    this.uri = uri;\n    return this;\n  }\n\n  withProviderId(providerId: string): this {\n    this.providerId = providerId;\n    return this;\n  }\n}\n\n/**\n * Represents a set of Teams-specific properties on a card.\n */\nexport interface ITeamsCardProperties {\n  /**\n   * Controls the width of the card in a Teams chat.\n\nNote that setting `width` to \"full\" will not actually stretch the card to the \"full width\" of the chat pane. It will only make the card wider than when the `width` property isn't set.\n   */\n  width?: 'full';\n  /**\n   * The Teams-specific entities associated with the card.\n   */\n  entities?: IMention[];\n}\n\nexport type TeamsCardPropertiesOptions = ITeamsCardProperties;\n\n/**\n * Represents a set of Teams-specific properties on a card.\n */\nexport class TeamsCardProperties implements ITeamsCardProperties {\n  /**\n   * Controls the width of the card in a Teams chat.\n\nNote that setting `width` to \"full\" will not actually stretch the card to the \"full width\" of the chat pane. It will only make the card wider than when the `width` property isn't set.\n   */\n  width?: 'full';\n  /**\n   * The Teams-specific entities associated with the card.\n   */\n  entities?: IMention[];\n\n  constructor(options: TeamsCardPropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ITeamsCardProperties): TeamsCardProperties {\n    return new TeamsCardProperties(options);\n  }\n\n  withWidth(width: 'full'): this {\n    this.width = width;\n    return this;\n  }\n\n  withEntities(...entities: IMention[]): this {\n    this.entities = entities;\n    return this;\n  }\n}\n\n/**\n * Represents a mention to a person.\n */\nexport interface IMention {\n  /**\n   * Must be **mention**.\n   */\n  readonly type: 'mention';\n  /**\n   * The text that will be substituted with the mention.\n   */\n  text?: string;\n  /**\n   * Defines the entity being mentioned.\n   */\n  mentioned?: IMentionedEntity;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IMention.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Mention, false otherwise.\n */\nexport function isMention(value: unknown): value is IMention {\n  const obj = value as IMention;\n  return typeof obj === 'object' && obj.type === 'mention';\n}\n\nexport type MentionOptions = Omit<IMention, 'type'>;\n\n/**\n * Represents a mention to a person.\n */\nexport class Mention implements IMention {\n  /**\n   * Must be **mention**.\n   */\n  readonly type = 'mention';\n  /**\n   * The text that will be substituted with the mention.\n   */\n  text?: string;\n  /**\n   * Defines the entity being mentioned.\n   */\n  mentioned?: IMentionedEntity;\n\n  constructor(options: MentionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IMention, 'type'>): Mention {\n    return new Mention(options);\n  }\n\n  withText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  withMentioned(mentioned: IMentionedEntity): this {\n    this.mentioned = mentioned;\n    return this;\n  }\n}\n\n/**\n * Represents a mentioned person or tag.\n */\nexport interface IMentionedEntity {\n  /**\n   * The Id of a person (typically a Microsoft Entra user Id) or tag.\n   */\n  id?: string;\n  /**\n   * The name of the mentioned entity.\n   */\n  name?: string;\n  /**\n   * The type of the mentioned entity.\n   */\n  mentionType?: MentionType;\n}\n\nexport type MentionedEntityOptions = IMentionedEntity;\n\n/**\n * Represents a mentioned person or tag.\n */\nexport class MentionedEntity implements IMentionedEntity {\n  /**\n   * The Id of a person (typically a Microsoft Entra user Id) or tag.\n   */\n  id?: string;\n  /**\n   * The name of the mentioned entity.\n   */\n  name?: string;\n  /**\n   * The type of the mentioned entity.\n   */\n  mentionType?: MentionType;\n\n  constructor(options: MentionedEntityOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IMentionedEntity): MentionedEntity {\n    return new MentionedEntity(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  withMentionType(mentionType: MentionType): this {\n    this.mentionType = mentionType;\n    return this;\n  }\n}\n\n/**\n * Card-level metadata.\n */\nexport interface ICardMetadata {\n  /**\n   * The URL the card originates from. When `webUrl` is set, the card is dubbed an **Adaptive Card-based Loop Component** and, when pasted in Teams or other Loop Component-capable host applications, the URL will unfurl to the same exact card.\n   */\n  webUrl?: string;\n}\n\nexport type CardMetadataOptions = ICardMetadata;\n\n/**\n * Card-level metadata.\n */\nexport class CardMetadata implements ICardMetadata {\n  /**\n   * The URL the card originates from. When `webUrl` is set, the card is dubbed an **Adaptive Card-based Loop Component** and, when pasted in Teams or other Loop Component-capable host applications, the URL will unfurl to the same exact card.\n   */\n  webUrl?: string;\n\n  constructor(options: CardMetadataOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ICardMetadata): CardMetadata {\n    return new CardMetadata(options);\n  }\n\n  withWebUrl(webUrl: string): this {\n    this.webUrl = webUrl;\n    return this;\n  }\n}\n\n/**\n * A container for other elements. Use containers for styling purposes and/or to logically group a set of elements together, which can be especially useful when used with Action.ToggleVisibility.\n */\nexport interface IContainer {\n  /**\n   * Must be **Container**.\n   */\n  readonly type: 'Container';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The elements in the container.\n   */\n  items: CardElementArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IContainer.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Container, false otherwise.\n */\nexport function isContainer(value: unknown): value is IContainer {\n  const obj = value as IContainer;\n  return typeof obj === 'object' && obj.type === 'Container';\n}\n\nexport type ContainerOptions = Omit<IContainer, 'type' | 'items'>;\n\n/**\n * A container for other elements. Use containers for styling purposes and/or to logically group a set of elements together, which can be especially useful when used with Action.ToggleVisibility.\n */\nexport class Container implements IContainer {\n  /**\n   * Must be **Container**.\n   */\n  readonly type = 'Container';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The elements in the container.\n   */\n  items: CardElementArray;\n\n  constructor(...items: CardElementArray) {\n    this.items = items;\n  }\n\n  withOptions(value: ContainerOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withShowBorder(showBorder = true): this {\n    this.showBorder = showBorder;\n    return this;\n  }\n\n  withRoundedCorners(roundedCorners = true): this {\n    this.roundedCorners = roundedCorners;\n    return this;\n  }\n\n  withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this {\n    this.layouts = layouts;\n    return this;\n  }\n\n  withBleed(bleed = true): this {\n    this.bleed = bleed;\n    return this;\n  }\n\n  withMinHeight(minHeight: string): this {\n    this.minHeight = minHeight;\n    return this;\n  }\n\n  withBackgroundImage(backgroundImage: string | IBackgroundImage): this {\n    this.backgroundImage = backgroundImage;\n    return this;\n  }\n\n  withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this {\n    this.verticalContentAlignment = verticalContentAlignment;\n    return this;\n  }\n\n  withRtl(rtl: boolean): this {\n    this.rtl = rtl;\n    return this;\n  }\n\n  withMaxHeight(maxHeight: string): this {\n    this.maxHeight = maxHeight;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withItems(...items: CardElementArray): this {\n    this.items = items;\n    return this;\n  }\n}\n\n/**\n * Displays a set of action, which can be placed anywhere in the card.\n */\nexport interface IActionSet {\n  /**\n   * Must be **ActionSet**.\n   */\n  readonly type: 'ActionSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The actions in the set.\n   */\n  actions: ActionArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IActionSet.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ActionSet, false otherwise.\n */\nexport function isActionSet(value: unknown): value is IActionSet {\n  const obj = value as IActionSet;\n  return typeof obj === 'object' && obj.type === 'ActionSet';\n}\n\nexport type ActionSetOptions = Omit<IActionSet, 'type' | 'actions'>;\n\n/**\n * Displays a set of action, which can be placed anywhere in the card.\n */\nexport class ActionSet implements IActionSet {\n  /**\n   * Must be **ActionSet**.\n   */\n  readonly type = 'ActionSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The actions in the set.\n   */\n  actions: ActionArray;\n\n  constructor(...actions: ActionArray) {\n    this.actions = actions;\n  }\n\n  withOptions(value: ActionSetOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withActions(...actions: ActionArray): this {\n    this.actions = actions;\n    return this;\n  }\n}\n\n/**\n * Splits the available horizontal space into separate columns, so elements can be organized in a row.\n */\nexport interface IColumnSet {\n  /**\n   * Must be **ColumnSet**.\n   */\n  readonly type: 'ColumnSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The columns in the set.\n   */\n  columns?: ColumnArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IColumnSet.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ColumnSet, false otherwise.\n */\nexport function isColumnSet(value: unknown): value is IColumnSet {\n  const obj = value as IColumnSet;\n  return typeof obj === 'object' && obj.type === 'ColumnSet';\n}\n\nexport type ColumnSetOptions = Omit<IColumnSet, 'type'>;\n\n/**\n * Splits the available horizontal space into separate columns, so elements can be organized in a row.\n */\nexport class ColumnSet implements IColumnSet {\n  /**\n   * Must be **ColumnSet**.\n   */\n  readonly type = 'ColumnSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The columns in the set.\n   */\n  columns?: ColumnArray;\n\n  constructor(options: ColumnSetOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IColumnSet, 'type'>): ColumnSet {\n    return new ColumnSet(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withShowBorder(showBorder = true): this {\n    this.showBorder = showBorder;\n    return this;\n  }\n\n  withRoundedCorners(roundedCorners = true): this {\n    this.roundedCorners = roundedCorners;\n    return this;\n  }\n\n  withBleed(bleed = true): this {\n    this.bleed = bleed;\n    return this;\n  }\n\n  withMinHeight(minHeight: string): this {\n    this.minHeight = minHeight;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withColumns(...columns: ColumnArray): this {\n    this.columns = columns;\n    return this;\n  }\n}\n\n/**\n * A media element, that makes it possible to embed videos inside a card.\n */\nexport interface IMedia {\n  /**\n   * Must be **Media**.\n   */\n  readonly type: 'Media';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The sources for the media. For YouTube, Dailymotion and Vimeo, only one source can be specified.\n   */\n  sources?: IMediaSource[];\n  /**\n   * The caption sources for the media. Caption sources are not used for YouTube, Dailymotion or Vimeo sources.\n   */\n  captionSources?: ICaptionSource[];\n  /**\n   * The URL of the poster image to display.\n   */\n  poster?: string;\n  /**\n   * The alternate text for the media, used for accessibility purposes.\n   */\n  altText?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IMedia.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Media, false otherwise.\n */\nexport function isMedia(value: unknown): value is IMedia {\n  const obj = value as IMedia;\n  return typeof obj === 'object' && obj.type === 'Media';\n}\n\nexport type MediaOptions = Omit<IMedia, 'type'>;\n\n/**\n * A media element, that makes it possible to embed videos inside a card.\n */\nexport class Media implements IMedia {\n  /**\n   * Must be **Media**.\n   */\n  readonly type = 'Media';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The sources for the media. For YouTube, Dailymotion and Vimeo, only one source can be specified.\n   */\n  sources?: IMediaSource[];\n  /**\n   * The caption sources for the media. Caption sources are not used for YouTube, Dailymotion or Vimeo sources.\n   */\n  captionSources?: ICaptionSource[];\n  /**\n   * The URL of the poster image to display.\n   */\n  poster?: string;\n  /**\n   * The alternate text for the media, used for accessibility purposes.\n   */\n  altText?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: MediaOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IMedia, 'type'>): Media {\n    return new Media(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withSources(...sources: IMediaSource[]): this {\n    this.sources = sources;\n    return this;\n  }\n\n  withCaptionSources(...captionSources: ICaptionSource[]): this {\n    this.captionSources = captionSources;\n    return this;\n  }\n\n  withPoster(poster: string): this {\n    this.poster = poster;\n    return this;\n  }\n\n  withAltText(altText: string): this {\n    this.altText = altText;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Defines the source URL of a media stream. YouTube, Dailymotion, Vimeo and Microsoft Stream URLs are supported.\n */\nexport interface IMediaSource {\n  /**\n   * The MIME type of the source.\n   */\n  mimeType?: string;\n  /**\n   * The URL of the source.\n   */\n  url?: string;\n}\n\nexport type MediaSourceOptions = IMediaSource;\n\n/**\n * Defines the source URL of a media stream. YouTube, Dailymotion, Vimeo and Microsoft Stream URLs are supported.\n */\nexport class MediaSource implements IMediaSource {\n  /**\n   * The MIME type of the source.\n   */\n  mimeType?: string;\n  /**\n   * The URL of the source.\n   */\n  url?: string;\n\n  constructor(options: MediaSourceOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IMediaSource): MediaSource {\n    return new MediaSource(options);\n  }\n\n  withMimeType(mimeType: string): this {\n    this.mimeType = mimeType;\n    return this;\n  }\n\n  withUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n}\n\n/**\n * Defines a source URL for a video captions.\n */\nexport interface ICaptionSource {\n  /**\n   * The MIME type of the source.\n   */\n  mimeType?: string;\n  /**\n   * The URL of the source.\n   */\n  url?: string;\n  /**\n   * The label of this caption source.\n   */\n  label?: string;\n}\n\nexport type CaptionSourceOptions = ICaptionSource;\n\n/**\n * Defines a source URL for a video captions.\n */\nexport class CaptionSource implements ICaptionSource {\n  /**\n   * The MIME type of the source.\n   */\n  mimeType?: string;\n  /**\n   * The URL of the source.\n   */\n  url?: string;\n  /**\n   * The label of this caption source.\n   */\n  label?: string;\n\n  constructor(options: CaptionSourceOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ICaptionSource): CaptionSource {\n    return new CaptionSource(options);\n  }\n\n  withMimeType(mimeType: string): this {\n    this.mimeType = mimeType;\n    return this;\n  }\n\n  withUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n}\n\n/**\n * A rich text block that displays formatted text.\n */\nexport interface IRichTextBlock {\n  /**\n   * Must be **RichTextBlock**.\n   */\n  readonly type: 'RichTextBlock';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The inlines making up the rich text block.\n   */\n  inlines?: RichTextBlockInlineArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IRichTextBlock.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of RichTextBlock, false otherwise.\n */\nexport function isRichTextBlock(value: unknown): value is IRichTextBlock {\n  const obj = value as IRichTextBlock;\n  return typeof obj === 'object' && obj.type === 'RichTextBlock';\n}\n\nexport type RichTextBlockOptions = Omit<IRichTextBlock, 'type'>;\n\n/**\n * A rich text block that displays formatted text.\n */\nexport class RichTextBlock implements IRichTextBlock {\n  /**\n   * Must be **RichTextBlock**.\n   */\n  readonly type = 'RichTextBlock';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The inlines making up the rich text block.\n   */\n  inlines?: RichTextBlockInlineArray;\n\n  constructor(options: RichTextBlockOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IRichTextBlock, 'type'>): RichTextBlock {\n    return new RichTextBlock(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withInlines(...inlines: RichTextBlockInlineArray): this {\n    this.inlines = inlines;\n    return this;\n  }\n}\n\n/**\n * Use tables to display data in a tabular way, with rows, columns and cells.\n */\nexport interface ITable {\n  /**\n   * Must be **Table**.\n   */\n  readonly type: 'Table';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The columns in the table.\n   */\n  columns?: IColumnDefinition[];\n  /**\n   * Controls whether the first row of the table should be treated as a header.\n   */\n  firstRowAsHeaders?: boolean;\n  /**\n   * Controls if grid lines should be displayed.\n   */\n  showGridLines?: boolean;\n  /**\n   * The style of the grid lines between cells.\n   */\n  gridStyle?: ContainerStyle;\n  /**\n   * Controls how the content of every cell in the table should be horizontally aligned by default.\n   */\n  horizontalCellContentAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of every cell in the table should be vertically aligned by default.\n   */\n  verticalCellContentAlignment?: VerticalAlignment;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The rows of the table.\n   */\n  rows?: TableRowArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ITable.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Table, false otherwise.\n */\nexport function isTable(value: unknown): value is ITable {\n  const obj = value as ITable;\n  return typeof obj === 'object' && obj.type === 'Table';\n}\n\nexport type TableOptions = Omit<ITable, 'type'>;\n\n/**\n * Use tables to display data in a tabular way, with rows, columns and cells.\n */\nexport class Table implements ITable {\n  /**\n   * Must be **Table**.\n   */\n  readonly type = 'Table';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The columns in the table.\n   */\n  columns?: IColumnDefinition[];\n  /**\n   * Controls whether the first row of the table should be treated as a header.\n   */\n  firstRowAsHeaders?: boolean;\n  /**\n   * Controls if grid lines should be displayed.\n   */\n  showGridLines?: boolean;\n  /**\n   * The style of the grid lines between cells.\n   */\n  gridStyle?: ContainerStyle;\n  /**\n   * Controls how the content of every cell in the table should be horizontally aligned by default.\n   */\n  horizontalCellContentAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of every cell in the table should be vertically aligned by default.\n   */\n  verticalCellContentAlignment?: VerticalAlignment;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The rows of the table.\n   */\n  rows?: TableRowArray;\n\n  constructor(options: TableOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ITable, 'type'>): Table {\n    return new Table(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withShowBorder(showBorder = true): this {\n    this.showBorder = showBorder;\n    return this;\n  }\n\n  withRoundedCorners(roundedCorners = true): this {\n    this.roundedCorners = roundedCorners;\n    return this;\n  }\n\n  withColumns(...columns: IColumnDefinition[]): this {\n    this.columns = columns;\n    return this;\n  }\n\n  withFirstRowAsHeaders(firstRowAsHeaders = false): this {\n    this.firstRowAsHeaders = firstRowAsHeaders;\n    return this;\n  }\n\n  withShowGridLines(showGridLines = false): this {\n    this.showGridLines = showGridLines;\n    return this;\n  }\n\n  withGridStyle(gridStyle: ContainerStyle): this {\n    this.gridStyle = gridStyle;\n    return this;\n  }\n\n  withHorizontalCellContentAlignment(horizontalCellContentAlignment: HorizontalAlignment): this {\n    this.horizontalCellContentAlignment = horizontalCellContentAlignment;\n    return this;\n  }\n\n  withVerticalCellContentAlignment(verticalCellContentAlignment: VerticalAlignment): this {\n    this.verticalCellContentAlignment = verticalCellContentAlignment;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withRows(...rows: TableRowArray): this {\n    this.rows = rows;\n    return this;\n  }\n}\n\n/**\n * Defines a column in a Table element.\n */\nexport interface IColumnDefinition {\n  /**\n   * Controls how the content of every cell in the table should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table.\n   */\n  horizontalCellContentAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of every cell in the column should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table.\n   */\n  verticalCellContentAlignment?: VerticalAlignment;\n  /**\n   * The width of the column in the table, expressed as either a percentage of the available width or in pixels, using the `<number>px` format.\n   */\n  width?: string | number;\n}\n\nexport type ColumnDefinitionOptions = IColumnDefinition;\n\n/**\n * Defines a column in a Table element.\n */\nexport class ColumnDefinition implements IColumnDefinition {\n  /**\n   * Controls how the content of every cell in the table should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table.\n   */\n  horizontalCellContentAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of every cell in the column should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table.\n   */\n  verticalCellContentAlignment?: VerticalAlignment;\n  /**\n   * The width of the column in the table, expressed as either a percentage of the available width or in pixels, using the `<number>px` format.\n   */\n  width?: string | number;\n\n  constructor(options: ColumnDefinitionOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IColumnDefinition): ColumnDefinition {\n    return new ColumnDefinition(options);\n  }\n\n  withHorizontalCellContentAlignment(horizontalCellContentAlignment: HorizontalAlignment): this {\n    this.horizontalCellContentAlignment = horizontalCellContentAlignment;\n    return this;\n  }\n\n  withVerticalCellContentAlignment(verticalCellContentAlignment: VerticalAlignment): this {\n    this.verticalCellContentAlignment = verticalCellContentAlignment;\n    return this;\n  }\n\n  withWidth(width: string | number): this {\n    this.width = width;\n    return this;\n  }\n}\n\n/**\n * A block of text, optionally formatted using Markdown.\n */\nexport interface ITextBlock {\n  /**\n   * Must be **TextBlock**.\n   */\n  readonly type: 'TextBlock';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The text to display. A subset of markdown is supported.\n   */\n  text: string;\n  /**\n   * The size of the text.\n   */\n  size?: TextSize;\n  /**\n   * The weight of the text.\n   */\n  weight?: TextWeight;\n  /**\n   * The color of the text.\n   */\n  color?: TextColor;\n  /**\n   * Controls whether the text should be renderer using a subtler variant of the select color.\n   */\n  isSubtle?: boolean;\n  /**\n   * The type of font to use for rendering.\n   */\n  fontType?: FontType;\n  /**\n   * Controls if the text should wrap.\n   */\n  wrap?: boolean;\n  /**\n   * The maximum number of lines to display.\n   */\n  maxLines?: number;\n  /**\n   * The style of the text.\n   */\n  style?: 'default' | 'columnHeader' | 'heading';\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ITextBlock.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of TextBlock, false otherwise.\n */\nexport function isTextBlock(value: unknown): value is ITextBlock {\n  const obj = value as ITextBlock;\n  return typeof obj === 'object' && obj.type === 'TextBlock';\n}\n\nexport type TextBlockOptions = Omit<ITextBlock, 'type' | 'text'>;\n\n/**\n * A block of text, optionally formatted using Markdown.\n */\nexport class TextBlock implements ITextBlock {\n  /**\n   * Must be **TextBlock**.\n   */\n  readonly type = 'TextBlock';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The text to display. A subset of markdown is supported.\n   */\n  text: string;\n  /**\n   * The size of the text.\n   */\n  size?: TextSize;\n  /**\n   * The weight of the text.\n   */\n  weight?: TextWeight;\n  /**\n   * The color of the text.\n   */\n  color?: TextColor;\n  /**\n   * Controls whether the text should be renderer using a subtler variant of the select color.\n   */\n  isSubtle?: boolean;\n  /**\n   * The type of font to use for rendering.\n   */\n  fontType?: FontType;\n  /**\n   * Controls if the text should wrap.\n   */\n  wrap?: boolean;\n  /**\n   * The maximum number of lines to display.\n   */\n  maxLines?: number;\n  /**\n   * The style of the text.\n   */\n  style?: 'default' | 'columnHeader' | 'heading';\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(text: string, options: TextBlockOptions = {}) {\n    Object.assign(this, options);\n    this.text = text;\n  }\n\n  static from(options: Omit<ITextBlock, 'type'>): TextBlock {\n    return new TextBlock(options.text, options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  withSize(size: TextSize): this {\n    this.size = size;\n    return this;\n  }\n\n  withWeight(weight: TextWeight): this {\n    this.weight = weight;\n    return this;\n  }\n\n  withColor(color: TextColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withIsSubtle(isSubtle: boolean): this {\n    this.isSubtle = isSubtle;\n    return this;\n  }\n\n  withFontType(fontType: FontType): this {\n    this.fontType = fontType;\n    return this;\n  }\n\n  withWrap(wrap = true): this {\n    this.wrap = wrap;\n    return this;\n  }\n\n  withMaxLines(maxLines: number): this {\n    this.maxLines = maxLines;\n    return this;\n  }\n\n  withStyle(style: 'default' | 'columnHeader' | 'heading'): this {\n    this.style = style;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A set of facts, displayed as a table or a vertical list when horizontal space is constrained.\n */\nexport interface IFactSet {\n  /**\n   * Must be **FactSet**.\n   */\n  readonly type: 'FactSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The facts in the set.\n   */\n  facts: IFact[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IFactSet.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of FactSet, false otherwise.\n */\nexport function isFactSet(value: unknown): value is IFactSet {\n  const obj = value as IFactSet;\n  return typeof obj === 'object' && obj.type === 'FactSet';\n}\n\nexport type FactSetOptions = Omit<IFactSet, 'type' | 'facts'>;\n\n/**\n * A set of facts, displayed as a table or a vertical list when horizontal space is constrained.\n */\nexport class FactSet implements IFactSet {\n  /**\n   * Must be **FactSet**.\n   */\n  readonly type = 'FactSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The facts in the set.\n   */\n  facts: IFact[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(...facts: IFact[]) {\n    this.facts = facts;\n  }\n\n  withOptions(value: FactSetOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withFacts(...facts: IFact[]): this {\n    this.facts = facts;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A fact in a FactSet element.\n */\nexport interface IFact {\n  /**\n   * The fact's title.\n   */\n  title: string;\n  /**\n   * The fact's value.\n   */\n  value: string;\n}\n\nexport type FactOptions = IFact;\n\n/**\n * A fact in a FactSet element.\n */\nexport class Fact implements IFact {\n  /**\n   * The fact's title.\n   */\n  title: string;\n  /**\n   * The fact's value.\n   */\n  value: string;\n\n  constructor(title: string, value: string) {\n    this.title = title;\n    this.value = value;\n  }\n\n  static from(options: IFact): Fact {\n    return new Fact(options.title, options.value);\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n}\n\n/**\n * A set of images, displayed side-by-side and wrapped across multiple rows as needed.\n */\nexport interface IImageSet {\n  /**\n   * Must be **ImageSet**.\n   */\n  readonly type: 'ImageSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The images in the set.\n   */\n  images: IImage[];\n  /**\n   * The size to use to render all images in the set.\n   */\n  imageSize?: ImageSize;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IImageSet.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ImageSet, false otherwise.\n */\nexport function isImageSet(value: unknown): value is IImageSet {\n  const obj = value as IImageSet;\n  return typeof obj === 'object' && obj.type === 'ImageSet';\n}\n\nexport type ImageSetOptions = Omit<IImageSet, 'type' | 'images'>;\n\n/**\n * A set of images, displayed side-by-side and wrapped across multiple rows as needed.\n */\nexport class ImageSet implements IImageSet {\n  /**\n   * Must be **ImageSet**.\n   */\n  readonly type = 'ImageSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The images in the set.\n   */\n  images: IImage[];\n  /**\n   * The size to use to render all images in the set.\n   */\n  imageSize?: ImageSize;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(...images: IImage[]) {\n    this.images = images;\n  }\n\n  withOptions(value: ImageSetOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withImages(...images: IImage[]): this {\n    this.images = images;\n    return this;\n  }\n\n  withImageSize(imageSize: ImageSize): this {\n    this.imageSize = imageSize;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A standalone image element.\n */\nexport interface IImage {\n  /**\n   * Must be **Image**.\n   */\n  readonly type: 'Image';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.\n   */\n  url: string;\n  /**\n   * The alternate text for the image, used for accessibility purposes.\n   */\n  altText?: string;\n  /**\n   * The background color of the image.\n   */\n  backgroundColor?: string;\n  /**\n   * The style of the image.\n   */\n  style?: ImageStyle;\n  /**\n   * The size of the image.\n   */\n  size?: Size;\n  /**\n   * The width of the image.\n   */\n  width?: 'auto' | 'stretch' | string;\n  /**\n   * An Action that will be invoked when the image is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * Controls if the image can be expanded to full screen.\n   */\n  allowExpand?: boolean;\n  /**\n   * Teams-specific metadata associated with the image.\n   */\n  msTeams?: ITeamsImageProperties;\n  /**\n   * The height of the image.\n   */\n  height?: 'auto' | 'stretch' | string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IImage.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Image, false otherwise.\n */\nexport function isImage(value: unknown): value is IImage {\n  const obj = value as IImage;\n  return typeof obj === 'object' && obj.type === 'Image';\n}\n\nexport type ImageOptions = Omit<IImage, 'type' | 'url'>;\n\n/**\n * A standalone image element.\n */\nexport class Image implements IImage {\n  /**\n   * Must be **Image**.\n   */\n  readonly type = 'Image';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.\n   */\n  url: string;\n  /**\n   * The alternate text for the image, used for accessibility purposes.\n   */\n  altText?: string;\n  /**\n   * The background color of the image.\n   */\n  backgroundColor?: string;\n  /**\n   * The style of the image.\n   */\n  style?: ImageStyle;\n  /**\n   * The size of the image.\n   */\n  size?: Size;\n  /**\n   * The width of the image.\n   */\n  width?: 'auto' | 'stretch' | string;\n  /**\n   * An Action that will be invoked when the image is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * Controls if the image can be expanded to full screen.\n   */\n  allowExpand?: boolean;\n  /**\n   * Teams-specific metadata associated with the image.\n   */\n  msTeams?: ITeamsImageProperties;\n  /**\n   * The height of the image.\n   */\n  height?: 'auto' | 'stretch' | string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(url: string, options: ImageOptions = {}) {\n    Object.assign(this, options);\n    this.url = url;\n  }\n\n  static from(options: Omit<IImage, 'type'>): Image {\n    return new Image(options.url, options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n\n  withAltText(altText: string): this {\n    this.altText = altText;\n    return this;\n  }\n\n  withBackgroundColor(backgroundColor: string): this {\n    this.backgroundColor = backgroundColor;\n    return this;\n  }\n\n  withStyle(style: ImageStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withSize(size: Size): this {\n    this.size = size;\n    return this;\n  }\n\n  withWidth(width: 'auto' | 'stretch' | string): this {\n    this.width = width;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withAllowExpand(allowExpand = true): this {\n    this.allowExpand = allowExpand;\n    return this;\n  }\n\n  withMsTeams(msTeams: ITeamsImageProperties): this {\n    this.msTeams = msTeams;\n    return this;\n  }\n\n  withHeight(height: 'auto' | 'stretch' | string): this {\n    this.height = height;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents a set of Teams-specific properties on an image.\n */\nexport interface ITeamsImageProperties {\n  /**\n   * Controls if the image is expandable in Teams. This property is equivalent to the Image.allowExpand property.\n   */\n  allowExpand?: boolean;\n}\n\nexport type TeamsImagePropertiesOptions = ITeamsImageProperties;\n\n/**\n * Represents a set of Teams-specific properties on an image.\n */\nexport class TeamsImageProperties implements ITeamsImageProperties {\n  /**\n   * Controls if the image is expandable in Teams. This property is equivalent to the Image.allowExpand property.\n   */\n  allowExpand?: boolean;\n\n  constructor(options: TeamsImagePropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ITeamsImageProperties): TeamsImageProperties {\n    return new TeamsImageProperties(options);\n  }\n\n  withAllowExpand(allowExpand: boolean): this {\n    this.allowExpand = allowExpand;\n    return this;\n  }\n}\n\n/**\n * An input to allow the user to enter text.\n */\nexport interface ITextInput {\n  /**\n   * Must be **Input.Text**.\n   */\n  readonly type: 'Input.Text';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: string;\n  /**\n   * The maximum length of the text in the input.\n   */\n  maxLength?: number;\n  /**\n   * Controls if the input should allow multiple lines of text.\n   */\n  isMultiline?: boolean;\n  /**\n   * The text to display as a placeholder when the user hasn't entered a value.\n   */\n  placeholder?: string;\n  /**\n   * The style of the input.\n   */\n  style?: InputTextStyle;\n  /**\n   * The action that should be displayed as a button alongside the input. Action.ShowCard is not supported.\n   */\n  inlineAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The regular expression to validate the input.\n   */\n  regex?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ITextInput.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of TextInput, false otherwise.\n */\nexport function isTextInput(value: unknown): value is ITextInput {\n  const obj = value as ITextInput;\n  return typeof obj === 'object' && obj.type === 'Input.Text';\n}\n\nexport type TextInputOptions = Omit<ITextInput, 'type'>;\n\n/**\n * An input to allow the user to enter text.\n */\nexport class TextInput implements ITextInput {\n  /**\n   * Must be **Input.Text**.\n   */\n  readonly type = 'Input.Text';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: string;\n  /**\n   * The maximum length of the text in the input.\n   */\n  maxLength?: number;\n  /**\n   * Controls if the input should allow multiple lines of text.\n   */\n  isMultiline?: boolean;\n  /**\n   * The text to display as a placeholder when the user hasn't entered a value.\n   */\n  placeholder?: string;\n  /**\n   * The style of the input.\n   */\n  style?: InputTextStyle;\n  /**\n   * The action that should be displayed as a button alongside the input. Action.ShowCard is not supported.\n   */\n  inlineAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The regular expression to validate the input.\n   */\n  regex?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: TextInputOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ITextInput, 'type'>): TextInput {\n    return new TextInput(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n\n  withIsRequired(isRequired = true): this {\n    this.isRequired = isRequired;\n    return this;\n  }\n\n  withErrorMessage(errorMessage: string): this {\n    this.errorMessage = errorMessage;\n    return this;\n  }\n\n  withValueChangedAction(valueChangedAction: IResetInputsAction): this {\n    this.valueChangedAction = valueChangedAction;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n\n  withMaxLength(maxLength: number): this {\n    this.maxLength = maxLength;\n    return this;\n  }\n\n  withIsMultiline(isMultiline = true): this {\n    this.isMultiline = isMultiline;\n    return this;\n  }\n\n  withPlaceholder(placeholder: string): this {\n    this.placeholder = placeholder;\n    return this;\n  }\n\n  withStyle(style: InputTextStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withInlineAction(\n    inlineAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.inlineAction = inlineAction;\n    return this;\n  }\n\n  withRegex(regex: string): this {\n    this.regex = regex;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * An input to allow the user to select a date.\n */\nexport interface IDateInput {\n  /**\n   * Must be **Input.Date**.\n   */\n  readonly type: 'Input.Date';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input, in the `YYYY-MM-DD` format.\n   */\n  value?: string;\n  /**\n   * The text to display as a placeholder when the user has not selected a date.\n   */\n  placeholder?: string;\n  /**\n   * The minimum date that can be selected.\n   */\n  min?: string;\n  /**\n   * The maximum date that can be selected.\n   */\n  max?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IDateInput.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of DateInput, false otherwise.\n */\nexport function isDateInput(value: unknown): value is IDateInput {\n  const obj = value as IDateInput;\n  return typeof obj === 'object' && obj.type === 'Input.Date';\n}\n\nexport type DateInputOptions = Omit<IDateInput, 'type'>;\n\n/**\n * An input to allow the user to select a date.\n */\nexport class DateInput implements IDateInput {\n  /**\n   * Must be **Input.Date**.\n   */\n  readonly type = 'Input.Date';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input, in the `YYYY-MM-DD` format.\n   */\n  value?: string;\n  /**\n   * The text to display as a placeholder when the user has not selected a date.\n   */\n  placeholder?: string;\n  /**\n   * The minimum date that can be selected.\n   */\n  min?: string;\n  /**\n   * The maximum date that can be selected.\n   */\n  max?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: DateInputOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IDateInput, 'type'>): DateInput {\n    return new DateInput(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n\n  withIsRequired(isRequired = true): this {\n    this.isRequired = isRequired;\n    return this;\n  }\n\n  withErrorMessage(errorMessage: string): this {\n    this.errorMessage = errorMessage;\n    return this;\n  }\n\n  withValueChangedAction(valueChangedAction: IResetInputsAction): this {\n    this.valueChangedAction = valueChangedAction;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n\n  withPlaceholder(placeholder: string): this {\n    this.placeholder = placeholder;\n    return this;\n  }\n\n  withMin(min: string): this {\n    this.min = min;\n    return this;\n  }\n\n  withMax(max: string): this {\n    this.max = max;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * An input to allow the user to select a time.\n */\nexport interface ITimeInput {\n  /**\n   * Must be **Input.Time**.\n   */\n  readonly type: 'Input.Time';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input, in the `HH:MM` format.\n   */\n  value?: string;\n  /**\n   * The text to display as a placeholder when the user hasn't entered a value.\n   */\n  placeholder?: string;\n  /**\n   * The minimum time that can be selected, in the `HH:MM` format.\n   */\n  min?: string;\n  /**\n   * The maximum time that can be selected, in the `HH:MM` format.\n   */\n  max?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ITimeInput.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of TimeInput, false otherwise.\n */\nexport function isTimeInput(value: unknown): value is ITimeInput {\n  const obj = value as ITimeInput;\n  return typeof obj === 'object' && obj.type === 'Input.Time';\n}\n\nexport type TimeInputOptions = Omit<ITimeInput, 'type'>;\n\n/**\n * An input to allow the user to select a time.\n */\nexport class TimeInput implements ITimeInput {\n  /**\n   * Must be **Input.Time**.\n   */\n  readonly type = 'Input.Time';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input, in the `HH:MM` format.\n   */\n  value?: string;\n  /**\n   * The text to display as a placeholder when the user hasn't entered a value.\n   */\n  placeholder?: string;\n  /**\n   * The minimum time that can be selected, in the `HH:MM` format.\n   */\n  min?: string;\n  /**\n   * The maximum time that can be selected, in the `HH:MM` format.\n   */\n  max?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: TimeInputOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ITimeInput, 'type'>): TimeInput {\n    return new TimeInput(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n\n  withIsRequired(isRequired = true): this {\n    this.isRequired = isRequired;\n    return this;\n  }\n\n  withErrorMessage(errorMessage: string): this {\n    this.errorMessage = errorMessage;\n    return this;\n  }\n\n  withValueChangedAction(valueChangedAction: IResetInputsAction): this {\n    this.valueChangedAction = valueChangedAction;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n\n  withPlaceholder(placeholder: string): this {\n    this.placeholder = placeholder;\n    return this;\n  }\n\n  withMin(min: string): this {\n    this.min = min;\n    return this;\n  }\n\n  withMax(max: string): this {\n    this.max = max;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * An input to allow the user to enter a number.\n */\nexport interface INumberInput {\n  /**\n   * Must be **Input.Number**.\n   */\n  readonly type: 'Input.Number';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: number;\n  /**\n   * The text to display as a placeholder when the user hasn't entered a value.\n   */\n  placeholder?: string;\n  /**\n   * The minimum value that can be entered.\n   */\n  min?: number;\n  /**\n   * The maximum value that can be entered.\n   */\n  max?: number;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type INumberInput.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of NumberInput, false otherwise.\n */\nexport function isNumberInput(value: unknown): value is INumberInput {\n  const obj = value as INumberInput;\n  return typeof obj === 'object' && obj.type === 'Input.Number';\n}\n\nexport type NumberInputOptions = Omit<INumberInput, 'type'>;\n\n/**\n * An input to allow the user to enter a number.\n */\nexport class NumberInput implements INumberInput {\n  /**\n   * Must be **Input.Number**.\n   */\n  readonly type = 'Input.Number';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: number;\n  /**\n   * The text to display as a placeholder when the user hasn't entered a value.\n   */\n  placeholder?: string;\n  /**\n   * The minimum value that can be entered.\n   */\n  min?: number;\n  /**\n   * The maximum value that can be entered.\n   */\n  max?: number;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: NumberInputOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<INumberInput, 'type'>): NumberInput {\n    return new NumberInput(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n\n  withIsRequired(isRequired = true): this {\n    this.isRequired = isRequired;\n    return this;\n  }\n\n  withErrorMessage(errorMessage: string): this {\n    this.errorMessage = errorMessage;\n    return this;\n  }\n\n  withValueChangedAction(valueChangedAction: IResetInputsAction): this {\n    this.valueChangedAction = valueChangedAction;\n    return this;\n  }\n\n  withValue(value: number): this {\n    this.value = value;\n    return this;\n  }\n\n  withPlaceholder(placeholder: string): this {\n    this.placeholder = placeholder;\n    return this;\n  }\n\n  withMin(min: number): this {\n    this.min = min;\n    return this;\n  }\n\n  withMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * An input to allow the user to select between on/off states.\n */\nexport interface IToggleInput {\n  /**\n   * Must be **Input.Toggle**.\n   */\n  readonly type: 'Input.Toggle';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: string;\n  /**\n   * The title (caption) to display next to the toggle.\n   */\n  title: string;\n  /**\n   * The value to send to the Bot when the toggle is on.\n   */\n  valueOn?: string;\n  /**\n   * The value to send to the Bot when the toggle is off.\n   */\n  valueOff?: string;\n  /**\n   * Controls if the title should wrap.\n   */\n  wrap?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IToggleInput.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ToggleInput, false otherwise.\n */\nexport function isToggleInput(value: unknown): value is IToggleInput {\n  const obj = value as IToggleInput;\n  return typeof obj === 'object' && obj.type === 'Input.Toggle';\n}\n\nexport type ToggleInputOptions = Omit<IToggleInput, 'type' | 'title'>;\n\n/**\n * An input to allow the user to select between on/off states.\n */\nexport class ToggleInput implements IToggleInput {\n  /**\n   * Must be **Input.Toggle**.\n   */\n  readonly type = 'Input.Toggle';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: string;\n  /**\n   * The title (caption) to display next to the toggle.\n   */\n  title: string;\n  /**\n   * The value to send to the Bot when the toggle is on.\n   */\n  valueOn?: string;\n  /**\n   * The value to send to the Bot when the toggle is off.\n   */\n  valueOff?: string;\n  /**\n   * Controls if the title should wrap.\n   */\n  wrap?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(title: string, options: ToggleInputOptions = {}) {\n    Object.assign(this, options);\n    this.title = title;\n  }\n\n  static from(options: Omit<IToggleInput, 'type'>): ToggleInput {\n    return new ToggleInput(options.title, options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n\n  withIsRequired(isRequired = true): this {\n    this.isRequired = isRequired;\n    return this;\n  }\n\n  withErrorMessage(errorMessage: string): this {\n    this.errorMessage = errorMessage;\n    return this;\n  }\n\n  withValueChangedAction(valueChangedAction: IResetInputsAction): this {\n    this.valueChangedAction = valueChangedAction;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withValueOn(valueOn: string): this {\n    this.valueOn = valueOn;\n    return this;\n  }\n\n  withValueOff(valueOff: string): this {\n    this.valueOff = valueOff;\n    return this;\n  }\n\n  withWrap(wrap = false): this {\n    this.wrap = wrap;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * An input to allow the user to select one or more values.\n */\nexport interface IChoiceSetInput {\n  /**\n   * Must be **Input.ChoiceSet**.\n   */\n  readonly type: 'Input.ChoiceSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: string;\n  /**\n   * The choices associated with the input.\n   */\n  choices: IChoice[];\n  /**\n   * A Data.Query object that defines the dataset from which to dynamically fetch the choices for the input.\n   */\n  'choices.data'?: IQueryData;\n  /**\n   * Controls whether the input should be displayed as a dropdown (compact) or a list of radio buttons or checkboxes (expanded).\n   */\n  style?: 'compact' | 'expanded' | 'filtered';\n  /**\n   * Controls whether multiple choices can be selected.\n   */\n  isMultiSelect?: boolean;\n  /**\n   * The text to display as a placeholder when the user has not entered any value.\n   */\n  placeholder?: string;\n  /**\n   * Controls if choice titles should wrap.\n   */\n  wrap?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IChoiceSetInput.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ChoiceSetInput, false otherwise.\n */\nexport function isChoiceSetInput(value: unknown): value is IChoiceSetInput {\n  const obj = value as IChoiceSetInput;\n  return typeof obj === 'object' && obj.type === 'Input.ChoiceSet';\n}\n\nexport type ChoiceSetInputOptions = Omit<IChoiceSetInput, 'type' | 'choices'>;\n\n/**\n * An input to allow the user to select one or more values.\n */\nexport class ChoiceSetInput implements IChoiceSetInput {\n  /**\n   * Must be **Input.ChoiceSet**.\n   */\n  readonly type = 'Input.ChoiceSet';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: string;\n  /**\n   * The choices associated with the input.\n   */\n  choices: IChoice[];\n  /**\n   * A Data.Query object that defines the dataset from which to dynamically fetch the choices for the input.\n   */\n  'choices.data'?: IQueryData;\n  /**\n   * Controls whether the input should be displayed as a dropdown (compact) or a list of radio buttons or checkboxes (expanded).\n   */\n  style?: 'compact' | 'expanded' | 'filtered';\n  /**\n   * Controls whether multiple choices can be selected.\n   */\n  isMultiSelect?: boolean;\n  /**\n   * The text to display as a placeholder when the user has not entered any value.\n   */\n  placeholder?: string;\n  /**\n   * Controls if choice titles should wrap.\n   */\n  wrap?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(...choices: IChoice[]) {\n    this.choices = choices;\n  }\n\n  withOptions(value: ChoiceSetInputOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n\n  withIsRequired(isRequired = true): this {\n    this.isRequired = isRequired;\n    return this;\n  }\n\n  withErrorMessage(errorMessage: string): this {\n    this.errorMessage = errorMessage;\n    return this;\n  }\n\n  withValueChangedAction(valueChangedAction: IResetInputsAction): this {\n    this.valueChangedAction = valueChangedAction;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n\n  withChoices(...choices: IChoice[]): this {\n    this.choices = choices;\n    return this;\n  }\n\n  withStyle(style: 'compact' | 'expanded' | 'filtered'): this {\n    this.style = style;\n    return this;\n  }\n\n  withIsMultiSelect(isMultiSelect = true): this {\n    this.isMultiSelect = isMultiSelect;\n    return this;\n  }\n\n  withPlaceholder(placeholder: string): this {\n    this.placeholder = placeholder;\n    return this;\n  }\n\n  withWrap(wrap = false): this {\n    this.wrap = wrap;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A choice as used by the Input.ChoiceSet input.\n */\nexport interface IChoice {\n  /**\n   * The text to display for the choice.\n   */\n  title?: string;\n  /**\n   * The value associated with the choice, as sent to the Bot when an Action.Submit or Action.Execute is invoked\n   */\n  value?: string;\n}\n\nexport type ChoiceOptions = IChoice;\n\n/**\n * A choice as used by the Input.ChoiceSet input.\n */\nexport class Choice implements IChoice {\n  /**\n   * The text to display for the choice.\n   */\n  title?: string;\n  /**\n   * The value associated with the choice, as sent to the Bot when an Action.Submit or Action.Execute is invoked\n   */\n  value?: string;\n\n  constructor(options: ChoiceOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IChoice): Choice {\n    return new Choice(options);\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withValue(value: string): this {\n    this.value = value;\n    return this;\n  }\n}\n\n/**\n * Defines a query to dynamically fetch data from a Bot.\n */\nexport interface IQueryData {\n  /**\n   * Must be **Data.Query**.\n   */\n  readonly type: 'Data.Query';\n  /**\n   * The dataset from which to fetch the data.\n   */\n  dataset?: string;\n  /**\n   * Controls which inputs are associated with the Data.Query. When a Data.Query is executed, the values of the associated inputs are sent to the Bot, allowing it to perform filtering operations based on the user's input.\n   */\n  associatedInputs?: 'auto' | 'none';\n  /**\n   * The maximum number of data items that should be returned by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.\n   */\n  count?: number;\n  /**\n   * The number of data items to be skipped by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.\n   */\n  skip?: number;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IQueryData.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of QueryData, false otherwise.\n */\nexport function isQueryData(value: unknown): value is IQueryData {\n  const obj = value as IQueryData;\n  return typeof obj === 'object' && obj.type === 'Data.Query';\n}\n\nexport type QueryDataOptions = Omit<IQueryData, 'type'>;\n\n/**\n * Defines a query to dynamically fetch data from a Bot.\n */\nexport class QueryData implements IQueryData {\n  /**\n   * Must be **Data.Query**.\n   */\n  readonly type = 'Data.Query';\n  /**\n   * The dataset from which to fetch the data.\n   */\n  dataset?: string;\n  /**\n   * Controls which inputs are associated with the Data.Query. When a Data.Query is executed, the values of the associated inputs are sent to the Bot, allowing it to perform filtering operations based on the user's input.\n   */\n  associatedInputs?: 'auto' | 'none';\n  /**\n   * The maximum number of data items that should be returned by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.\n   */\n  count?: number;\n  /**\n   * The number of data items to be skipped by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.\n   */\n  skip?: number;\n\n  constructor(options: QueryDataOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IQueryData, 'type'>): QueryData {\n    return new QueryData(options);\n  }\n\n  withDataset(dataset: string): this {\n    this.dataset = dataset;\n    return this;\n  }\n\n  withAssociatedInputs(associatedInputs: 'auto' | 'none'): this {\n    this.associatedInputs = associatedInputs;\n    return this;\n  }\n\n  withCount(count: number): this {\n    this.count = count;\n    return this;\n  }\n\n  withSkip(skip: number): this {\n    this.skip = skip;\n    return this;\n  }\n}\n\n/**\n * An input to allow the user to rate something using stars.\n */\nexport interface IRatingInput {\n  /**\n   * Must be **Input.Rating**.\n   */\n  readonly type: 'Input.Rating';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: number;\n  /**\n   * The number of stars to display.\n   */\n  max?: number;\n  /**\n   * Controls if the user can select half stars.\n   */\n  allowHalfSteps?: boolean;\n  /**\n   * The size of the stars.\n   */\n  size?: RatingSize;\n  /**\n   * The color of the stars.\n   */\n  color?: RatingColor;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IRatingInput.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of RatingInput, false otherwise.\n */\nexport function isRatingInput(value: unknown): value is IRatingInput {\n  const obj = value as IRatingInput;\n  return typeof obj === 'object' && obj.type === 'Input.Rating';\n}\n\nexport type RatingInputOptions = Omit<IRatingInput, 'type'>;\n\n/**\n * An input to allow the user to rate something using stars.\n */\nexport class RatingInput implements IRatingInput {\n  /**\n   * Must be **Input.Rating**.\n   */\n  readonly type = 'Input.Rating';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The label of the input.\n\nA label should **always** be provided to ensure the best user experience especially for users of assistive technology.\n   */\n  label?: string;\n  /**\n   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  isRequired?: boolean;\n  /**\n   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.\n   */\n  errorMessage?: string;\n  /**\n   * An Action.ResetInputs action that will be executed when the value of the input changes.\n   */\n  valueChangedAction?: IResetInputsAction;\n  /**\n   * The default value of the input.\n   */\n  value?: number;\n  /**\n   * The number of stars to display.\n   */\n  max?: number;\n  /**\n   * Controls if the user can select half stars.\n   */\n  allowHalfSteps?: boolean;\n  /**\n   * The size of the stars.\n   */\n  size?: RatingSize;\n  /**\n   * The color of the stars.\n   */\n  color?: RatingColor;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: RatingInputOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IRatingInput, 'type'>): RatingInput {\n    return new RatingInput(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withLabel(label: string): this {\n    this.label = label;\n    return this;\n  }\n\n  withIsRequired(isRequired = true): this {\n    this.isRequired = isRequired;\n    return this;\n  }\n\n  withErrorMessage(errorMessage: string): this {\n    this.errorMessage = errorMessage;\n    return this;\n  }\n\n  withValueChangedAction(valueChangedAction: IResetInputsAction): this {\n    this.valueChangedAction = valueChangedAction;\n    return this;\n  }\n\n  withValue(value: number): this {\n    this.value = value;\n    return this;\n  }\n\n  withMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  withAllowHalfSteps(allowHalfSteps = true): this {\n    this.allowHalfSteps = allowHalfSteps;\n    return this;\n  }\n\n  withSize(size: RatingSize): this {\n    this.size = size;\n    return this;\n  }\n\n  withColor(color: RatingColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A read-only star rating element, to display the rating of something.\n */\nexport interface IRating {\n  /**\n   * Must be **Rating**.\n   */\n  readonly type: 'Rating';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The value of the rating. Must be between 0 and max.\n   */\n  value?: number;\n  /**\n   * The number of \"votes\" associated with the rating.\n   */\n  count?: number;\n  /**\n   * The number of stars to display.\n   */\n  max?: number;\n  /**\n   * The size of the stars.\n   */\n  size?: RatingSize;\n  /**\n   * The color of the stars.\n   */\n  color?: RatingColor;\n  /**\n   * The style of the stars.\n   */\n  style?: RatingStyle;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IRating.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Rating, false otherwise.\n */\nexport function isRating(value: unknown): value is IRating {\n  const obj = value as IRating;\n  return typeof obj === 'object' && obj.type === 'Rating';\n}\n\nexport type RatingOptions = Omit<IRating, 'type'>;\n\n/**\n * A read-only star rating element, to display the rating of something.\n */\nexport class Rating implements IRating {\n  /**\n   * Must be **Rating**.\n   */\n  readonly type = 'Rating';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The value of the rating. Must be between 0 and max.\n   */\n  value?: number;\n  /**\n   * The number of \"votes\" associated with the rating.\n   */\n  count?: number;\n  /**\n   * The number of stars to display.\n   */\n  max?: number;\n  /**\n   * The size of the stars.\n   */\n  size?: RatingSize;\n  /**\n   * The color of the stars.\n   */\n  color?: RatingColor;\n  /**\n   * The style of the stars.\n   */\n  style?: RatingStyle;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: RatingOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IRating, 'type'>): Rating {\n    return new Rating(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withValue(value: number): this {\n    this.value = value;\n    return this;\n  }\n\n  withCount(count: number): this {\n    this.count = count;\n    return this;\n  }\n\n  withMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  withSize(size: RatingSize): this {\n    this.size = size;\n    return this;\n  }\n\n  withColor(color: RatingColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withStyle(style: RatingStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A special type of button with an icon, title and description.\n */\nexport interface ICompoundButton {\n  /**\n   * Must be **CompoundButton**.\n   */\n  readonly type: 'CompoundButton';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The icon to show on the button.\n   */\n  icon?: IIconInfo;\n  /**\n   * The badge to show on the button.\n   */\n  badge?: string;\n  /**\n   * The title of the button.\n   */\n  title?: string;\n  /**\n   * The description text of the button.\n   */\n  description?: string;\n  /**\n   * An Action that will be invoked when the button is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ICompoundButton.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of CompoundButton, false otherwise.\n */\nexport function isCompoundButton(value: unknown): value is ICompoundButton {\n  const obj = value as ICompoundButton;\n  return typeof obj === 'object' && obj.type === 'CompoundButton';\n}\n\nexport type CompoundButtonOptions = Omit<ICompoundButton, 'type'>;\n\n/**\n * A special type of button with an icon, title and description.\n */\nexport class CompoundButton implements ICompoundButton {\n  /**\n   * Must be **CompoundButton**.\n   */\n  readonly type = 'CompoundButton';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The icon to show on the button.\n   */\n  icon?: IIconInfo;\n  /**\n   * The badge to show on the button.\n   */\n  badge?: string;\n  /**\n   * The title of the button.\n   */\n  title?: string;\n  /**\n   * The description text of the button.\n   */\n  description?: string;\n  /**\n   * An Action that will be invoked when the button is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: CompoundButtonOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ICompoundButton, 'type'>): CompoundButton {\n    return new CompoundButton(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withIcon(icon: IIconInfo): this {\n    this.icon = icon;\n    return this;\n  }\n\n  withBadge(badge: string): this {\n    this.badge = badge;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withDescription(description: string): this {\n    this.description = description;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Defines information about a Fluent icon and how it should be rendered.\n */\nexport interface IIconInfo {\n  /**\n   * The name of the icon to display.\n   */\n  name?: string;\n  /**\n   * The size of the icon.\n   */\n  size?: IconSize;\n  /**\n   * The style of the icon.\n   */\n  style?: IconStyle;\n  /**\n   * The color of the icon.\n   */\n  color?: TextColor;\n}\n\nexport type IconInfoOptions = IIconInfo;\n\n/**\n * Defines information about a Fluent icon and how it should be rendered.\n */\nexport class IconInfo implements IIconInfo {\n  /**\n   * The name of the icon to display.\n   */\n  name?: string;\n  /**\n   * The size of the icon.\n   */\n  size?: IconSize;\n  /**\n   * The style of the icon.\n   */\n  style?: IconStyle;\n  /**\n   * The color of the icon.\n   */\n  color?: TextColor;\n\n  constructor(options: IconInfoOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IIconInfo): IconInfo {\n    return new IconInfo(options);\n  }\n\n  withName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  withSize(size: IconSize): this {\n    this.size = size;\n    return this;\n  }\n\n  withStyle(style: IconStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withColor(color: TextColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * A standalone icon element. Icons can be picked from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog).\n */\nexport interface IIcon {\n  /**\n   * Must be **Icon**.\n   */\n  readonly type: 'Icon';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The name of the icon to display.\n   */\n  name: string;\n  /**\n   * The size of the icon.\n   */\n  size?: IconSize;\n  /**\n   * The style of the icon.\n   */\n  style?: IconStyle;\n  /**\n   * The color of the icon.\n   */\n  color?: TextColor;\n  /**\n   * An Action that will be invoked when the icon is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IIcon.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Icon, false otherwise.\n */\nexport function isIcon(value: unknown): value is IIcon {\n  const obj = value as IIcon;\n  return typeof obj === 'object' && obj.type === 'Icon';\n}\n\nexport type IconOptions = Omit<IIcon, 'type' | 'name'>;\n\n/**\n * A standalone icon element. Icons can be picked from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog).\n */\nexport class Icon implements IIcon {\n  /**\n   * Must be **Icon**.\n   */\n  readonly type = 'Icon';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The name of the icon to display.\n   */\n  name: string;\n  /**\n   * The size of the icon.\n   */\n  size?: IconSize;\n  /**\n   * The style of the icon.\n   */\n  style?: IconStyle;\n  /**\n   * The color of the icon.\n   */\n  color?: TextColor;\n  /**\n   * An Action that will be invoked when the icon is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(name: string, options: IconOptions = {}) {\n    Object.assign(this, options);\n    this.name = name;\n  }\n\n  static from(options: Omit<IIcon, 'type'>): Icon {\n    return new Icon(options.name, options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  withSize(size: IconSize): this {\n    this.size = size;\n    return this;\n  }\n\n  withStyle(style: IconStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withColor(color: TextColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A carousel with sliding pages.\n */\nexport interface ICarousel {\n  /**\n   * Must be **Carousel**.\n   */\n  readonly type: 'Carousel';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Controls the type of animation to use to navigate between pages.\n   */\n  pageAnimation?: CarouselPageAnimation;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The pages in the carousel.\n   */\n  pages?: ICarouselPage[];\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ICarousel.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Carousel, false otherwise.\n */\nexport function isCarousel(value: unknown): value is ICarousel {\n  const obj = value as ICarousel;\n  return typeof obj === 'object' && obj.type === 'Carousel';\n}\n\nexport type CarouselOptions = Omit<ICarousel, 'type'>;\n\n/**\n * A carousel with sliding pages.\n */\nexport class Carousel implements ICarousel {\n  /**\n   * Must be **Carousel**.\n   */\n  readonly type = 'Carousel';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Controls the type of animation to use to navigate between pages.\n   */\n  pageAnimation?: CarouselPageAnimation;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The pages in the carousel.\n   */\n  pages?: ICarouselPage[];\n\n  constructor(options: CarouselOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ICarousel, 'type'>): Carousel {\n    return new Carousel(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withBleed(bleed = true): this {\n    this.bleed = bleed;\n    return this;\n  }\n\n  withMinHeight(minHeight: string): this {\n    this.minHeight = minHeight;\n    return this;\n  }\n\n  withPageAnimation(pageAnimation: CarouselPageAnimation): this {\n    this.pageAnimation = pageAnimation;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withPages(...pages: ICarouselPage[]): this {\n    this.pages = pages;\n    return this;\n  }\n}\n\n/**\n * A badge element to show an icon and/or text in a compact form over a colored background.\n */\nexport interface IBadge {\n  /**\n   * Must be **Badge**.\n   */\n  readonly type: 'Badge';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The text to display.\n   */\n  text?: string;\n  /**\n   * The name of an icon from the [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) to display, in the `<icon-name>[,regular|filled]` format. If the style is not specified, the regular style is used.\n   */\n  icon?: string;\n  /**\n   * Controls the position of the icon.\n   */\n  iconPosition?: BadgeIconPosition;\n  /**\n   * Controls the strength of the background color.\n   */\n  appearance?: BadgeAppearance;\n  /**\n   * The size of the badge.\n   */\n  size?: BadgeSize;\n  /**\n   * Controls the shape of the badge.\n   */\n  shape?: BadgeShape;\n  /**\n   * The style of the badge.\n   */\n  style?: BadgeStyle;\n  /**\n   * Controls the tooltip text to display when the badge is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IBadge.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Badge, false otherwise.\n */\nexport function isBadge(value: unknown): value is IBadge {\n  const obj = value as IBadge;\n  return typeof obj === 'object' && obj.type === 'Badge';\n}\n\nexport type BadgeOptions = Omit<IBadge, 'type'>;\n\n/**\n * A badge element to show an icon and/or text in a compact form over a colored background.\n */\nexport class Badge implements IBadge {\n  /**\n   * Must be **Badge**.\n   */\n  readonly type = 'Badge';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The text to display.\n   */\n  text?: string;\n  /**\n   * The name of an icon from the [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) to display, in the `<icon-name>[,regular|filled]` format. If the style is not specified, the regular style is used.\n   */\n  icon?: string;\n  /**\n   * Controls the position of the icon.\n   */\n  iconPosition?: BadgeIconPosition;\n  /**\n   * Controls the strength of the background color.\n   */\n  appearance?: BadgeAppearance;\n  /**\n   * The size of the badge.\n   */\n  size?: BadgeSize;\n  /**\n   * Controls the shape of the badge.\n   */\n  shape?: BadgeShape;\n  /**\n   * The style of the badge.\n   */\n  style?: BadgeStyle;\n  /**\n   * Controls the tooltip text to display when the badge is hovered over.\n   */\n  tooltip?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: BadgeOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IBadge, 'type'>): Badge {\n    return new Badge(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  withIcon(icon: string): this {\n    this.icon = icon;\n    return this;\n  }\n\n  withIconPosition(iconPosition: BadgeIconPosition): this {\n    this.iconPosition = iconPosition;\n    return this;\n  }\n\n  withAppearance(appearance: BadgeAppearance): this {\n    this.appearance = appearance;\n    return this;\n  }\n\n  withSize(size: BadgeSize): this {\n    this.size = size;\n    return this;\n  }\n\n  withShape(shape: BadgeShape): this {\n    this.shape = shape;\n    return this;\n  }\n\n  withStyle(style: BadgeStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withTooltip(tooltip: string): this {\n    this.tooltip = tooltip;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A donut chart.\n */\nexport interface IDonutChart {\n  /**\n   * Must be **Chart.Donut**.\n   */\n  readonly type: 'Chart.Donut';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IDonutChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IDonutChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of DonutChart, false otherwise.\n */\nexport function isDonutChart(value: unknown): value is IDonutChart {\n  const obj = value as IDonutChart;\n  return typeof obj === 'object' && obj.type === 'Chart.Donut';\n}\n\nexport type DonutChartOptions = Omit<IDonutChart, 'type'>;\n\n/**\n * A donut chart.\n */\nexport class DonutChart implements IDonutChart {\n  /**\n   * Must be **Chart.Donut**.\n   */\n  readonly type = 'Chart.Donut';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IDonutChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: DonutChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IDonutChart, 'type'>): DonutChart {\n    return new DonutChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withData(...data: IDonutChartData[]): this {\n    this.data = data;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A data point in a Donut chart.\n */\nexport interface IDonutChartData {\n  /**\n   * The legend of the chart.\n   */\n  legend?: string;\n  /**\n   * The value associated with the data point.\n   */\n  value?: number;\n  /**\n   * The color to use for the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n}\n\nexport type DonutChartDataOptions = IDonutChartData;\n\n/**\n * A data point in a Donut chart.\n */\nexport class DonutChartData implements IDonutChartData {\n  /**\n   * The legend of the chart.\n   */\n  legend?: string;\n  /**\n   * The value associated with the data point.\n   */\n  value?: number;\n  /**\n   * The color to use for the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n\n  constructor(options: DonutChartDataOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IDonutChartData): DonutChartData {\n    return new DonutChartData(options);\n  }\n\n  withLegend(legend: string): this {\n    this.legend = legend;\n    return this;\n  }\n\n  withValue(value: number): this {\n    this.value = value;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * A pie chart.\n */\nexport interface IPieChart {\n  /**\n   * Must be **Chart.Pie**.\n   */\n  readonly type: 'Chart.Pie';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IDonutChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IPieChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of PieChart, false otherwise.\n */\nexport function isPieChart(value: unknown): value is IPieChart {\n  const obj = value as IPieChart;\n  return typeof obj === 'object' && obj.type === 'Chart.Pie';\n}\n\nexport type PieChartOptions = Omit<IPieChart, 'type'>;\n\n/**\n * A pie chart.\n */\nexport class PieChart implements IPieChart {\n  /**\n   * Must be **Chart.Pie**.\n   */\n  readonly type = 'Chart.Pie';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IDonutChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: PieChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IPieChart, 'type'>): PieChart {\n    return new PieChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withData(...data: IDonutChartData[]): this {\n    this.data = data;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A grouped vertical bar chart.\n */\nexport interface IGroupedVerticalBarChart {\n  /**\n   * Must be **Chart.VerticalBar.Grouped**.\n   */\n  readonly type: 'Chart.VerticalBar.Grouped';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * Controls if bars in the chart should  be displayed as stacked instead of grouped.\n   */\n  stacked?: boolean;\n  /**\n   * The data points in a series.\n   */\n  data?: IGroupedVerticalBarChartData[];\n  /**\n   * Controls if values should be displayed on each bar.\n   */\n  showBarValues?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IGroupedVerticalBarChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of GroupedVerticalBarChart, false otherwise.\n */\nexport function isGroupedVerticalBarChart(value: unknown): value is IGroupedVerticalBarChart {\n  const obj = value as IGroupedVerticalBarChart;\n  return typeof obj === 'object' && obj.type === 'Chart.VerticalBar.Grouped';\n}\n\nexport type GroupedVerticalBarChartOptions = Omit<IGroupedVerticalBarChart, 'type'>;\n\n/**\n * A grouped vertical bar chart.\n */\nexport class GroupedVerticalBarChart implements IGroupedVerticalBarChart {\n  /**\n   * Must be **Chart.VerticalBar.Grouped**.\n   */\n  readonly type = 'Chart.VerticalBar.Grouped';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * Controls if bars in the chart should  be displayed as stacked instead of grouped.\n   */\n  stacked?: boolean;\n  /**\n   * The data points in a series.\n   */\n  data?: IGroupedVerticalBarChartData[];\n  /**\n   * Controls if values should be displayed on each bar.\n   */\n  showBarValues?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: GroupedVerticalBarChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IGroupedVerticalBarChart, 'type'>): GroupedVerticalBarChart {\n    return new GroupedVerticalBarChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withXAxisTitle(xAxisTitle: string): this {\n    this.xAxisTitle = xAxisTitle;\n    return this;\n  }\n\n  withYAxisTitle(yAxisTitle: string): this {\n    this.yAxisTitle = yAxisTitle;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withStacked(stacked = true): this {\n    this.stacked = stacked;\n    return this;\n  }\n\n  withData(...data: IGroupedVerticalBarChartData[]): this {\n    this.data = data;\n    return this;\n  }\n\n  withShowBarValues(showBarValues = true): this {\n    this.showBarValues = showBarValues;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents a series of data points.\n */\nexport interface IGroupedVerticalBarChartData {\n  /**\n   * The legend of the chart.\n   */\n  legend?: string;\n  /**\n   * The data points in the series.\n   */\n  values?: IBarChartDataValue[];\n  /**\n   * The color to use for all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n}\n\nexport type GroupedVerticalBarChartDataOptions = IGroupedVerticalBarChartData;\n\n/**\n * Represents a series of data points.\n */\nexport class GroupedVerticalBarChartData implements IGroupedVerticalBarChartData {\n  /**\n   * The legend of the chart.\n   */\n  legend?: string;\n  /**\n   * The data points in the series.\n   */\n  values?: IBarChartDataValue[];\n  /**\n   * The color to use for all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n\n  constructor(options: GroupedVerticalBarChartDataOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IGroupedVerticalBarChartData): GroupedVerticalBarChartData {\n    return new GroupedVerticalBarChartData(options);\n  }\n\n  withLegend(legend: string): this {\n    this.legend = legend;\n    return this;\n  }\n\n  withValues(...values: IBarChartDataValue[]): this {\n    this.values = values;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * A single data point in a bar chart.\n */\nexport interface IBarChartDataValue {\n  /**\n   * The x axis value of the data point.\n   */\n  x?: string;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n}\n\nexport type BarChartDataValueOptions = IBarChartDataValue;\n\n/**\n * A single data point in a bar chart.\n */\nexport class BarChartDataValue implements IBarChartDataValue {\n  /**\n   * The x axis value of the data point.\n   */\n  x?: string;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n\n  constructor(options: BarChartDataValueOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IBarChartDataValue): BarChartDataValue {\n    return new BarChartDataValue(options);\n  }\n\n  withX(x: string): this {\n    this.x = x;\n    return this;\n  }\n\n  withY(y: number): this {\n    this.y = y;\n    return this;\n  }\n}\n\n/**\n * A vertical bar chart.\n */\nexport interface IVerticalBarChart {\n  /**\n   * Must be **Chart.VerticalBar**.\n   */\n  readonly type: 'Chart.VerticalBar';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IVerticalBarChartDataValue[];\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * Controls if the bar values should be displayed.\n   */\n  showBarValues?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IVerticalBarChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of VerticalBarChart, false otherwise.\n */\nexport function isVerticalBarChart(value: unknown): value is IVerticalBarChart {\n  const obj = value as IVerticalBarChart;\n  return typeof obj === 'object' && obj.type === 'Chart.VerticalBar';\n}\n\nexport type VerticalBarChartOptions = Omit<IVerticalBarChart, 'type'>;\n\n/**\n * A vertical bar chart.\n */\nexport class VerticalBarChart implements IVerticalBarChart {\n  /**\n   * Must be **Chart.VerticalBar**.\n   */\n  readonly type = 'Chart.VerticalBar';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IVerticalBarChartDataValue[];\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * Controls if the bar values should be displayed.\n   */\n  showBarValues?: boolean;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: VerticalBarChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IVerticalBarChart, 'type'>): VerticalBarChart {\n    return new VerticalBarChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withXAxisTitle(xAxisTitle: string): this {\n    this.xAxisTitle = xAxisTitle;\n    return this;\n  }\n\n  withYAxisTitle(yAxisTitle: string): this {\n    this.yAxisTitle = yAxisTitle;\n    return this;\n  }\n\n  withData(...data: IVerticalBarChartDataValue[]): this {\n    this.data = data;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withShowBarValues(showBarValues = true): this {\n    this.showBarValues = showBarValues;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents a data point in a vertical bar chart.\n */\nexport interface IVerticalBarChartDataValue {\n  /**\n   * The x axis value of the data point.\n   */\n  x?: string | number;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n  /**\n   * The color to use for the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n}\n\nexport type VerticalBarChartDataValueOptions = IVerticalBarChartDataValue;\n\n/**\n * Represents a data point in a vertical bar chart.\n */\nexport class VerticalBarChartDataValue implements IVerticalBarChartDataValue {\n  /**\n   * The x axis value of the data point.\n   */\n  x?: string | number;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n  /**\n   * The color to use for the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n\n  constructor(options: VerticalBarChartDataValueOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IVerticalBarChartDataValue): VerticalBarChartDataValue {\n    return new VerticalBarChartDataValue(options);\n  }\n\n  withX(x: string | number): this {\n    this.x = x;\n    return this;\n  }\n\n  withY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * A horizontal bar chart.\n */\nexport interface IHorizontalBarChart {\n  /**\n   * Must be **Chart.HorizontalBar**.\n   */\n  readonly type: 'Chart.HorizontalBar';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * The data points in the chart.\n   */\n  data?: IHorizontalBarChartDataValue[];\n  /**\n   * Controls how the chart should be visually laid out.\n   */\n  displayMode?: HorizontalBarChartDisplayMode;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IHorizontalBarChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of HorizontalBarChart, false otherwise.\n */\nexport function isHorizontalBarChart(value: unknown): value is IHorizontalBarChart {\n  const obj = value as IHorizontalBarChart;\n  return typeof obj === 'object' && obj.type === 'Chart.HorizontalBar';\n}\n\nexport type HorizontalBarChartOptions = Omit<IHorizontalBarChart, 'type'>;\n\n/**\n * A horizontal bar chart.\n */\nexport class HorizontalBarChart implements IHorizontalBarChart {\n  /**\n   * Must be **Chart.HorizontalBar**.\n   */\n  readonly type = 'Chart.HorizontalBar';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * The data points in the chart.\n   */\n  data?: IHorizontalBarChartDataValue[];\n  /**\n   * Controls how the chart should be visually laid out.\n   */\n  displayMode?: HorizontalBarChartDisplayMode;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: HorizontalBarChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IHorizontalBarChart, 'type'>): HorizontalBarChart {\n    return new HorizontalBarChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withXAxisTitle(xAxisTitle: string): this {\n    this.xAxisTitle = xAxisTitle;\n    return this;\n  }\n\n  withYAxisTitle(yAxisTitle: string): this {\n    this.yAxisTitle = yAxisTitle;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withData(...data: IHorizontalBarChartDataValue[]): this {\n    this.data = data;\n    return this;\n  }\n\n  withDisplayMode(displayMode: HorizontalBarChartDisplayMode): this {\n    this.displayMode = displayMode;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents a single data point in a horizontal bar chart.\n */\nexport interface IHorizontalBarChartDataValue {\n  /**\n   * The x axis value of the data point.\n   */\n  x?: string;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n  /**\n   * The color of the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n}\n\nexport type HorizontalBarChartDataValueOptions = IHorizontalBarChartDataValue;\n\n/**\n * Represents a single data point in a horizontal bar chart.\n */\nexport class HorizontalBarChartDataValue implements IHorizontalBarChartDataValue {\n  /**\n   * The x axis value of the data point.\n   */\n  x?: string;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n  /**\n   * The color of the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n\n  constructor(options: HorizontalBarChartDataValueOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IHorizontalBarChartDataValue): HorizontalBarChartDataValue {\n    return new HorizontalBarChartDataValue(options);\n  }\n\n  withX(x: string): this {\n    this.x = x;\n    return this;\n  }\n\n  withY(y: number): this {\n    this.y = y;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * A stacked horizontal bar chart.\n */\nexport interface IStackedHorizontalBarChart {\n  /**\n   * Must be **Chart.HorizontalBar.Stacked**.\n   */\n  readonly type: 'Chart.HorizontalBar.Stacked';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IStackedHorizontalBarChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IStackedHorizontalBarChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of StackedHorizontalBarChart, false otherwise.\n */\nexport function isStackedHorizontalBarChart(value: unknown): value is IStackedHorizontalBarChart {\n  const obj = value as IStackedHorizontalBarChart;\n  return typeof obj === 'object' && obj.type === 'Chart.HorizontalBar.Stacked';\n}\n\nexport type StackedHorizontalBarChartOptions = Omit<IStackedHorizontalBarChart, 'type'>;\n\n/**\n * A stacked horizontal bar chart.\n */\nexport class StackedHorizontalBarChart implements IStackedHorizontalBarChart {\n  /**\n   * Must be **Chart.HorizontalBar.Stacked**.\n   */\n  readonly type = 'Chart.HorizontalBar.Stacked';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * The data to display in the chart.\n   */\n  data?: IStackedHorizontalBarChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: StackedHorizontalBarChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IStackedHorizontalBarChart, 'type'>): StackedHorizontalBarChart {\n    return new StackedHorizontalBarChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withXAxisTitle(xAxisTitle: string): this {\n    this.xAxisTitle = xAxisTitle;\n    return this;\n  }\n\n  withYAxisTitle(yAxisTitle: string): this {\n    this.yAxisTitle = yAxisTitle;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withData(...data: IStackedHorizontalBarChartData[]): this {\n    this.data = data;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Defines the collection of data series to display in as a stacked horizontal bar chart.\n */\nexport interface IStackedHorizontalBarChartData {\n  /**\n   * The title of the series.\n   */\n  title?: string;\n  /**\n   * The data points in the series.\n   */\n  data?: IStackedHorizontalBarChartDataPoint[];\n}\n\nexport type StackedHorizontalBarChartDataOptions = IStackedHorizontalBarChartData;\n\n/**\n * Defines the collection of data series to display in as a stacked horizontal bar chart.\n */\nexport class StackedHorizontalBarChartData implements IStackedHorizontalBarChartData {\n  /**\n   * The title of the series.\n   */\n  title?: string;\n  /**\n   * The data points in the series.\n   */\n  data?: IStackedHorizontalBarChartDataPoint[];\n\n  constructor(options: StackedHorizontalBarChartDataOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IStackedHorizontalBarChartData): StackedHorizontalBarChartData {\n    return new StackedHorizontalBarChartData(options);\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withData(...data: IStackedHorizontalBarChartDataPoint[]): this {\n    this.data = data;\n    return this;\n  }\n}\n\n/**\n * A data point in a series.\n */\nexport interface IStackedHorizontalBarChartDataPoint {\n  /**\n   * The legend associated with the data point.\n   */\n  legend?: string;\n  /**\n   * The value of the data point.\n   */\n  value?: number;\n  /**\n   * The color to use to render the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n}\n\nexport type StackedHorizontalBarChartDataPointOptions = IStackedHorizontalBarChartDataPoint;\n\n/**\n * A data point in a series.\n */\nexport class StackedHorizontalBarChartDataPoint implements IStackedHorizontalBarChartDataPoint {\n  /**\n   * The legend associated with the data point.\n   */\n  legend?: string;\n  /**\n   * The value of the data point.\n   */\n  value?: number;\n  /**\n   * The color to use to render the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n\n  constructor(options: StackedHorizontalBarChartDataPointOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IStackedHorizontalBarChartDataPoint): StackedHorizontalBarChartDataPoint {\n    return new StackedHorizontalBarChartDataPoint(options);\n  }\n\n  withLegend(legend: string): this {\n    this.legend = legend;\n    return this;\n  }\n\n  withValue(value: number): this {\n    this.value = value;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * A line chart.\n */\nexport interface ILineChart {\n  /**\n   * Must be **Chart.Line**.\n   */\n  readonly type: 'Chart.Line';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * The data point series in the line chart.\n   */\n  data?: ILineChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ILineChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of LineChart, false otherwise.\n */\nexport function isLineChart(value: unknown): value is ILineChart {\n  const obj = value as ILineChart;\n  return typeof obj === 'object' && obj.type === 'Chart.Line';\n}\n\nexport type LineChartOptions = Omit<ILineChart, 'type'>;\n\n/**\n * A line chart.\n */\nexport class LineChart implements ILineChart {\n  /**\n   * Must be **Chart.Line**.\n   */\n  readonly type = 'Chart.Line';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The title of the x axis.\n   */\n  xAxisTitle?: string;\n  /**\n   * The title of the y axis.\n   */\n  yAxisTitle?: string;\n  /**\n   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n  /**\n   * The data point series in the line chart.\n   */\n  data?: ILineChartData[];\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: LineChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ILineChart, 'type'>): LineChart {\n    return new LineChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withXAxisTitle(xAxisTitle: string): this {\n    this.xAxisTitle = xAxisTitle;\n    return this;\n  }\n\n  withYAxisTitle(yAxisTitle: string): this {\n    this.yAxisTitle = yAxisTitle;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withData(...data: ILineChartData[]): this {\n    this.data = data;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents a collection of data points series in a line chart.\n */\nexport interface ILineChartData {\n  /**\n   * The legend of the chart.\n   */\n  legend?: string;\n  /**\n   * The data points in the series.\n   */\n  values?: ILineChartValue[];\n  /**\n   * The color all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n}\n\nexport type LineChartDataOptions = ILineChartData;\n\n/**\n * Represents a collection of data points series in a line chart.\n */\nexport class LineChartData implements ILineChartData {\n  /**\n   * The legend of the chart.\n   */\n  legend?: string;\n  /**\n   * The data points in the series.\n   */\n  values?: ILineChartValue[];\n  /**\n   * The color all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n\n  constructor(options: LineChartDataOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ILineChartData): LineChartData {\n    return new LineChartData(options);\n  }\n\n  withLegend(legend: string): this {\n    this.legend = legend;\n    return this;\n  }\n\n  withValues(...values: ILineChartValue[]): this {\n    this.values = values;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * Represents a single data point in a line chart.\n */\nexport interface ILineChartValue {\n  /**\n   * The x axis value of the data point.\n\nIf all x values of the x [Chart.Line](https://adaptivecards.microsoft.com/?topic=Chart.Line) are expressed as a number, or if all x values are expressed as a date string in the `YYYY-MM-DD` format, the chart will be rendered as a time series chart, i.e. x axis values will span across the minimum x value to maximum x value range.\n\nOtherwise, if x values are represented as a mix of numbers and strings or if at least one x value isn't in the `YYYY-MM-DD` format, the chart will be rendered as a categorical chart, i.e. x axis values will be displayed as categories.\n   */\n  x?: number | string;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n}\n\nexport type LineChartValueOptions = ILineChartValue;\n\n/**\n * Represents a single data point in a line chart.\n */\nexport class LineChartValue implements ILineChartValue {\n  /**\n   * The x axis value of the data point.\n\nIf all x values of the x [Chart.Line](https://adaptivecards.microsoft.com/?topic=Chart.Line) are expressed as a number, or if all x values are expressed as a date string in the `YYYY-MM-DD` format, the chart will be rendered as a time series chart, i.e. x axis values will span across the minimum x value to maximum x value range.\n\nOtherwise, if x values are represented as a mix of numbers and strings or if at least one x value isn't in the `YYYY-MM-DD` format, the chart will be rendered as a categorical chart, i.e. x axis values will be displayed as categories.\n   */\n  x?: number | string;\n  /**\n   * The y axis value of the data point.\n   */\n  y?: number;\n\n  constructor(options: LineChartValueOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ILineChartValue): LineChartValue {\n    return new LineChartValue(options);\n  }\n\n  withX(x: number | string): this {\n    this.x = x;\n    return this;\n  }\n\n  withY(y: number): this {\n    this.y = y;\n    return this;\n  }\n}\n\n/**\n * A gauge chart.\n */\nexport interface IGaugeChart {\n  /**\n   * Must be **Chart.Gauge**.\n   */\n  readonly type: 'Chart.Gauge';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The minimum value of the gauge.\n   */\n  min?: number;\n  /**\n   * The maximum value of the gauge.\n   */\n  max?: number;\n  /**\n   * The sub-label of the gauge.\n   */\n  subLabel?: string;\n  /**\n   * Controls if the min/max values should be displayed.\n   */\n  showMinMax?: boolean;\n  /**\n   * Controls if the legend should be displayed.\n   */\n  showLegend?: boolean;\n  /**\n   * The segments to display in the gauge.\n   */\n  segments?: IGaugeChartLegend[];\n  /**\n   * The value of the gauge.\n   */\n  value?: number;\n  /**\n   * The format used to display the gauge's value.\n   */\n  valueFormat?: GaugeChartValueFormat;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IGaugeChart.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of GaugeChart, false otherwise.\n */\nexport function isGaugeChart(value: unknown): value is IGaugeChart {\n  const obj = value as IGaugeChart;\n  return typeof obj === 'object' && obj.type === 'Chart.Gauge';\n}\n\nexport type GaugeChartOptions = Omit<IGaugeChart, 'type'>;\n\n/**\n * A gauge chart.\n */\nexport class GaugeChart implements IGaugeChart {\n  /**\n   * Must be **Chart.Gauge**.\n   */\n  readonly type = 'Chart.Gauge';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The title of the chart.\n   */\n  title?: string;\n  /**\n   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  colorSet?: ChartColorSet;\n  /**\n   * The minimum value of the gauge.\n   */\n  min?: number;\n  /**\n   * The maximum value of the gauge.\n   */\n  max?: number;\n  /**\n   * The sub-label of the gauge.\n   */\n  subLabel?: string;\n  /**\n   * Controls if the min/max values should be displayed.\n   */\n  showMinMax?: boolean;\n  /**\n   * Controls if the legend should be displayed.\n   */\n  showLegend?: boolean;\n  /**\n   * The segments to display in the gauge.\n   */\n  segments?: IGaugeChartLegend[];\n  /**\n   * The value of the gauge.\n   */\n  value?: number;\n  /**\n   * The format used to display the gauge's value.\n   */\n  valueFormat?: GaugeChartValueFormat;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: GaugeChartOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<IGaugeChart, 'type'>): GaugeChart {\n    return new GaugeChart(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withColorSet(colorSet: ChartColorSet): this {\n    this.colorSet = colorSet;\n    return this;\n  }\n\n  withMin(min: number): this {\n    this.min = min;\n    return this;\n  }\n\n  withMax(max: number): this {\n    this.max = max;\n    return this;\n  }\n\n  withSubLabel(subLabel: string): this {\n    this.subLabel = subLabel;\n    return this;\n  }\n\n  withShowMinMax(showMinMax = false): this {\n    this.showMinMax = showMinMax;\n    return this;\n  }\n\n  withShowLegend(showLegend = false): this {\n    this.showLegend = showLegend;\n    return this;\n  }\n\n  withSegments(...segments: IGaugeChartLegend[]): this {\n    this.segments = segments;\n    return this;\n  }\n\n  withValue(value: number): this {\n    this.value = value;\n    return this;\n  }\n\n  withValueFormat(valueFormat: GaugeChartValueFormat): this {\n    this.valueFormat = valueFormat;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * The legend of the chart.\n */\nexport interface IGaugeChartLegend {\n  /**\n   * The size of the segment.\n   */\n  size?: number;\n  /**\n   * The legend text associated with the segment.\n   */\n  legend?: string;\n  /**\n   * The color to use for the segment. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n}\n\nexport type GaugeChartLegendOptions = IGaugeChartLegend;\n\n/**\n * The legend of the chart.\n */\nexport class GaugeChartLegend implements IGaugeChartLegend {\n  /**\n   * The size of the segment.\n   */\n  size?: number;\n  /**\n   * The legend text associated with the segment.\n   */\n  legend?: string;\n  /**\n   * The color to use for the segment. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).\n   */\n  color?: ChartColor;\n\n  constructor(options: GaugeChartLegendOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IGaugeChartLegend): GaugeChartLegend {\n    return new GaugeChartLegend(options);\n  }\n\n  withSize(size: number): this {\n    this.size = size;\n    return this;\n  }\n\n  withLegend(legend: string): this {\n    this.legend = legend;\n    return this;\n  }\n\n  withColor(color: ChartColor): this {\n    this.color = color;\n    return this;\n  }\n}\n\n/**\n * A formatted and syntax-colored code block.\n */\nexport interface ICodeBlock {\n  /**\n   * Must be **CodeBlock**.\n   */\n  readonly type: 'CodeBlock';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The code snippet to display.\n   */\n  codeSnippet?: string;\n  /**\n   * The language the code snippet is expressed in.\n   */\n  language?:\n    | 'Bash'\n    | 'C'\n    | 'Cpp'\n    | 'CSharp'\n    | 'Css'\n    | 'Dos'\n    | 'Go'\n    | 'Graphql'\n    | 'Html'\n    | 'Java'\n    | 'JavaScript'\n    | 'Json'\n    | 'ObjectiveC'\n    | 'Perl'\n    | 'Php'\n    | 'PlainText'\n    | 'PowerShell'\n    | 'Python'\n    | 'Sql'\n    | 'TypeScript'\n    | 'VbNet'\n    | 'Verilog'\n    | 'Vhdl'\n    | 'Xml';\n  /**\n   * A number that represents the line in the file from where the code snippet was extracted.\n   */\n  startLineNumber?: number;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ICodeBlock.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of CodeBlock, false otherwise.\n */\nexport function isCodeBlock(value: unknown): value is ICodeBlock {\n  const obj = value as ICodeBlock;\n  return typeof obj === 'object' && obj.type === 'CodeBlock';\n}\n\nexport type CodeBlockOptions = Omit<ICodeBlock, 'type'>;\n\n/**\n * A formatted and syntax-colored code block.\n */\nexport class CodeBlock implements ICodeBlock {\n  /**\n   * Must be **CodeBlock**.\n   */\n  readonly type = 'CodeBlock';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The code snippet to display.\n   */\n  codeSnippet?: string;\n  /**\n   * The language the code snippet is expressed in.\n   */\n  language?:\n    | 'Bash'\n    | 'C'\n    | 'Cpp'\n    | 'CSharp'\n    | 'Css'\n    | 'Dos'\n    | 'Go'\n    | 'Graphql'\n    | 'Html'\n    | 'Java'\n    | 'JavaScript'\n    | 'Json'\n    | 'ObjectiveC'\n    | 'Perl'\n    | 'Php'\n    | 'PlainText'\n    | 'PowerShell'\n    | 'Python'\n    | 'Sql'\n    | 'TypeScript'\n    | 'VbNet'\n    | 'Verilog'\n    | 'Vhdl'\n    | 'Xml';\n  /**\n   * A number that represents the line in the file from where the code snippet was extracted.\n   */\n  startLineNumber?: number;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: CodeBlockOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ICodeBlock, 'type'>): CodeBlock {\n    return new CodeBlock(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withCodeSnippet(codeSnippet: string): this {\n    this.codeSnippet = codeSnippet;\n    return this;\n  }\n\n  withLanguage(\n    language:\n      | 'Bash'\n      | 'C'\n      | 'Cpp'\n      | 'CSharp'\n      | 'Css'\n      | 'Dos'\n      | 'Go'\n      | 'Graphql'\n      | 'Html'\n      | 'Java'\n      | 'JavaScript'\n      | 'Json'\n      | 'ObjectiveC'\n      | 'Perl'\n      | 'Php'\n      | 'PlainText'\n      | 'PowerShell'\n      | 'Python'\n      | 'Sql'\n      | 'TypeScript'\n      | 'VbNet'\n      | 'Verilog'\n      | 'Vhdl'\n      | 'Xml'\n  ): this {\n    this.language = language;\n    return this;\n  }\n\n  withStartLineNumber(startLineNumber: number): this {\n    this.startLineNumber = startLineNumber;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Displays a user's information, including their profile picture.\n */\nexport interface IComUserMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type: 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/user**.\n   */\n  readonly name: 'graph.microsoft.com/user';\n  /**\n   * The properties of the user.\n   */\n  properties?: IPersonaProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IComUserMicrosoftGraphComponent.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ComUserMicrosoftGraphComponent, false otherwise.\n */\nexport function isComUserMicrosoftGraphComponent(\n  value: unknown\n): value is IComUserMicrosoftGraphComponent {\n  const obj = value as IComUserMicrosoftGraphComponent;\n  return (\n    typeof obj === 'object' && obj.type === 'Component' && obj.name === 'graph.microsoft.com/user'\n  );\n}\n\nexport type ComUserMicrosoftGraphComponentOptions = Omit<\n  IComUserMicrosoftGraphComponent,\n  'type' | 'name'\n>;\n\n/**\n * Displays a user's information, including their profile picture.\n */\nexport class ComUserMicrosoftGraphComponent implements IComUserMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type = 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/user**.\n   */\n  readonly name = 'graph.microsoft.com/user';\n  /**\n   * The properties of the user.\n   */\n  properties?: IPersonaProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: ComUserMicrosoftGraphComponentOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(\n    options: Omit<IComUserMicrosoftGraphComponent, 'type' | 'name'>\n  ): ComUserMicrosoftGraphComponent {\n    return new ComUserMicrosoftGraphComponent(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withProperties(properties: IPersonaProperties): this {\n    this.properties = properties;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents the properties of a Persona component.\n */\nexport interface IPersonaProperties {\n  /**\n   * The UPN of the persona.\n   */\n  userPrincipalName?: string;\n  /**\n   * The display name of the persona.\n   */\n  displayName?: string;\n}\n\nexport type PersonaPropertiesOptions = IPersonaProperties;\n\n/**\n * Represents the properties of a Persona component.\n */\nexport class PersonaProperties implements IPersonaProperties {\n  /**\n   * The UPN of the persona.\n   */\n  userPrincipalName?: string;\n  /**\n   * The display name of the persona.\n   */\n  displayName?: string;\n\n  constructor(options: PersonaPropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IPersonaProperties): PersonaProperties {\n    return new PersonaProperties(options);\n  }\n\n  withUserPrincipalName(userPrincipalName: string): this {\n    this.userPrincipalName = userPrincipalName;\n    return this;\n  }\n\n  withDisplayName(displayName: string): this {\n    this.displayName = displayName;\n    return this;\n  }\n}\n\n/**\n * Displays multiple users' information, including their profile pictures.\n */\nexport interface IComUsersMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type: 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/users**.\n   */\n  readonly name: 'graph.microsoft.com/users';\n  /**\n   * The properties of the set.\n   */\n  properties?: IPersonaSetProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IComUsersMicrosoftGraphComponent.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ComUsersMicrosoftGraphComponent, false otherwise.\n */\nexport function isComUsersMicrosoftGraphComponent(\n  value: unknown\n): value is IComUsersMicrosoftGraphComponent {\n  const obj = value as IComUsersMicrosoftGraphComponent;\n  return (\n    typeof obj === 'object' && obj.type === 'Component' && obj.name === 'graph.microsoft.com/users'\n  );\n}\n\nexport type ComUsersMicrosoftGraphComponentOptions = Omit<\n  IComUsersMicrosoftGraphComponent,\n  'type' | 'name'\n>;\n\n/**\n * Displays multiple users' information, including their profile pictures.\n */\nexport class ComUsersMicrosoftGraphComponent implements IComUsersMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type = 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/users**.\n   */\n  readonly name = 'graph.microsoft.com/users';\n  /**\n   * The properties of the set.\n   */\n  properties?: IPersonaSetProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: ComUsersMicrosoftGraphComponentOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(\n    options: Omit<IComUsersMicrosoftGraphComponent, 'type' | 'name'>\n  ): ComUsersMicrosoftGraphComponent {\n    return new ComUsersMicrosoftGraphComponent(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withProperties(properties: IPersonaSetProperties): this {\n    this.properties = properties;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents the properties of a PersonaSet component.\n */\nexport interface IPersonaSetProperties {\n  /**\n   * The users a PersonaSet component should display.\n   */\n  users?: IPersonaProperties[];\n}\n\nexport type PersonaSetPropertiesOptions = IPersonaSetProperties;\n\n/**\n * Represents the properties of a PersonaSet component.\n */\nexport class PersonaSetProperties implements IPersonaSetProperties {\n  /**\n   * The users a PersonaSet component should display.\n   */\n  users?: IPersonaProperties[];\n\n  constructor(options: PersonaSetPropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IPersonaSetProperties): PersonaSetProperties {\n    return new PersonaSetProperties(options);\n  }\n\n  withUsers(...users: IPersonaProperties[]): this {\n    this.users = users;\n    return this;\n  }\n}\n\n/**\n * Displays information about a generic graph resource.\n */\nexport interface IComResourceMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type: 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/resource**.\n   */\n  readonly name: 'graph.microsoft.com/resource';\n  /**\n   * The properties of the resource.\n   */\n  properties?: IResourceProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IComResourceMicrosoftGraphComponent.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ComResourceMicrosoftGraphComponent, false otherwise.\n */\nexport function isComResourceMicrosoftGraphComponent(\n  value: unknown\n): value is IComResourceMicrosoftGraphComponent {\n  const obj = value as IComResourceMicrosoftGraphComponent;\n  return (\n    typeof obj === 'object' &&\n    obj.type === 'Component' &&\n    obj.name === 'graph.microsoft.com/resource'\n  );\n}\n\nexport type ComResourceMicrosoftGraphComponentOptions = Omit<\n  IComResourceMicrosoftGraphComponent,\n  'type' | 'name'\n>;\n\n/**\n * Displays information about a generic graph resource.\n */\nexport class ComResourceMicrosoftGraphComponent implements IComResourceMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type = 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/resource**.\n   */\n  readonly name = 'graph.microsoft.com/resource';\n  /**\n   * The properties of the resource.\n   */\n  properties?: IResourceProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: ComResourceMicrosoftGraphComponentOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(\n    options: Omit<IComResourceMicrosoftGraphComponent, 'type' | 'name'>\n  ): ComResourceMicrosoftGraphComponent {\n    return new ComResourceMicrosoftGraphComponent(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withProperties(properties: IResourceProperties): this {\n    this.properties = properties;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents the properties of a resource component.\n */\nexport interface IResourceProperties {\n  /**\n   * The Id of the resource.\n   */\n  id?: string;\n  /**\n   * The reference to the resource.\n   */\n  resourceReference?: Record<string, string>;\n  /**\n   * The visualization of the resource.\n   */\n  resourceVisualization?: IResourceVisualization;\n}\n\nexport type ResourcePropertiesOptions = IResourceProperties;\n\n/**\n * Represents the properties of a resource component.\n */\nexport class ResourceProperties implements IResourceProperties {\n  /**\n   * The Id of the resource.\n   */\n  id?: string;\n  /**\n   * The reference to the resource.\n   */\n  resourceReference?: Record<string, string>;\n  /**\n   * The visualization of the resource.\n   */\n  resourceVisualization?: IResourceVisualization;\n\n  constructor(options: ResourcePropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IResourceProperties): ResourceProperties {\n    return new ResourceProperties(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withResourceReference(resourceReference: Record<string, string>): this {\n    this.resourceReference = resourceReference;\n    return this;\n  }\n\n  withResourceVisualization(resourceVisualization: IResourceVisualization): this {\n    this.resourceVisualization = resourceVisualization;\n    return this;\n  }\n}\n\n/**\n * Represents a visualization of a resource.\n */\nexport interface IResourceVisualization {\n  /**\n   * The media associated with the resource.\n   */\n  media?: string;\n}\n\nexport type ResourceVisualizationOptions = IResourceVisualization;\n\n/**\n * Represents a visualization of a resource.\n */\nexport class ResourceVisualization implements IResourceVisualization {\n  /**\n   * The media associated with the resource.\n   */\n  media?: string;\n\n  constructor(options: ResourceVisualizationOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IResourceVisualization): ResourceVisualization {\n    return new ResourceVisualization(options);\n  }\n\n  withMedia(media: string): this {\n    this.media = media;\n    return this;\n  }\n}\n\n/**\n * Displays information about a file resource.\n */\nexport interface IComFileMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type: 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/file**.\n   */\n  readonly name: 'graph.microsoft.com/file';\n  /**\n   * The properties of the file.\n   */\n  properties?: IFileProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IComFileMicrosoftGraphComponent.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ComFileMicrosoftGraphComponent, false otherwise.\n */\nexport function isComFileMicrosoftGraphComponent(\n  value: unknown\n): value is IComFileMicrosoftGraphComponent {\n  const obj = value as IComFileMicrosoftGraphComponent;\n  return (\n    typeof obj === 'object' && obj.type === 'Component' && obj.name === 'graph.microsoft.com/file'\n  );\n}\n\nexport type ComFileMicrosoftGraphComponentOptions = Omit<\n  IComFileMicrosoftGraphComponent,\n  'type' | 'name'\n>;\n\n/**\n * Displays information about a file resource.\n */\nexport class ComFileMicrosoftGraphComponent implements IComFileMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type = 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/file**.\n   */\n  readonly name = 'graph.microsoft.com/file';\n  /**\n   * The properties of the file.\n   */\n  properties?: IFileProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: ComFileMicrosoftGraphComponentOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(\n    options: Omit<IComFileMicrosoftGraphComponent, 'type' | 'name'>\n  ): ComFileMicrosoftGraphComponent {\n    return new ComFileMicrosoftGraphComponent(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withProperties(properties: IFileProperties): this {\n    this.properties = properties;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * Represents the properties of a file component.\n */\nexport interface IFileProperties {\n  /**\n   * The name of the file.\n   */\n  name?: string;\n  /**\n   * The file extension.\n   */\n  extension?: string;\n  /**\n   * The URL of the file.\n   */\n  url?: string;\n}\n\nexport type FilePropertiesOptions = IFileProperties;\n\n/**\n * Represents the properties of a file component.\n */\nexport class FileProperties implements IFileProperties {\n  /**\n   * The name of the file.\n   */\n  name?: string;\n  /**\n   * The file extension.\n   */\n  extension?: string;\n  /**\n   * The URL of the file.\n   */\n  url?: string;\n\n  constructor(options: FilePropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: IFileProperties): FileProperties {\n    return new FileProperties(options);\n  }\n\n  withName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  withExtension(extension: string): this {\n    this.extension = extension;\n    return this;\n  }\n\n  withUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n}\n\n/**\n * Displays information about a calendar event.\n */\nexport interface IComEventMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type: 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/event**.\n   */\n  readonly name: 'graph.microsoft.com/event';\n  /**\n   * The properties of the event.\n   */\n  properties?: ICalendarEventProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IComEventMicrosoftGraphComponent.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of ComEventMicrosoftGraphComponent, false otherwise.\n */\nexport function isComEventMicrosoftGraphComponent(\n  value: unknown\n): value is IComEventMicrosoftGraphComponent {\n  const obj = value as IComEventMicrosoftGraphComponent;\n  return (\n    typeof obj === 'object' && obj.type === 'Component' && obj.name === 'graph.microsoft.com/event'\n  );\n}\n\nexport type ComEventMicrosoftGraphComponentOptions = Omit<\n  IComEventMicrosoftGraphComponent,\n  'type' | 'name'\n>;\n\n/**\n * Displays information about a calendar event.\n */\nexport class ComEventMicrosoftGraphComponent implements IComEventMicrosoftGraphComponent {\n  /**\n   * Must be **Component**.\n   */\n  readonly type = 'Component';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Must be **graph.microsoft.com/event**.\n   */\n  readonly name = 'graph.microsoft.com/event';\n  /**\n   * The properties of the event.\n   */\n  properties?: ICalendarEventProperties;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(options: ComEventMicrosoftGraphComponentOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(\n    options: Omit<IComEventMicrosoftGraphComponent, 'type' | 'name'>\n  ): ComEventMicrosoftGraphComponent {\n    return new ComEventMicrosoftGraphComponent(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withProperties(properties: ICalendarEventProperties): this {\n    this.properties = properties;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * The properties of a calendar event.\n */\nexport interface ICalendarEventProperties {\n  /**\n   * The ID of the event.\n   */\n  id?: string;\n  /**\n   * The title of the event.\n   */\n  title?: string;\n  /**\n   * The start date and time of the event.\n   */\n  start?: string;\n  /**\n   * The end date and time of the event.\n   */\n  end?: string;\n  /**\n   * The status of the event.\n   */\n  status?: string;\n  /**\n   * The locations of the event.\n   */\n  locations?: string[];\n  /**\n   * The URL of the online meeting.\n   */\n  onlineMeetingUrl?: string;\n  /**\n   * Indicates if the event is all day.\n   */\n  isAllDay?: boolean;\n  /**\n   * The extension of the event.\n   */\n  extension?: string;\n  /**\n   * The URL of the event.\n   */\n  url?: string;\n  /**\n   * The attendees of the event.\n   */\n  attendees?: ICalendarEventAttendee[];\n  /**\n   * The organizer of the event.\n   */\n  organizer?: ICalendarEventAttendee;\n}\n\nexport type CalendarEventPropertiesOptions = ICalendarEventProperties;\n\n/**\n * The properties of a calendar event.\n */\nexport class CalendarEventProperties implements ICalendarEventProperties {\n  /**\n   * The ID of the event.\n   */\n  id?: string;\n  /**\n   * The title of the event.\n   */\n  title?: string;\n  /**\n   * The start date and time of the event.\n   */\n  start?: string;\n  /**\n   * The end date and time of the event.\n   */\n  end?: string;\n  /**\n   * The status of the event.\n   */\n  status?: string;\n  /**\n   * The locations of the event.\n   */\n  locations?: string[];\n  /**\n   * The URL of the online meeting.\n   */\n  onlineMeetingUrl?: string;\n  /**\n   * Indicates if the event is all day.\n   */\n  isAllDay?: boolean;\n  /**\n   * The extension of the event.\n   */\n  extension?: string;\n  /**\n   * The URL of the event.\n   */\n  url?: string;\n  /**\n   * The attendees of the event.\n   */\n  attendees?: ICalendarEventAttendee[];\n  /**\n   * The organizer of the event.\n   */\n  organizer?: ICalendarEventAttendee;\n\n  constructor(options: CalendarEventPropertiesOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ICalendarEventProperties): CalendarEventProperties {\n    return new CalendarEventProperties(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withStart(start: string): this {\n    this.start = start;\n    return this;\n  }\n\n  withEnd(end: string): this {\n    this.end = end;\n    return this;\n  }\n\n  withStatus(status: string): this {\n    this.status = status;\n    return this;\n  }\n\n  withLocations(...locations: string[]): this {\n    this.locations = locations;\n    return this;\n  }\n\n  withOnlineMeetingUrl(onlineMeetingUrl: string): this {\n    this.onlineMeetingUrl = onlineMeetingUrl;\n    return this;\n  }\n\n  withIsAllDay(isAllDay: boolean): this {\n    this.isAllDay = isAllDay;\n    return this;\n  }\n\n  withExtension(extension: string): this {\n    this.extension = extension;\n    return this;\n  }\n\n  withUrl(url: string): this {\n    this.url = url;\n    return this;\n  }\n\n  withAttendees(...attendees: ICalendarEventAttendee[]): this {\n    this.attendees = attendees;\n    return this;\n  }\n\n  withOrganizer(organizer: ICalendarEventAttendee): this {\n    this.organizer = organizer;\n    return this;\n  }\n}\n\n/**\n * Represents a calendar event attendee.\n */\nexport interface ICalendarEventAttendee {\n  /**\n   * The name of the attendee.\n   */\n  name?: string;\n  /**\n   * The email address of the attendee.\n   */\n  email?: string;\n  /**\n   * The title of the attendee.\n   */\n  title?: string;\n  /**\n   * The type of the attendee.\n   */\n  type?: string;\n  /**\n   * The status of the attendee.\n   */\n  status?: string;\n}\n\nexport type CalendarEventAttendeeOptions = ICalendarEventAttendee;\n\n/**\n * Represents a calendar event attendee.\n */\nexport class CalendarEventAttendee implements ICalendarEventAttendee {\n  /**\n   * The name of the attendee.\n   */\n  name?: string;\n  /**\n   * The email address of the attendee.\n   */\n  email?: string;\n  /**\n   * The title of the attendee.\n   */\n  title?: string;\n  /**\n   * The type of the attendee.\n   */\n  type?: string;\n  /**\n   * The status of the attendee.\n   */\n  status?: string;\n\n  constructor(options: CalendarEventAttendeeOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: ICalendarEventAttendee): CalendarEventAttendee {\n    return new CalendarEventAttendee(options);\n  }\n\n  withName(name: string): this {\n    this.name = name;\n    return this;\n  }\n\n  withEmail(email: string): this {\n    this.email = email;\n    return this;\n  }\n\n  withTitle(title: string): this {\n    this.title = title;\n    return this;\n  }\n\n  withType(type: string): this {\n    this.type = type;\n    return this;\n  }\n\n  withStatus(status: string): this {\n    this.status = status;\n    return this;\n  }\n}\n\n/**\n * A page inside a Carousel element.\n */\nexport interface ICarouselPage {\n  /**\n   * Must be **CarouselPage**.\n   */\n  readonly type: 'CarouselPage';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The elements in the page.\n   */\n  items: CardElementArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ICarouselPage.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of CarouselPage, false otherwise.\n */\nexport function isCarouselPage(value: unknown): value is ICarouselPage {\n  const obj = value as ICarouselPage;\n  return typeof obj === 'object' && obj.type === 'CarouselPage';\n}\n\nexport type CarouselPageOptions = Omit<ICarouselPage, 'type' | 'items'>;\n\n/**\n * A page inside a Carousel element.\n */\nexport class CarouselPage implements ICarouselPage {\n  /**\n   * Must be **CarouselPage**.\n   */\n  readonly type = 'CarouselPage';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The elements in the page.\n   */\n  items: CardElementArray;\n\n  constructor(...items: CardElementArray) {\n    this.items = items;\n  }\n\n  withOptions(value: CarouselPageOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withShowBorder(showBorder = true): this {\n    this.showBorder = showBorder;\n    return this;\n  }\n\n  withRoundedCorners(roundedCorners = true): this {\n    this.roundedCorners = roundedCorners;\n    return this;\n  }\n\n  withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this {\n    this.layouts = layouts;\n    return this;\n  }\n\n  withMinHeight(minHeight: string): this {\n    this.minHeight = minHeight;\n    return this;\n  }\n\n  withBackgroundImage(backgroundImage: string | IBackgroundImage): this {\n    this.backgroundImage = backgroundImage;\n    return this;\n  }\n\n  withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this {\n    this.verticalContentAlignment = verticalContentAlignment;\n    return this;\n  }\n\n  withRtl(rtl: boolean): this {\n    this.rtl = rtl;\n    return this;\n  }\n\n  withMaxHeight(maxHeight: string): this {\n    this.maxHeight = maxHeight;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withItems(...items: CardElementArray): this {\n    this.items = items;\n    return this;\n  }\n}\n\n/**\n * Represents a row of cells in a table.\n */\nexport interface ITableRow {\n  /**\n   * Must be **TableRow**.\n   */\n  readonly type: 'TableRow';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls how the content of every cell in the row should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table and columns.\n   */\n  horizontalCellContentAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of every cell in the row should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table and columns.\n   */\n  verticalCellContentAlignment?: VerticalAlignment;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The cells in the row.\n   */\n  cells?: TableCellArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ITableRow.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of TableRow, false otherwise.\n */\nexport function isTableRow(value: unknown): value is ITableRow {\n  const obj = value as ITableRow;\n  return typeof obj === 'object' && obj.type === 'TableRow';\n}\n\nexport type TableRowOptions = Omit<ITableRow, 'type'>;\n\n/**\n * Represents a row of cells in a table.\n */\nexport class TableRow implements ITableRow {\n  /**\n   * Must be **TableRow**.\n   */\n  readonly type = 'TableRow';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls how the content of every cell in the row should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table and columns.\n   */\n  horizontalCellContentAlignment?: HorizontalAlignment;\n  /**\n   * Controls how the content of every cell in the row should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table and columns.\n   */\n  verticalCellContentAlignment?: VerticalAlignment;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The cells in the row.\n   */\n  cells?: TableCellArray;\n\n  constructor(options: TableRowOptions = {}) {\n    Object.assign(this, options);\n  }\n\n  static from(options: Omit<ITableRow, 'type'>): TableRow {\n    return new TableRow(options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withShowBorder(showBorder = true): this {\n    this.showBorder = showBorder;\n    return this;\n  }\n\n  withRoundedCorners(roundedCorners = true): this {\n    this.roundedCorners = roundedCorners;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withHorizontalCellContentAlignment(horizontalCellContentAlignment: HorizontalAlignment): this {\n    this.horizontalCellContentAlignment = horizontalCellContentAlignment;\n    return this;\n  }\n\n  withVerticalCellContentAlignment(verticalCellContentAlignment: VerticalAlignment): this {\n    this.verticalCellContentAlignment = verticalCellContentAlignment;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withCells(...cells: TableCellArray): this {\n    this.cells = cells;\n    return this;\n  }\n}\n\n/**\n * Represents a cell in a table row.\n */\nexport interface ITableCell {\n  /**\n   * Must be **TableCell**.\n   */\n  readonly type: 'TableCell';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The items (elements) in the cell.\n   */\n  items: CardElementArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ITableCell.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of TableCell, false otherwise.\n */\nexport function isTableCell(value: unknown): value is ITableCell {\n  const obj = value as ITableCell;\n  return typeof obj === 'object' && obj.type === 'TableCell';\n}\n\nexport type TableCellOptions = Omit<ITableCell, 'type' | 'items'>;\n\n/**\n * Represents a cell in a table row.\n */\nexport class TableCell implements ITableCell {\n  /**\n   * Must be **TableCell**.\n   */\n  readonly type = 'TableCell';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The items (elements) in the cell.\n   */\n  items: CardElementArray;\n\n  constructor(...items: CardElementArray) {\n    this.items = items;\n  }\n\n  withOptions(value: TableCellOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this {\n    this.layouts = layouts;\n    return this;\n  }\n\n  withBleed(bleed = true): this {\n    this.bleed = bleed;\n    return this;\n  }\n\n  withMinHeight(minHeight: string): this {\n    this.minHeight = minHeight;\n    return this;\n  }\n\n  withBackgroundImage(backgroundImage: string | IBackgroundImage): this {\n    this.backgroundImage = backgroundImage;\n    return this;\n  }\n\n  withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this {\n    this.verticalContentAlignment = verticalContentAlignment;\n    return this;\n  }\n\n  withRtl(rtl: boolean): this {\n    this.rtl = rtl;\n    return this;\n  }\n\n  withMaxHeight(maxHeight: string): this {\n    this.maxHeight = maxHeight;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withItems(...items: CardElementArray): this {\n    this.items = items;\n    return this;\n  }\n}\n\n/**\n * A block of text inside a RichTextBlock element.\n */\nexport interface ITextRun {\n  /**\n   * Must be **TextRun**.\n   */\n  readonly type: 'TextRun';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The text to display. A subset of markdown is supported.\n   */\n  text: string;\n  /**\n   * The size of the text.\n   */\n  size?: TextSize;\n  /**\n   * The weight of the text.\n   */\n  weight?: TextWeight;\n  /**\n   * The color of the text.\n   */\n  color?: TextColor;\n  /**\n   * Controls whether the text should be renderer using a subtler variant of the select color.\n   */\n  isSubtle?: boolean;\n  /**\n   * The type of font to use for rendering.\n   */\n  fontType?: FontType;\n  /**\n   * Controls if the text should be italicized.\n   */\n  italic?: boolean;\n  /**\n   * Controls if the text should be struck through.\n   */\n  strikethrough?: boolean;\n  /**\n   * Controls if the text should be highlighted.\n   */\n  highlight?: boolean;\n  /**\n   * Controls if the text should be underlined.\n   */\n  underline?: boolean;\n  /**\n   * An Action that will be invoked when the text is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type ITextRun.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of TextRun, false otherwise.\n */\nexport function isTextRun(value: unknown): value is ITextRun {\n  const obj = value as ITextRun;\n  return typeof obj === 'object' && obj.type === 'TextRun';\n}\n\nexport type TextRunOptions = Omit<ITextRun, 'type' | 'text'>;\n\n/**\n * A block of text inside a RichTextBlock element.\n */\nexport class TextRun implements ITextRun {\n  /**\n   * Must be **TextRun**.\n   */\n  readonly type = 'TextRun';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * The text to display. A subset of markdown is supported.\n   */\n  text: string;\n  /**\n   * The size of the text.\n   */\n  size?: TextSize;\n  /**\n   * The weight of the text.\n   */\n  weight?: TextWeight;\n  /**\n   * The color of the text.\n   */\n  color?: TextColor;\n  /**\n   * Controls whether the text should be renderer using a subtler variant of the select color.\n   */\n  isSubtle?: boolean;\n  /**\n   * The type of font to use for rendering.\n   */\n  fontType?: FontType;\n  /**\n   * Controls if the text should be italicized.\n   */\n  italic?: boolean;\n  /**\n   * Controls if the text should be struck through.\n   */\n  strikethrough?: boolean;\n  /**\n   * Controls if the text should be highlighted.\n   */\n  highlight?: boolean;\n  /**\n   * Controls if the text should be underlined.\n   */\n  underline?: boolean;\n  /**\n   * An Action that will be invoked when the text is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n\n  constructor(text: string, options: TextRunOptions = {}) {\n    Object.assign(this, options);\n    this.text = text;\n  }\n\n  static from(options: Omit<ITextRun, 'type'>): TextRun {\n    return new TextRun(options.text, options);\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withText(text: string): this {\n    this.text = text;\n    return this;\n  }\n\n  withSize(size: TextSize): this {\n    this.size = size;\n    return this;\n  }\n\n  withWeight(weight: TextWeight): this {\n    this.weight = weight;\n    return this;\n  }\n\n  withColor(color: TextColor): this {\n    this.color = color;\n    return this;\n  }\n\n  withIsSubtle(isSubtle: boolean): this {\n    this.isSubtle = isSubtle;\n    return this;\n  }\n\n  withFontType(fontType: FontType): this {\n    this.fontType = fontType;\n    return this;\n  }\n\n  withItalic(italic = true): this {\n    this.italic = italic;\n    return this;\n  }\n\n  withStrikethrough(strikethrough = true): this {\n    this.strikethrough = strikethrough;\n    return this;\n  }\n\n  withHighlight(highlight = true): this {\n    this.highlight = highlight;\n    return this;\n  }\n\n  withUnderline(underline = true): this {\n    this.underline = underline;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n}\n\n/**\n * A column in a ColumnSet element.\n */\nexport interface IColumn {\n  /**\n   * Optional. If specified, must be **Column**.\n   */\n  readonly type: 'Column';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The width of the column. If expressed as a number, represents the relative weight of the column in the set. If expressed as a string, `auto` will automatically adjust the column's width according to its content, `stretch` will make the column use the remaining horizontal space (shared with other columns with width set to `stretch`) and using the `<number>px` format will give the column an explicit width in pixels.\n   */\n  width?: 'auto' | 'stretch' | string | number;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The elements in the column.\n   */\n  items: CardElementArray;\n}\n\n/**\n * @hidden\n * @internal\n *\n * Type guard to check if a value is of type IColumn.\n *\n * @param value The value to check.\n * @returns True if the value is an instance of Column, false otherwise.\n */\nexport function isColumn(value: unknown): value is IColumn {\n  const obj = value as IColumn;\n  return typeof obj === 'object' && obj.type === 'Column';\n}\n\nexport type ColumnOptions = Omit<IColumn, 'type' | 'items'>;\n\n/**\n * A column in a ColumnSet element.\n */\nexport class Column implements IColumn {\n  /**\n   * Optional. If specified, must be **Column**.\n   */\n  readonly type = 'Column';\n  /**\n   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.\n   */\n  id?: string;\n  /**\n   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).\n   */\n  requires?: IHostCapabilities;\n  /**\n   * The locale associated with the element.\n   */\n  lang?: string;\n  /**\n   * Controls the visibility of the element.\n   */\n  isVisible?: boolean;\n  /**\n   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.\n   */\n  separator?: boolean;\n  /**\n   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.\n   */\n  height?: ElementHeight;\n  /**\n   * Controls how the element should be horizontally aligned.\n   */\n  horizontalAlignment?: HorizontalAlignment;\n  /**\n   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.\n   */\n  spacing?: Spacing;\n  /**\n   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).\n   */\n  targetWidth?: TargetWidth;\n  /**\n   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.\n   */\n  isSortKey?: boolean;\n  /**\n   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.\n   */\n  selectAction?:\n    | IExecuteAction\n    | IOpenUrlAction\n    | IResetInputsAction\n    | ISubmitAction\n    | IToggleVisibilityAction;\n  /**\n   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.\n   */\n  style?: ContainerStyle;\n  /**\n   * Controls if a border should be displayed around the container.\n   */\n  showBorder?: boolean;\n  /**\n   * Controls if the container should have rounded corners.\n   */\n  roundedCorners?: boolean;\n  /**\n   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.\n   */\n  layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];\n  /**\n   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.\n   */\n  bleed?: boolean;\n  /**\n   * The minimum height, in pixels, of the container, in the `<number>px` format.\n   */\n  minHeight?: string;\n  /**\n   * Defines the container's background image.\n   */\n  backgroundImage?: string | IBackgroundImage;\n  /**\n   * Controls how the container's content should be vertically aligned.\n   */\n  verticalContentAlignment?: VerticalAlignment;\n  /**\n   * Controls if the content of the card is to be rendered left-to-right or right-to-left.\n   */\n  rtl?: boolean;\n  /**\n   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.\n   */\n  maxHeight?: string;\n  /**\n   * The width of the column. If expressed as a number, represents the relative weight of the column in the set. If expressed as a string, `auto` will automatically adjust the column's width according to its content, `stretch` will make the column use the remaining horizontal space (shared with other columns with width set to `stretch`) and using the `<number>px` format will give the column an explicit width in pixels.\n   */\n  width?: 'auto' | 'stretch' | string | number;\n  /**\n   * The area of a Layout.AreaGrid layout in which an element should be displayed.\n   */\n  'grid.area'?: string;\n  /**\n   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.\n   */\n  fallback?: FallbackElement;\n  /**\n   * The elements in the column.\n   */\n  items: CardElementArray;\n\n  constructor(...items: CardElementArray) {\n    this.items = items;\n  }\n\n  withOptions(value: ColumnOptions): this {\n    Object.assign(this, value);\n    return this;\n  }\n\n  withId(id: string): this {\n    this.id = id;\n    return this;\n  }\n\n  withRequires(requires: IHostCapabilities): this {\n    this.requires = requires;\n    return this;\n  }\n\n  withLang(lang: string): this {\n    this.lang = lang;\n    return this;\n  }\n\n  withIsVisible(isVisible = false): this {\n    this.isVisible = isVisible;\n    return this;\n  }\n\n  withSeparator(separator = true): this {\n    this.separator = separator;\n    return this;\n  }\n\n  withHeight(height: ElementHeight): this {\n    this.height = height;\n    return this;\n  }\n\n  withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this {\n    this.horizontalAlignment = horizontalAlignment;\n    return this;\n  }\n\n  withSpacing(spacing: Spacing): this {\n    this.spacing = spacing;\n    return this;\n  }\n\n  withTargetWidth(targetWidth: TargetWidth): this {\n    this.targetWidth = targetWidth;\n    return this;\n  }\n\n  withIsSortKey(isSortKey = true): this {\n    this.isSortKey = isSortKey;\n    return this;\n  }\n\n  withSelectAction(\n    selectAction:\n      | IExecuteAction\n      | IOpenUrlAction\n      | IResetInputsAction\n      | ISubmitAction\n      | IToggleVisibilityAction\n  ): this {\n    this.selectAction = selectAction;\n    return this;\n  }\n\n  withStyle(style: ContainerStyle): this {\n    this.style = style;\n    return this;\n  }\n\n  withShowBorder(showBorder = true): this {\n    this.showBorder = showBorder;\n    return this;\n  }\n\n  withRoundedCorners(roundedCorners = true): this {\n    this.roundedCorners = roundedCorners;\n    return this;\n  }\n\n  withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this {\n    this.layouts = layouts;\n    return this;\n  }\n\n  withBleed(bleed = true): this {\n    this.bleed = bleed;\n    return this;\n  }\n\n  withMinHeight(minHeight: string): this {\n    this.minHeight = minHeight;\n    return this;\n  }\n\n  withBackgroundImage(backgroundImage: string | IBackgroundImage): this {\n    this.backgroundImage = backgroundImage;\n    return this;\n  }\n\n  withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this {\n    this.verticalContentAlignment = verticalContentAlignment;\n    return this;\n  }\n\n  withRtl(rtl: boolean): this {\n    this.rtl = rtl;\n    return this;\n  }\n\n  withMaxHeight(maxHeight: string): this {\n    this.maxHeight = maxHeight;\n    return this;\n  }\n\n  withWidth(width: 'auto' | 'stretch' | string | number): this {\n    this.width = width;\n    return this;\n  }\n\n  withFallback(fallback: FallbackElement): this {\n    this.fallback = fallback;\n    return this;\n  }\n\n  withItems(...items: CardElementArray): this {\n    this.items = items;\n    return this;\n  }\n}\n"]}