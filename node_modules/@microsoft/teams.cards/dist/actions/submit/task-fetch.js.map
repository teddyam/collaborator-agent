{"version":3,"sources":["../../../src/actions/submit/task-fetch.ts"],"names":["SubmitAction"],"mappings":";;;;AAoBO,MAAM,wBAAwBA,iBAAyC,CAAA;AAAA;AAAA;AAAA;AAAA,EAI5E,IAAA;AAAA,EAEA,WAAY,CAAA,KAAA,EAA6B,OAA+B,GAAA,EAAI,EAAA;AAC1E,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAO,MAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAC3B,IAAA,IAAA,CAAK,IAAO,GAAA;AAAA,MACV,GAAG,KAAA;AAAA,MACH,OAAS,EAAA;AAAA,QACP,IAAM,EAAA;AAAA;AACR,KACF;AAAA;AACF,EAEA,OAAO,KAAK,OAAiC,EAAA;AAC3C,IAAA,OAAO,IAAI,eAAA,CAAgB,OAAQ,CAAA,IAAA,EAAM,OAAO,CAAA;AAAA;AAClD,EAEA,SAAS,KAAoC,EAAA;AAC3C,IAAA,IAAA,CAAK,IAAO,GAAA,KAAA;AACZ,IAAO,OAAA,IAAA;AAAA;AACT,EAEA,UAAU,KAA4B,EAAA;AACpC,IAAA,KAAA,CAAM,QAAS,CAAA,EAAE,GAAG,IAAA,CAAK,IAAM,EAAA,GAAG,KAAO,EAAA,OAAA,EAAS,EAAE,IAAA,EAAM,YAAa,EAAA,EAAG,CAAA;AAC1E,IAAO,OAAA,IAAA;AAAA;AAEX;AAMO,MAAM,aAAqD,CAAA;AAAA,EAChE,OAAU,GAAA;AAAA,IACR,IAAM,EAAA;AAAA,GACR;AAAA,EAEA,YAAY,IAA4B,EAAA;AAEtC,IAAA,IAAI,IAAM,EAAA;AACR,MAAA,MAAM,EAAE,OAAA,EAAS,GAAG,IAAA,EAAS,GAAA,IAAA;AAC7B,MAAO,MAAA,CAAA,MAAA,CAAO,MAAM,IAAI,CAAA;AAAA;AAC1B;AAEJ","file":"task-fetch.js","sourcesContent":["import { ISubmitAction, SubmitAction, SubmitActionOptions } from '../../core';\n\nimport { MSTeamsData } from './ms-teams-data';\n\nexport type TaskFetchActionOptions = SubmitActionOptions & { data: MSTeamsData<ITaskFetchData> };\n\nexport type TaskFetchDataValues = {\n  [key: string]: any;\n} & {\n  /** type is special so we shouldn't allow overriding it */\n  type?: never;\n};\n\nexport interface ITaskFetchAction extends ISubmitAction {\n  /**\n   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.\n   */\n  data: MSTeamsData<ITaskFetchData>;\n}\n\nexport class TaskFetchAction extends SubmitAction implements ITaskFetchAction {\n  /**\n   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.\n   */\n  data: MSTeamsData<ITaskFetchData>;\n\n  constructor(value?: TaskFetchDataValues, options: SubmitActionOptions = {}) {\n    super(options);\n    Object.assign(this, options);\n    this.data = {\n      ...value,\n      msteams: {\n        type: 'task/fetch',\n      },\n    };\n  }\n\n  static from(options: TaskFetchActionOptions) {\n    return new TaskFetchAction(options.data, options);\n  }\n\n  withData(value: MSTeamsData<ITaskFetchData>) {\n    this.data = value;\n    return this;\n  }\n\n  withValue(value: TaskFetchDataValues) {\n    super.withData({ ...this.data, ...value, msteams: { type: 'task/fetch' } });\n    return this;\n  }\n}\n\nexport interface ITaskFetchData {\n  type: 'task/fetch';\n}\n\nexport class TaskFetchData implements MSTeamsData<ITaskFetchData> {\n  msteams = {\n    type: 'task/fetch' as const,\n  };\n\n  constructor(data?: TaskFetchDataValues) {\n    // omit the msteams property if it exists\n    if (data) {\n      const { msteams, ...rest } = data;\n      Object.assign(this, rest);\n    }\n  }\n}\n"]}