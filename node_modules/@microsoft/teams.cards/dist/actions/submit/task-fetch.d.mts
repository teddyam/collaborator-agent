import { SubmitActionOptions, ISubmitAction, SubmitAction } from '../../core.mjs';
import { MSTeamsData } from './ms-teams-data.mjs';

type TaskFetchActionOptions = SubmitActionOptions & {
    data: MSTeamsData<ITaskFetchData>;
};
type TaskFetchDataValues = {
    [key: string]: any;
} & {
    /** type is special so we shouldn't allow overriding it */
    type?: never;
};
interface ITaskFetchAction extends ISubmitAction {
    /**
     * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.
     */
    data: MSTeamsData<ITaskFetchData>;
}
declare class TaskFetchAction extends SubmitAction implements ITaskFetchAction {
    /**
     * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.
     */
    data: MSTeamsData<ITaskFetchData>;
    constructor(value?: TaskFetchDataValues, options?: SubmitActionOptions);
    static from(options: TaskFetchActionOptions): TaskFetchAction;
    withData(value: MSTeamsData<ITaskFetchData>): this;
    withValue(value: TaskFetchDataValues): this;
}
interface ITaskFetchData {
    type: 'task/fetch';
}
declare class TaskFetchData implements MSTeamsData<ITaskFetchData> {
    msteams: {
        type: "task/fetch";
    };
    constructor(data?: TaskFetchDataValues);
}

export { type ITaskFetchAction, type ITaskFetchData, TaskFetchAction, type TaskFetchActionOptions, TaskFetchData, type TaskFetchDataValues };
