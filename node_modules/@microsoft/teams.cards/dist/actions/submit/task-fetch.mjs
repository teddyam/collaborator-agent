import { SubmitAction } from '../../core';

class TaskFetchAction extends SubmitAction {
  /**
   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.
   */
  data;
  constructor(value, options = {}) {
    super(options);
    Object.assign(this, options);
    this.data = {
      ...value,
      msteams: {
        type: "task/fetch"
      }
    };
  }
  static from(options) {
    return new TaskFetchAction(options.data, options);
  }
  withData(value) {
    this.data = value;
    return this;
  }
  withValue(value) {
    super.withData({ ...this.data, ...value, msteams: { type: "task/fetch" } });
    return this;
  }
}
class TaskFetchData {
  msteams = {
    type: "task/fetch"
  };
  constructor(data) {
    if (data) {
      const { msteams, ...rest } = data;
      Object.assign(this, rest);
    }
  }
}

export { TaskFetchAction, TaskFetchData };
//# sourceMappingURL=task-fetch.mjs.map
//# sourceMappingURL=task-fetch.mjs.map