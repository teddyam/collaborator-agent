{"version":3,"sources":["../../../src/actions/submit/invoke.ts"],"names":["SubmitAction"],"mappings":";;;;AAaO,MAAM,qBAAqBA,iBAAsC,CAAA;AAAA;AAAA;AAAA;AAAA,EAItE,IAAA;AAAA,EAEA,WAAY,CAAA,KAAA,EAAa,OAA+B,GAAA,EAAI,EAAA;AAC1D,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAO,MAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAC3B,IAAA,IAAA,CAAK,OAAO,EAAE,OAAA,EAAS,IAAI,UAAA,CAAW,KAAK,CAAE,EAAA;AAAA;AAC/C,EAEA,OAAO,KAAK,OAA8B,EAAA;AACxC,IAAA,OAAO,IAAI,YAAa,CAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,CAAQ,OAAO,OAAO,CAAA;AAAA;AAC7D,EAEA,SAAS,KAAoB,EAAA;AAC3B,IAAA,KAAA,CAAM,QAAS,CAAA,EAAE,OAAS,EAAA,KAAA,EAAO,CAAA;AACjC,IAAO,OAAA,IAAA;AAAA;AACT,EAEA,UAAU,KAAY,EAAA;AACpB,IAAK,IAAA,CAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA,KAAA;AAC1B,IAAO,OAAA,IAAA;AAAA;AAEX;AAWO,MAAM,UAAkC,CAAA;AAAA,EAC7C,IAAA;AAAA;AAAA;AAAA;AAAA,EAKA,KAAA;AAAA,EAEA,YAAY,KAAa,EAAA;AACvB,IAAA,IAAA,CAAK,IAAO,GAAA,QAAA;AACZ,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AAEjB","file":"invoke.js","sourcesContent":["import { ISubmitAction, SubmitAction, SubmitActionOptions } from '../../core';\n\nimport { MSTeamsData } from './ms-teams-data';\n\nexport type InvokeActionOptions = SubmitActionOptions & { data: MSTeamsData<IInvokeData> };\n\nexport interface IInvokeAction extends ISubmitAction {\n  /**\n   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.\n   */\n  data: MSTeamsData<IInvokeData>;\n}\n\nexport class InvokeAction extends SubmitAction implements IInvokeAction {\n  /**\n   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.\n   */\n  data: MSTeamsData<IInvokeData>;\n\n  constructor(value?: any, options: SubmitActionOptions = {}) {\n    super(options);\n    Object.assign(this, options);\n    this.data = { msteams: new InvokeData(value) };\n  }\n\n  static from(options: InvokeActionOptions) {\n    return new InvokeAction(options.data.msteams.value, options);\n  }\n\n  withData(value: IInvokeData) {\n    super.withData({ msteams: value });\n    return this;\n  }\n\n  withValue(value: any) {\n    this.data.msteams.value = value;\n    return this;\n  }\n}\n\nexport interface IInvokeData {\n  type: 'invoke';\n\n  /**\n   * Set the value to send with the invoke\n   */\n  value?: any;\n}\n\nexport class InvokeData implements IInvokeData {\n  type: 'invoke';\n\n  /**\n   * Set the value to send with the invoke\n   */\n  value?: any;\n\n  constructor(value?: any) {\n    this.type = 'invoke';\n    this.value = value;\n  }\n}\n"]}