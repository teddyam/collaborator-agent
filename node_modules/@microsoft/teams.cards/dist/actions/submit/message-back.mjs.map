{"version":3,"sources":["../../../src/actions/submit/message-back.ts"],"names":[],"mappings":";;AAeO,MAAM,0BAA0B,YAA2C,CAAA;AAAA;AAAA;AAAA;AAAA,EAIhF,IAAA;AAAA,EAEA,WAAY,CAAA,IAAA,EAAwB,OAA+B,GAAA,EAAI,EAAA;AACrE,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAO,MAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAC3B,IAAA,IAAA,CAAK,IAAO,GAAA;AAAA,MACV,OAAA,EAAS,IAAI,eAAgB,CAAA,IAAA,CAAK,MAAM,IAAK,CAAA,KAAA,EAAO,KAAK,WAAW;AAAA,KACtE;AAAA;AACF,EAEA,OAAO,KAAK,OAAmC,EAAA;AAC7C,IAAA,OAAO,IAAI,iBAAA,CAAkB,OAAQ,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA;AAAA;AAC5D,EAEA,SAAS,KAAyB,EAAA;AAChC,IAAA,KAAA,CAAM,QAAS,CAAA,EAAE,OAAS,EAAA,KAAA,EAAO,CAAA;AACjC,IAAO,OAAA,IAAA;AAAA;AAEX;AAuBO,MAAM,eAA4C,CAAA;AAAA,EACvD,IAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,KAAA;AAAA,EAEA,WAAA,CAAY,IAAc,EAAA,KAAA,EAAe,WAAsB,EAAA;AAC7D,IAAA,IAAA,CAAK,IAAO,GAAA,aAAA;AACZ,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,IAAA,IAAA,CAAK,WAAc,GAAA,WAAA;AAAA;AACrB,EAEA,gBAAgB,KAAe,EAAA;AAC7B,IAAA,IAAA,CAAK,WAAc,GAAA,KAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AAEX","file":"message-back.mjs","sourcesContent":["import { ISubmitAction, SubmitAction, SubmitActionOptions } from '../../core';\n\nimport { MSTeamsData } from './ms-teams-data';\n\nexport type MessageBackActionOptions = SubmitActionOptions & {\n  data: MSTeamsData<IMessageBackData>;\n};\n\nexport interface IMessageBackAction extends ISubmitAction {\n  /**\n   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.\n   */\n  data: MSTeamsData<IMessageBackData>;\n}\n\nexport class MessageBackAction extends SubmitAction implements IMessageBackAction {\n  /**\n   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.\n   */\n  data: MSTeamsData<IMessageBackData>;\n\n  constructor(data: IMessageBackData, options: SubmitActionOptions = {}) {\n    super(options);\n    Object.assign(this, options);\n    this.data = {\n      msteams: new MessageBackData(data.text, data.value, data.displayText),\n    };\n  }\n\n  static from(options: MessageBackActionOptions) {\n    return new MessageBackAction(options.data.msteams, options);\n  }\n\n  withData(value: IMessageBackData) {\n    super.withData({ msteams: value });\n    return this;\n  }\n}\n\nexport interface IMessageBackData {\n  type: 'messageBack';\n\n  /**\n   * Sent to your bot when the action is performed.\n   */\n  text: string;\n\n  /**\n   * Used by the user in the chat stream when the action is performed.\n   * This text isn't sent to your bot.\n   */\n  displayText?: string;\n\n  /**\n   * Sent to your bot when the action is performed. You can encode context\n   * for the action, such as unique identifiers or a `JSON` object.\n   */\n  value: string;\n}\n\nexport class MessageBackData implements IMessageBackData {\n  type: 'messageBack';\n\n  /**\n   * Sent to your bot when the action is performed.\n   */\n  text: string;\n\n  /**\n   * Used by the user in the chat stream when the action is performed.\n   * This text isn't sent to your bot.\n   */\n  displayText?: string;\n\n  /**\n   * Sent to your bot when the action is performed. You can encode context\n   * for the action, such as unique identifiers or a `JSON` object.\n   */\n  value: string;\n\n  constructor(text: string, value: string, displayText?: string) {\n    this.type = 'messageBack';\n    this.text = text;\n    this.value = value;\n    this.displayText = displayText;\n  }\n\n  withDisplayText(value: string) {\n    this.displayText = value;\n    return this;\n  }\n}\n"]}