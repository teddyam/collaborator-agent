'use strict';

function isAdaptiveCard(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "AdaptiveCard";
}
class AdaptiveCard {
  /**
   * Must be **AdaptiveCard**.
   */
  type = "AdaptiveCard";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
   */
  layouts;
  /**
   * The minimum height, in pixels, of the container, in the `<number>px` format.
   */
  minHeight;
  /**
   * Defines the container's background image.
   */
  backgroundImage;
  /**
   * Controls how the container's content should be vertically aligned.
   */
  verticalContentAlignment;
  /**
   * Controls if the content of the card is to be rendered left-to-right or right-to-left.
   */
  rtl;
  /**
   * A URL to the Adaptive Card schema the card is authored against.
   */
  $schema;
  /**
   * The Adaptive Card schema version the card is authored against.
   */
  version;
  /**
   * The text that should be displayed if the client is not able to render the card.
   */
  fallbackText;
  /**
   * The text that should be spoken for the entire card.
   */
  speak;
  /**
   * Defines how the card can be refreshed by making a request to the target Bot.
   */
  refresh;
  /**
   * Defines authentication information to enable on-behalf-of single-sign-on or just-in-time OAuth. This information is used in conjunction with the refresh property and Action.Execute in general.
   */
  authentication;
  /**
   * Teams-specific metadata associated with the card.
   */
  msTeams;
  /**
   * Metadata associated with the card.
   */
  metadata;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The body of the card, comprised of a list of elements displayed according to the layouts property. If the layouts property is not specified, a Layout.Stack is used.
   */
  body;
  /**
   * The card level actions, which always appear at the bottom of the card.
   */
  actions;
  constructor(...body) {
    this.body = body;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withLayouts(...layouts) {
    this.layouts = layouts;
    return this;
  }
  withMinHeight(minHeight) {
    this.minHeight = minHeight;
    return this;
  }
  withBackgroundImage(backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }
  withVerticalContentAlignment(verticalContentAlignment) {
    this.verticalContentAlignment = verticalContentAlignment;
    return this;
  }
  withRtl(rtl) {
    this.rtl = rtl;
    return this;
  }
  with$schema($schema) {
    this.$schema = $schema;
    return this;
  }
  withVersion(version) {
    this.version = version;
    return this;
  }
  withFallbackText(fallbackText) {
    this.fallbackText = fallbackText;
    return this;
  }
  withSpeak(speak) {
    this.speak = speak;
    return this;
  }
  withRefresh(refresh) {
    this.refresh = refresh;
    return this;
  }
  withAuthentication(authentication) {
    this.authentication = authentication;
    return this;
  }
  withMsTeams(msTeams) {
    this.msTeams = msTeams;
    return this;
  }
  withMetadata(metadata) {
    this.metadata = metadata;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withBody(...body) {
    this.body = body;
    return this;
  }
  withActions(...actions) {
    this.actions = actions;
    return this;
  }
}
class HostCapabilities {
}
function isExecuteAction(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Action.Execute";
}
class ExecuteAction {
  /**
   * Must be **Action.Execute**.
   */
  type = "Action.Execute";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The title of the action, as it appears on buttons.
   */
  title;
  /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
  iconUrl;
  /**
   * Control the style of the action, affecting its visual and spoken representations.
   */
  style;
  /**
   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
   */
  mode;
  /**
   * The tooltip text to display when the action is hovered over.
   */
  tooltip;
  /**
   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
   */
  isEnabled;
  /**
   * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.
   */
  data;
  /**
   * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  associatedInputs;
  /**
   * Controls if the action is enabled only if at least one required input has been filled by the user.
   */
  conditionallyEnabled;
  /**
   * The verb of the action.
   */
  verb;
  /**
   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ExecuteAction(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withIconUrl(iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withMode(mode) {
    this.mode = mode;
    return this;
  }
  withTooltip(tooltip) {
    this.tooltip = tooltip;
    return this;
  }
  withIsEnabled(isEnabled = false) {
    this.isEnabled = isEnabled;
    return this;
  }
  withData(data) {
    this.data = data;
    return this;
  }
  withAssociatedInputs(associatedInputs) {
    this.associatedInputs = associatedInputs;
    return this;
  }
  withConditionallyEnabled(conditionallyEnabled = true) {
    this.conditionallyEnabled = conditionallyEnabled;
    return this;
  }
  withVerb(verb) {
    this.verb = verb;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isSubmitAction(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Action.Submit";
}
class SubmitAction {
  /**
   * Must be **Action.Submit**.
   */
  type = "Action.Submit";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The title of the action, as it appears on buttons.
   */
  title;
  /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
  iconUrl;
  /**
   * Control the style of the action, affecting its visual and spoken representations.
   */
  style;
  /**
   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
   */
  mode;
  /**
   * The tooltip text to display when the action is hovered over.
   */
  tooltip;
  /**
   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
   */
  isEnabled;
  /**
   * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.
   */
  data;
  /**
   * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  associatedInputs;
  /**
   * Controls if the action is enabled only if at least one required input has been filled by the user.
   */
  conditionallyEnabled;
  /**
   * Teams-specific metadata associated with the action.
   */
  msTeams;
  /**
   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new SubmitAction(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withIconUrl(iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withMode(mode) {
    this.mode = mode;
    return this;
  }
  withTooltip(tooltip) {
    this.tooltip = tooltip;
    return this;
  }
  withIsEnabled(isEnabled = false) {
    this.isEnabled = isEnabled;
    return this;
  }
  withData(data) {
    this.data = data;
    return this;
  }
  withAssociatedInputs(associatedInputs) {
    this.associatedInputs = associatedInputs;
    return this;
  }
  withConditionallyEnabled(conditionallyEnabled = true) {
    this.conditionallyEnabled = conditionallyEnabled;
    return this;
  }
  withMsTeams(msTeams) {
    this.msTeams = msTeams;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class TeamsSubmitActionProperties {
  /**
   * Defines how feedback is provided to the end-user when the action is executed.
   */
  feedback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TeamsSubmitActionProperties(options);
  }
  withFeedback(feedback) {
    this.feedback = feedback;
    return this;
  }
}
class TeamsSubmitActionFeedback {
  /**
   * Defines if a feedback message should be displayed after the action is executed.
   */
  hide;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TeamsSubmitActionFeedback(options);
  }
  withHide(hide) {
    this.hide = hide;
    return this;
  }
}
function isOpenUrlAction(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Action.OpenUrl";
}
class OpenUrlAction {
  /**
   * Must be **Action.OpenUrl**.
   */
  type = "Action.OpenUrl";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The title of the action, as it appears on buttons.
   */
  title;
  /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
  iconUrl;
  /**
   * Control the style of the action, affecting its visual and spoken representations.
   */
  style;
  /**
   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
   */
  mode;
  /**
   * The tooltip text to display when the action is hovered over.
   */
  tooltip;
  /**
   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
   */
  isEnabled;
  /**
   * The URL to open.
   */
  url;
  /**
   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(url, options = {}) {
    Object.assign(this, options);
    this.url = url;
  }
  static from(options) {
    return new OpenUrlAction(options.url, options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withIconUrl(iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withMode(mode) {
    this.mode = mode;
    return this;
  }
  withTooltip(tooltip) {
    this.tooltip = tooltip;
    return this;
  }
  withIsEnabled(isEnabled = false) {
    this.isEnabled = isEnabled;
    return this;
  }
  withUrl(url) {
    this.url = url;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isToggleVisibilityAction(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Action.ToggleVisibility";
}
class ToggleVisibilityAction {
  /**
   * Must be **Action.ToggleVisibility**.
   */
  type = "Action.ToggleVisibility";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The title of the action, as it appears on buttons.
   */
  title;
  /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
  iconUrl;
  /**
   * Control the style of the action, affecting its visual and spoken representations.
   */
  style;
  /**
   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
   */
  mode;
  /**
   * The tooltip text to display when the action is hovered over.
   */
  tooltip;
  /**
   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
   */
  isEnabled;
  /**
   * The Ids of the elements to toggle the visibility of.
   */
  targetElements;
  /**
   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ToggleVisibilityAction(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withIconUrl(iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withMode(mode) {
    this.mode = mode;
    return this;
  }
  withTooltip(tooltip) {
    this.tooltip = tooltip;
    return this;
  }
  withIsEnabled(isEnabled = false) {
    this.isEnabled = isEnabled;
    return this;
  }
  withTargetElements(...targetElements) {
    this.targetElements = targetElements;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class TargetElement {
  /**
   * The Id of the element to change the visibility of.
   */
  elementId;
  /**
   * The new visibility state of the element.
   */
  isVisible;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TargetElement(options);
  }
  withElementId(elementId) {
    this.elementId = elementId;
    return this;
  }
  withIsVisible(isVisible) {
    this.isVisible = isVisible;
    return this;
  }
}
function isShowCardAction(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Action.ShowCard";
}
class ShowCardAction {
  /**
   * Must be **Action.ShowCard**.
   */
  type = "Action.ShowCard";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The title of the action, as it appears on buttons.
   */
  title;
  /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
  iconUrl;
  /**
   * Control the style of the action, affecting its visual and spoken representations.
   */
  style;
  /**
   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
   */
  mode;
  /**
   * The tooltip text to display when the action is hovered over.
   */
  tooltip;
  /**
   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
   */
  isEnabled;
  /**
   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The card that should be displayed when the action is executed.
   */
  card;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ShowCardAction(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withIconUrl(iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withMode(mode) {
    this.mode = mode;
    return this;
  }
  withTooltip(tooltip) {
    this.tooltip = tooltip;
    return this;
  }
  withIsEnabled(isEnabled = false) {
    this.isEnabled = isEnabled;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withCard(card) {
    this.card = card;
    return this;
  }
}
function isResetInputsAction(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Action.ResetInputs";
}
class ResetInputsAction {
  /**
   * Must be **Action.ResetInputs**.
   */
  type = "Action.ResetInputs";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The title of the action, as it appears on buttons.
   */
  title;
  /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
  iconUrl;
  /**
   * Control the style of the action, affecting its visual and spoken representations.
   */
  style;
  /**
   * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
   */
  mode;
  /**
   * The tooltip text to display when the action is hovered over.
   */
  tooltip;
  /**
   * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
   */
  isEnabled;
  /**
   * The Ids of the inputs that should be reset.
   */
  targetInputIds;
  /**
   * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ResetInputsAction(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withIconUrl(iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withMode(mode) {
    this.mode = mode;
    return this;
  }
  withTooltip(tooltip) {
    this.tooltip = tooltip;
    return this;
  }
  withIsEnabled(isEnabled = false) {
    this.isEnabled = isEnabled;
    return this;
  }
  withTargetInputIds(...targetInputIds) {
    this.targetInputIds = targetInputIds;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isStackLayout(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Layout.Stack";
}
class StackLayout {
  /**
   * Must be **Layout.Stack**.
   */
  type = "Layout.Stack";
  /**
   * Controls for which card width the layout should be used.
   */
  targetWidth;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new StackLayout(options);
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
}
function isFlowLayout(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Layout.Flow";
}
class FlowLayout {
  /**
   * Must be **Layout.Flow**.
   */
  type = "Layout.Flow";
  /**
   * Controls for which card width the layout should be used.
   */
  targetWidth;
  /**
   * Controls how the content of the container should be horizontally aligned.
   */
  horizontalItemsAlignment;
  /**
   * Controls how the content of the container should be vertically aligned.
   */
  verticalItemsAlignment;
  /**
   * Controls how item should fit inside the container.
   */
  itemFit;
  /**
   * The minimum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.
   */
  minItemWidth;
  /**
   * The maximum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.
   */
  maxItemWidth;
  /**
   * The width, in pixels, of each item, in the `<number>px` format. Should not be used if maxItemWidth and/or minItemWidth are set.
   */
  itemWidth;
  /**
   * The space between items.
   */
  columnSpacing;
  /**
   * The space between rows of items.
   */
  rowSpacing;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new FlowLayout(options);
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withHorizontalItemsAlignment(horizontalItemsAlignment) {
    this.horizontalItemsAlignment = horizontalItemsAlignment;
    return this;
  }
  withVerticalItemsAlignment(verticalItemsAlignment) {
    this.verticalItemsAlignment = verticalItemsAlignment;
    return this;
  }
  withItemFit(itemFit) {
    this.itemFit = itemFit;
    return this;
  }
  withMinItemWidth(minItemWidth) {
    this.minItemWidth = minItemWidth;
    return this;
  }
  withMaxItemWidth(maxItemWidth) {
    this.maxItemWidth = maxItemWidth;
    return this;
  }
  withItemWidth(itemWidth) {
    this.itemWidth = itemWidth;
    return this;
  }
  withColumnSpacing(columnSpacing) {
    this.columnSpacing = columnSpacing;
    return this;
  }
  withRowSpacing(rowSpacing) {
    this.rowSpacing = rowSpacing;
    return this;
  }
}
function isAreaGridLayout(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Layout.AreaGrid";
}
class AreaGridLayout {
  /**
   * Must be **Layout.AreaGrid**.
   */
  type = "Layout.AreaGrid";
  /**
   * Controls for which card width the layout should be used.
   */
  targetWidth;
  /**
   * The columns in the grid layout, defined as a percentage of the available width or in pixels using the `<number>px` format.
   */
  columns;
  /**
   * The areas in the grid layout.
   */
  areas;
  /**
   * The space between columns.
   */
  columnSpacing;
  /**
   * The space between rows.
   */
  rowSpacing;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new AreaGridLayout(options);
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withColumns(...columns) {
    this.columns = columns;
    return this;
  }
  withAreas(...areas) {
    this.areas = areas;
    return this;
  }
  withColumnSpacing(columnSpacing) {
    this.columnSpacing = columnSpacing;
    return this;
  }
  withRowSpacing(rowSpacing) {
    this.rowSpacing = rowSpacing;
    return this;
  }
}
class GridArea {
  /**
   * The name of the area. To place an element in this area, set its `grid.area` property to match the name of the area.
   */
  name;
  /**
   * The start column index of the area. Column indices start at 1.
   */
  column;
  /**
   * Defines how many columns the area should span.
   */
  columnSpan;
  /**
   * The start row index of the area. Row indices start at 1.
   */
  row;
  /**
   * Defines how many rows the area should span.
   */
  rowSpan;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new GridArea(options);
  }
  withName(name) {
    this.name = name;
    return this;
  }
  withColumn(column) {
    this.column = column;
    return this;
  }
  withColumnSpan(columnSpan) {
    this.columnSpan = columnSpan;
    return this;
  }
  withRow(row) {
    this.row = row;
    return this;
  }
  withRowSpan(rowSpan) {
    this.rowSpan = rowSpan;
    return this;
  }
}
class BackgroundImage {
  /**
   * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.
   */
  url;
  /**
   * Controls how the image should fill the area.
   */
  fillMode;
  /**
   * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.
   */
  horizontalAlignment;
  /**
   * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.
   */
  verticalAlignment;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new BackgroundImage(options);
  }
  withUrl(url) {
    this.url = url;
    return this;
  }
  withFillMode(fillMode) {
    this.fillMode = fillMode;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withVerticalAlignment(verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
    return this;
  }
}
class RefreshDefinition {
  /**
   * The Action.Execute action to invoke to refresh the card.
   */
  action;
  /**
   * The list of user Ids for which the card will be automatically refreshed. In Teams, in chats or channels with more than 60 users, the card will automatically refresh only for users specified in the userIds list. Other users will have to manually click on a "refresh" button. In contexts with fewer than 60 users, the card will automatically refresh for all users.
   */
  userIds;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new RefreshDefinition(options);
  }
  withAction(action) {
    this.action = action;
    return this;
  }
  withUserIds(...userIds) {
    this.userIds = userIds;
    return this;
  }
}
class Authentication {
  /**
   * The text that can be displayed to the end user when prompting them to authenticate.
   */
  text;
  /**
   * The identifier for registered OAuth connection setting information.
   */
  connectionName;
  /**
   * The buttons that should be displayed to the user when prompting for authentication. The array MUST contain one button of type “signin”. Other button types are not currently supported.
   */
  buttons;
  /**
   * Provides information required to enable on-behalf-of single sign-on user authentication.
   */
  tokenExchangeResource;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Authentication(options);
  }
  withText(text) {
    this.text = text;
    return this;
  }
  withConnectionName(connectionName) {
    this.connectionName = connectionName;
    return this;
  }
  withButtons(...buttons) {
    this.buttons = buttons;
    return this;
  }
  withTokenExchangeResource(tokenExchangeResource) {
    this.tokenExchangeResource = tokenExchangeResource;
    return this;
  }
}
class AuthCardButton {
  /**
   * Must be **signin**.
   */
  type;
  /**
   * The caption of the button.
   */
  title;
  /**
   * A URL to an image to display alongside the button’s caption.
   */
  image;
  /**
   * The value associated with the button. The meaning of value depends on the button’s type.
   */
  value;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new AuthCardButton(options);
  }
  withType(type) {
    this.type = type;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withImage(image) {
    this.image = image;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
}
class TokenExchangeResource {
  /**
   * The unique identified of this token exchange instance.
   */
  id;
  /**
   * An application ID or resource identifier with which to exchange a token on behalf of. This property is identity provider- and application-specific.
   */
  uri;
  /**
   * An identifier for the identity provider with which to attempt a token exchange.
   */
  providerId;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TokenExchangeResource(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withUri(uri) {
    this.uri = uri;
    return this;
  }
  withProviderId(providerId) {
    this.providerId = providerId;
    return this;
  }
}
class TeamsCardProperties {
  /**
     * Controls the width of the card in a Teams chat.
  
  Note that setting `width` to "full" will not actually stretch the card to the "full width" of the chat pane. It will only make the card wider than when the `width` property isn't set.
     */
  width;
  /**
   * The Teams-specific entities associated with the card.
   */
  entities;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TeamsCardProperties(options);
  }
  withWidth(width) {
    this.width = width;
    return this;
  }
  withEntities(...entities) {
    this.entities = entities;
    return this;
  }
}
function isMention(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "mention";
}
class Mention {
  /**
   * Must be **mention**.
   */
  type = "mention";
  /**
   * The text that will be substituted with the mention.
   */
  text;
  /**
   * Defines the entity being mentioned.
   */
  mentioned;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Mention(options);
  }
  withText(text) {
    this.text = text;
    return this;
  }
  withMentioned(mentioned) {
    this.mentioned = mentioned;
    return this;
  }
}
class MentionedEntity {
  /**
   * The Id of a person (typically a Microsoft Entra user Id) or tag.
   */
  id;
  /**
   * The name of the mentioned entity.
   */
  name;
  /**
   * The type of the mentioned entity.
   */
  mentionType;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new MentionedEntity(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withName(name) {
    this.name = name;
    return this;
  }
  withMentionType(mentionType) {
    this.mentionType = mentionType;
    return this;
  }
}
class CardMetadata {
  /**
   * The URL the card originates from. When `webUrl` is set, the card is dubbed an **Adaptive Card-based Loop Component** and, when pasted in Teams or other Loop Component-capable host applications, the URL will unfurl to the same exact card.
   */
  webUrl;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new CardMetadata(options);
  }
  withWebUrl(webUrl) {
    this.webUrl = webUrl;
    return this;
  }
}
function isContainer(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Container";
}
class Container {
  /**
   * Must be **Container**.
   */
  type = "Container";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * Controls if a border should be displayed around the container.
   */
  showBorder;
  /**
   * Controls if the container should have rounded corners.
   */
  roundedCorners;
  /**
   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
   */
  layouts;
  /**
   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
   */
  bleed;
  /**
   * The minimum height, in pixels, of the container, in the `<number>px` format.
   */
  minHeight;
  /**
   * Defines the container's background image.
   */
  backgroundImage;
  /**
   * Controls how the container's content should be vertically aligned.
   */
  verticalContentAlignment;
  /**
   * Controls if the content of the card is to be rendered left-to-right or right-to-left.
   */
  rtl;
  /**
   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
   */
  maxHeight;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The elements in the container.
   */
  items;
  constructor(...items) {
    this.items = items;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withShowBorder(showBorder = true) {
    this.showBorder = showBorder;
    return this;
  }
  withRoundedCorners(roundedCorners = true) {
    this.roundedCorners = roundedCorners;
    return this;
  }
  withLayouts(...layouts) {
    this.layouts = layouts;
    return this;
  }
  withBleed(bleed = true) {
    this.bleed = bleed;
    return this;
  }
  withMinHeight(minHeight) {
    this.minHeight = minHeight;
    return this;
  }
  withBackgroundImage(backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }
  withVerticalContentAlignment(verticalContentAlignment) {
    this.verticalContentAlignment = verticalContentAlignment;
    return this;
  }
  withRtl(rtl) {
    this.rtl = rtl;
    return this;
  }
  withMaxHeight(maxHeight) {
    this.maxHeight = maxHeight;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withItems(...items) {
    this.items = items;
    return this;
  }
}
function isActionSet(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "ActionSet";
}
class ActionSet {
  /**
   * Must be **ActionSet**.
   */
  type = "ActionSet";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The actions in the set.
   */
  actions;
  constructor(...actions) {
    this.actions = actions;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withActions(...actions) {
    this.actions = actions;
    return this;
  }
}
function isColumnSet(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "ColumnSet";
}
class ColumnSet {
  /**
   * Must be **ColumnSet**.
   */
  type = "ColumnSet";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * Controls if a border should be displayed around the container.
   */
  showBorder;
  /**
   * Controls if the container should have rounded corners.
   */
  roundedCorners;
  /**
   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
   */
  bleed;
  /**
   * The minimum height, in pixels, of the container, in the `<number>px` format.
   */
  minHeight;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The columns in the set.
   */
  columns;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ColumnSet(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withShowBorder(showBorder = true) {
    this.showBorder = showBorder;
    return this;
  }
  withRoundedCorners(roundedCorners = true) {
    this.roundedCorners = roundedCorners;
    return this;
  }
  withBleed(bleed = true) {
    this.bleed = bleed;
    return this;
  }
  withMinHeight(minHeight) {
    this.minHeight = minHeight;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withColumns(...columns) {
    this.columns = columns;
    return this;
  }
}
function isMedia(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Media";
}
class Media {
  /**
   * Must be **Media**.
   */
  type = "Media";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The sources for the media. For YouTube, Dailymotion and Vimeo, only one source can be specified.
   */
  sources;
  /**
   * The caption sources for the media. Caption sources are not used for YouTube, Dailymotion or Vimeo sources.
   */
  captionSources;
  /**
   * The URL of the poster image to display.
   */
  poster;
  /**
   * The alternate text for the media, used for accessibility purposes.
   */
  altText;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Media(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withSources(...sources) {
    this.sources = sources;
    return this;
  }
  withCaptionSources(...captionSources) {
    this.captionSources = captionSources;
    return this;
  }
  withPoster(poster) {
    this.poster = poster;
    return this;
  }
  withAltText(altText) {
    this.altText = altText;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class MediaSource {
  /**
   * The MIME type of the source.
   */
  mimeType;
  /**
   * The URL of the source.
   */
  url;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new MediaSource(options);
  }
  withMimeType(mimeType) {
    this.mimeType = mimeType;
    return this;
  }
  withUrl(url) {
    this.url = url;
    return this;
  }
}
class CaptionSource {
  /**
   * The MIME type of the source.
   */
  mimeType;
  /**
   * The URL of the source.
   */
  url;
  /**
   * The label of this caption source.
   */
  label;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new CaptionSource(options);
  }
  withMimeType(mimeType) {
    this.mimeType = mimeType;
    return this;
  }
  withUrl(url) {
    this.url = url;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
}
function isRichTextBlock(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "RichTextBlock";
}
class RichTextBlock {
  /**
   * Must be **RichTextBlock**.
   */
  type = "RichTextBlock";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The inlines making up the rich text block.
   */
  inlines;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new RichTextBlock(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withInlines(...inlines) {
    this.inlines = inlines;
    return this;
  }
}
function isTable(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Table";
}
class Table {
  /**
   * Must be **Table**.
   */
  type = "Table";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * Controls if a border should be displayed around the container.
   */
  showBorder;
  /**
   * Controls if the container should have rounded corners.
   */
  roundedCorners;
  /**
   * The columns in the table.
   */
  columns;
  /**
   * Controls whether the first row of the table should be treated as a header.
   */
  firstRowAsHeaders;
  /**
   * Controls if grid lines should be displayed.
   */
  showGridLines;
  /**
   * The style of the grid lines between cells.
   */
  gridStyle;
  /**
   * Controls how the content of every cell in the table should be horizontally aligned by default.
   */
  horizontalCellContentAlignment;
  /**
   * Controls how the content of every cell in the table should be vertically aligned by default.
   */
  verticalCellContentAlignment;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The rows of the table.
   */
  rows;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Table(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withShowBorder(showBorder = true) {
    this.showBorder = showBorder;
    return this;
  }
  withRoundedCorners(roundedCorners = true) {
    this.roundedCorners = roundedCorners;
    return this;
  }
  withColumns(...columns) {
    this.columns = columns;
    return this;
  }
  withFirstRowAsHeaders(firstRowAsHeaders = false) {
    this.firstRowAsHeaders = firstRowAsHeaders;
    return this;
  }
  withShowGridLines(showGridLines = false) {
    this.showGridLines = showGridLines;
    return this;
  }
  withGridStyle(gridStyle) {
    this.gridStyle = gridStyle;
    return this;
  }
  withHorizontalCellContentAlignment(horizontalCellContentAlignment) {
    this.horizontalCellContentAlignment = horizontalCellContentAlignment;
    return this;
  }
  withVerticalCellContentAlignment(verticalCellContentAlignment) {
    this.verticalCellContentAlignment = verticalCellContentAlignment;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withRows(...rows) {
    this.rows = rows;
    return this;
  }
}
class ColumnDefinition {
  /**
   * Controls how the content of every cell in the table should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table.
   */
  horizontalCellContentAlignment;
  /**
   * Controls how the content of every cell in the column should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table.
   */
  verticalCellContentAlignment;
  /**
   * The width of the column in the table, expressed as either a percentage of the available width or in pixels, using the `<number>px` format.
   */
  width;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ColumnDefinition(options);
  }
  withHorizontalCellContentAlignment(horizontalCellContentAlignment) {
    this.horizontalCellContentAlignment = horizontalCellContentAlignment;
    return this;
  }
  withVerticalCellContentAlignment(verticalCellContentAlignment) {
    this.verticalCellContentAlignment = verticalCellContentAlignment;
    return this;
  }
  withWidth(width) {
    this.width = width;
    return this;
  }
}
function isTextBlock(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "TextBlock";
}
class TextBlock {
  /**
   * Must be **TextBlock**.
   */
  type = "TextBlock";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The text to display. A subset of markdown is supported.
   */
  text;
  /**
   * The size of the text.
   */
  size;
  /**
   * The weight of the text.
   */
  weight;
  /**
   * The color of the text.
   */
  color;
  /**
   * Controls whether the text should be renderer using a subtler variant of the select color.
   */
  isSubtle;
  /**
   * The type of font to use for rendering.
   */
  fontType;
  /**
   * Controls if the text should wrap.
   */
  wrap;
  /**
   * The maximum number of lines to display.
   */
  maxLines;
  /**
   * The style of the text.
   */
  style;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(text, options = {}) {
    Object.assign(this, options);
    this.text = text;
  }
  static from(options) {
    return new TextBlock(options.text, options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withText(text) {
    this.text = text;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withWeight(weight) {
    this.weight = weight;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withIsSubtle(isSubtle) {
    this.isSubtle = isSubtle;
    return this;
  }
  withFontType(fontType) {
    this.fontType = fontType;
    return this;
  }
  withWrap(wrap = true) {
    this.wrap = wrap;
    return this;
  }
  withMaxLines(maxLines) {
    this.maxLines = maxLines;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isFactSet(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "FactSet";
}
class FactSet {
  /**
   * Must be **FactSet**.
   */
  type = "FactSet";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The facts in the set.
   */
  facts;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(...facts) {
    this.facts = facts;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withFacts(...facts) {
    this.facts = facts;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class Fact {
  /**
   * The fact's title.
   */
  title;
  /**
   * The fact's value.
   */
  value;
  constructor(title, value) {
    this.title = title;
    this.value = value;
  }
  static from(options) {
    return new Fact(options.title, options.value);
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
}
function isImageSet(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "ImageSet";
}
class ImageSet {
  /**
   * Must be **ImageSet**.
   */
  type = "ImageSet";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The images in the set.
   */
  images;
  /**
   * The size to use to render all images in the set.
   */
  imageSize;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(...images) {
    this.images = images;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withImages(...images) {
    this.images = images;
    return this;
  }
  withImageSize(imageSize) {
    this.imageSize = imageSize;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isImage(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Image";
}
class Image {
  /**
   * Must be **Image**.
   */
  type = "Image";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.
   */
  url;
  /**
   * The alternate text for the image, used for accessibility purposes.
   */
  altText;
  /**
   * The background color of the image.
   */
  backgroundColor;
  /**
   * The style of the image.
   */
  style;
  /**
   * The size of the image.
   */
  size;
  /**
   * The width of the image.
   */
  width;
  /**
   * An Action that will be invoked when the image is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * Controls if the image can be expanded to full screen.
   */
  allowExpand;
  /**
   * Teams-specific metadata associated with the image.
   */
  msTeams;
  /**
   * The height of the image.
   */
  height;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(url, options = {}) {
    Object.assign(this, options);
    this.url = url;
  }
  static from(options) {
    return new Image(options.url, options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withUrl(url) {
    this.url = url;
    return this;
  }
  withAltText(altText) {
    this.altText = altText;
    return this;
  }
  withBackgroundColor(backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withWidth(width) {
    this.width = width;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withAllowExpand(allowExpand = true) {
    this.allowExpand = allowExpand;
    return this;
  }
  withMsTeams(msTeams) {
    this.msTeams = msTeams;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class TeamsImageProperties {
  /**
   * Controls if the image is expandable in Teams. This property is equivalent to the Image.allowExpand property.
   */
  allowExpand;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TeamsImageProperties(options);
  }
  withAllowExpand(allowExpand) {
    this.allowExpand = allowExpand;
    return this;
  }
}
function isTextInput(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Input.Text";
}
class TextInput {
  /**
   * Must be **Input.Text**.
   */
  type = "Input.Text";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
  label;
  /**
   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  isRequired;
  /**
   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  errorMessage;
  /**
   * An Action.ResetInputs action that will be executed when the value of the input changes.
   */
  valueChangedAction;
  /**
   * The default value of the input.
   */
  value;
  /**
   * The maximum length of the text in the input.
   */
  maxLength;
  /**
   * Controls if the input should allow multiple lines of text.
   */
  isMultiline;
  /**
   * The text to display as a placeholder when the user hasn't entered a value.
   */
  placeholder;
  /**
   * The style of the input.
   */
  style;
  /**
   * The action that should be displayed as a button alongside the input. Action.ShowCard is not supported.
   */
  inlineAction;
  /**
   * The regular expression to validate the input.
   */
  regex;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TextInput(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withIsRequired(isRequired = true) {
    this.isRequired = isRequired;
    return this;
  }
  withErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }
  withValueChangedAction(valueChangedAction) {
    this.valueChangedAction = valueChangedAction;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withMaxLength(maxLength) {
    this.maxLength = maxLength;
    return this;
  }
  withIsMultiline(isMultiline = true) {
    this.isMultiline = isMultiline;
    return this;
  }
  withPlaceholder(placeholder) {
    this.placeholder = placeholder;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withInlineAction(inlineAction) {
    this.inlineAction = inlineAction;
    return this;
  }
  withRegex(regex) {
    this.regex = regex;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isDateInput(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Input.Date";
}
class DateInput {
  /**
   * Must be **Input.Date**.
   */
  type = "Input.Date";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
  label;
  /**
   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  isRequired;
  /**
   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  errorMessage;
  /**
   * An Action.ResetInputs action that will be executed when the value of the input changes.
   */
  valueChangedAction;
  /**
   * The default value of the input, in the `YYYY-MM-DD` format.
   */
  value;
  /**
   * The text to display as a placeholder when the user has not selected a date.
   */
  placeholder;
  /**
   * The minimum date that can be selected.
   */
  min;
  /**
   * The maximum date that can be selected.
   */
  max;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new DateInput(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withIsRequired(isRequired = true) {
    this.isRequired = isRequired;
    return this;
  }
  withErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }
  withValueChangedAction(valueChangedAction) {
    this.valueChangedAction = valueChangedAction;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withPlaceholder(placeholder) {
    this.placeholder = placeholder;
    return this;
  }
  withMin(min) {
    this.min = min;
    return this;
  }
  withMax(max) {
    this.max = max;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isTimeInput(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Input.Time";
}
class TimeInput {
  /**
   * Must be **Input.Time**.
   */
  type = "Input.Time";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
  label;
  /**
   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  isRequired;
  /**
   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  errorMessage;
  /**
   * An Action.ResetInputs action that will be executed when the value of the input changes.
   */
  valueChangedAction;
  /**
   * The default value of the input, in the `HH:MM` format.
   */
  value;
  /**
   * The text to display as a placeholder when the user hasn't entered a value.
   */
  placeholder;
  /**
   * The minimum time that can be selected, in the `HH:MM` format.
   */
  min;
  /**
   * The maximum time that can be selected, in the `HH:MM` format.
   */
  max;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TimeInput(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withIsRequired(isRequired = true) {
    this.isRequired = isRequired;
    return this;
  }
  withErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }
  withValueChangedAction(valueChangedAction) {
    this.valueChangedAction = valueChangedAction;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withPlaceholder(placeholder) {
    this.placeholder = placeholder;
    return this;
  }
  withMin(min) {
    this.min = min;
    return this;
  }
  withMax(max) {
    this.max = max;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isNumberInput(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Input.Number";
}
class NumberInput {
  /**
   * Must be **Input.Number**.
   */
  type = "Input.Number";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
  label;
  /**
   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  isRequired;
  /**
   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  errorMessage;
  /**
   * An Action.ResetInputs action that will be executed when the value of the input changes.
   */
  valueChangedAction;
  /**
   * The default value of the input.
   */
  value;
  /**
   * The text to display as a placeholder when the user hasn't entered a value.
   */
  placeholder;
  /**
   * The minimum value that can be entered.
   */
  min;
  /**
   * The maximum value that can be entered.
   */
  max;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new NumberInput(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withIsRequired(isRequired = true) {
    this.isRequired = isRequired;
    return this;
  }
  withErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }
  withValueChangedAction(valueChangedAction) {
    this.valueChangedAction = valueChangedAction;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withPlaceholder(placeholder) {
    this.placeholder = placeholder;
    return this;
  }
  withMin(min) {
    this.min = min;
    return this;
  }
  withMax(max) {
    this.max = max;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isToggleInput(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Input.Toggle";
}
class ToggleInput {
  /**
   * Must be **Input.Toggle**.
   */
  type = "Input.Toggle";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
  label;
  /**
   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  isRequired;
  /**
   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  errorMessage;
  /**
   * An Action.ResetInputs action that will be executed when the value of the input changes.
   */
  valueChangedAction;
  /**
   * The default value of the input.
   */
  value;
  /**
   * The title (caption) to display next to the toggle.
   */
  title;
  /**
   * The value to send to the Bot when the toggle is on.
   */
  valueOn;
  /**
   * The value to send to the Bot when the toggle is off.
   */
  valueOff;
  /**
   * Controls if the title should wrap.
   */
  wrap;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(title, options = {}) {
    Object.assign(this, options);
    this.title = title;
  }
  static from(options) {
    return new ToggleInput(options.title, options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withIsRequired(isRequired = true) {
    this.isRequired = isRequired;
    return this;
  }
  withErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }
  withValueChangedAction(valueChangedAction) {
    this.valueChangedAction = valueChangedAction;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withValueOn(valueOn) {
    this.valueOn = valueOn;
    return this;
  }
  withValueOff(valueOff) {
    this.valueOff = valueOff;
    return this;
  }
  withWrap(wrap = false) {
    this.wrap = wrap;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isChoiceSetInput(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Input.ChoiceSet";
}
class ChoiceSetInput {
  /**
   * Must be **Input.ChoiceSet**.
   */
  type = "Input.ChoiceSet";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
  label;
  /**
   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  isRequired;
  /**
   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  errorMessage;
  /**
   * An Action.ResetInputs action that will be executed when the value of the input changes.
   */
  valueChangedAction;
  /**
   * The default value of the input.
   */
  value;
  /**
   * The choices associated with the input.
   */
  choices;
  /**
   * A Data.Query object that defines the dataset from which to dynamically fetch the choices for the input.
   */
  "choices.data";
  /**
   * Controls whether the input should be displayed as a dropdown (compact) or a list of radio buttons or checkboxes (expanded).
   */
  style;
  /**
   * Controls whether multiple choices can be selected.
   */
  isMultiSelect;
  /**
   * The text to display as a placeholder when the user has not entered any value.
   */
  placeholder;
  /**
   * Controls if choice titles should wrap.
   */
  wrap;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(...choices) {
    this.choices = choices;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withIsRequired(isRequired = true) {
    this.isRequired = isRequired;
    return this;
  }
  withErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }
  withValueChangedAction(valueChangedAction) {
    this.valueChangedAction = valueChangedAction;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withChoices(...choices) {
    this.choices = choices;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withIsMultiSelect(isMultiSelect = true) {
    this.isMultiSelect = isMultiSelect;
    return this;
  }
  withPlaceholder(placeholder) {
    this.placeholder = placeholder;
    return this;
  }
  withWrap(wrap = false) {
    this.wrap = wrap;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class Choice {
  /**
   * The text to display for the choice.
   */
  title;
  /**
   * The value associated with the choice, as sent to the Bot when an Action.Submit or Action.Execute is invoked
   */
  value;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Choice(options);
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
}
function isQueryData(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Data.Query";
}
class QueryData {
  /**
   * Must be **Data.Query**.
   */
  type = "Data.Query";
  /**
   * The dataset from which to fetch the data.
   */
  dataset;
  /**
   * Controls which inputs are associated with the Data.Query. When a Data.Query is executed, the values of the associated inputs are sent to the Bot, allowing it to perform filtering operations based on the user's input.
   */
  associatedInputs;
  /**
   * The maximum number of data items that should be returned by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.
   */
  count;
  /**
   * The number of data items to be skipped by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.
   */
  skip;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new QueryData(options);
  }
  withDataset(dataset) {
    this.dataset = dataset;
    return this;
  }
  withAssociatedInputs(associatedInputs) {
    this.associatedInputs = associatedInputs;
    return this;
  }
  withCount(count) {
    this.count = count;
    return this;
  }
  withSkip(skip) {
    this.skip = skip;
    return this;
  }
}
function isRatingInput(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Input.Rating";
}
class RatingInput {
  /**
   * Must be **Input.Rating**.
   */
  type = "Input.Rating";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
  label;
  /**
   * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  isRequired;
  /**
   * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
   */
  errorMessage;
  /**
   * An Action.ResetInputs action that will be executed when the value of the input changes.
   */
  valueChangedAction;
  /**
   * The default value of the input.
   */
  value;
  /**
   * The number of stars to display.
   */
  max;
  /**
   * Controls if the user can select half stars.
   */
  allowHalfSteps;
  /**
   * The size of the stars.
   */
  size;
  /**
   * The color of the stars.
   */
  color;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new RatingInput(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withIsRequired(isRequired = true) {
    this.isRequired = isRequired;
    return this;
  }
  withErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }
  withValueChangedAction(valueChangedAction) {
    this.valueChangedAction = valueChangedAction;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withMax(max) {
    this.max = max;
    return this;
  }
  withAllowHalfSteps(allowHalfSteps = true) {
    this.allowHalfSteps = allowHalfSteps;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isRating(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Rating";
}
class Rating {
  /**
   * Must be **Rating**.
   */
  type = "Rating";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The value of the rating. Must be between 0 and max.
   */
  value;
  /**
   * The number of "votes" associated with the rating.
   */
  count;
  /**
   * The number of stars to display.
   */
  max;
  /**
   * The size of the stars.
   */
  size;
  /**
   * The color of the stars.
   */
  color;
  /**
   * The style of the stars.
   */
  style;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Rating(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withCount(count) {
    this.count = count;
    return this;
  }
  withMax(max) {
    this.max = max;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isCompoundButton(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "CompoundButton";
}
class CompoundButton {
  /**
   * Must be **CompoundButton**.
   */
  type = "CompoundButton";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The icon to show on the button.
   */
  icon;
  /**
   * The badge to show on the button.
   */
  badge;
  /**
   * The title of the button.
   */
  title;
  /**
   * The description text of the button.
   */
  description;
  /**
   * An Action that will be invoked when the button is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new CompoundButton(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withIcon(icon) {
    this.icon = icon;
    return this;
  }
  withBadge(badge) {
    this.badge = badge;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withDescription(description) {
    this.description = description;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class IconInfo {
  /**
   * The name of the icon to display.
   */
  name;
  /**
   * The size of the icon.
   */
  size;
  /**
   * The style of the icon.
   */
  style;
  /**
   * The color of the icon.
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new IconInfo(options);
  }
  withName(name) {
    this.name = name;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
function isIcon(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Icon";
}
class Icon {
  /**
   * Must be **Icon**.
   */
  type = "Icon";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The name of the icon to display.
   */
  name;
  /**
   * The size of the icon.
   */
  size;
  /**
   * The style of the icon.
   */
  style;
  /**
   * The color of the icon.
   */
  color;
  /**
   * An Action that will be invoked when the icon is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(name, options = {}) {
    Object.assign(this, options);
    this.name = name;
  }
  static from(options) {
    return new Icon(options.name, options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withName(name) {
    this.name = name;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isCarousel(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Carousel";
}
class Carousel {
  /**
   * Must be **Carousel**.
   */
  type = "Carousel";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
   */
  bleed;
  /**
   * The minimum height, in pixels, of the container, in the `<number>px` format.
   */
  minHeight;
  /**
   * Controls the type of animation to use to navigate between pages.
   */
  pageAnimation;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The pages in the carousel.
   */
  pages;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Carousel(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withBleed(bleed = true) {
    this.bleed = bleed;
    return this;
  }
  withMinHeight(minHeight) {
    this.minHeight = minHeight;
    return this;
  }
  withPageAnimation(pageAnimation) {
    this.pageAnimation = pageAnimation;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withPages(...pages) {
    this.pages = pages;
    return this;
  }
}
function isBadge(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Badge";
}
class Badge {
  /**
   * Must be **Badge**.
   */
  type = "Badge";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The text to display.
   */
  text;
  /**
   * The name of an icon from the [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) to display, in the `<icon-name>[,regular|filled]` format. If the style is not specified, the regular style is used.
   */
  icon;
  /**
   * Controls the position of the icon.
   */
  iconPosition;
  /**
   * Controls the strength of the background color.
   */
  appearance;
  /**
   * The size of the badge.
   */
  size;
  /**
   * Controls the shape of the badge.
   */
  shape;
  /**
   * The style of the badge.
   */
  style;
  /**
   * Controls the tooltip text to display when the badge is hovered over.
   */
  tooltip;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new Badge(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withText(text) {
    this.text = text;
    return this;
  }
  withIcon(icon) {
    this.icon = icon;
    return this;
  }
  withIconPosition(iconPosition) {
    this.iconPosition = iconPosition;
    return this;
  }
  withAppearance(appearance) {
    this.appearance = appearance;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withShape(shape) {
    this.shape = shape;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withTooltip(tooltip) {
    this.tooltip = tooltip;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isDonutChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.Donut";
}
class DonutChart {
  /**
   * Must be **Chart.Donut**.
   */
  type = "Chart.Donut";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The data to display in the chart.
   */
  data;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new DonutChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class DonutChartData {
  /**
   * The legend of the chart.
   */
  legend;
  /**
   * The value associated with the data point.
   */
  value;
  /**
   * The color to use for the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new DonutChartData(options);
  }
  withLegend(legend) {
    this.legend = legend;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
function isPieChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.Pie";
}
class PieChart {
  /**
   * Must be **Chart.Pie**.
   */
  type = "Chart.Pie";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The data to display in the chart.
   */
  data;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new PieChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isGroupedVerticalBarChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.VerticalBar.Grouped";
}
class GroupedVerticalBarChart {
  /**
   * Must be **Chart.VerticalBar.Grouped**.
   */
  type = "Chart.VerticalBar.Grouped";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The title of the x axis.
   */
  xAxisTitle;
  /**
   * The title of the y axis.
   */
  yAxisTitle;
  /**
   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  /**
   * Controls if bars in the chart should  be displayed as stacked instead of grouped.
   */
  stacked;
  /**
   * The data points in a series.
   */
  data;
  /**
   * Controls if values should be displayed on each bar.
   */
  showBarValues;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new GroupedVerticalBarChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withXAxisTitle(xAxisTitle) {
    this.xAxisTitle = xAxisTitle;
    return this;
  }
  withYAxisTitle(yAxisTitle) {
    this.yAxisTitle = yAxisTitle;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withStacked(stacked = true) {
    this.stacked = stacked;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
  withShowBarValues(showBarValues = true) {
    this.showBarValues = showBarValues;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class GroupedVerticalBarChartData {
  /**
   * The legend of the chart.
   */
  legend;
  /**
   * The data points in the series.
   */
  values;
  /**
   * The color to use for all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new GroupedVerticalBarChartData(options);
  }
  withLegend(legend) {
    this.legend = legend;
    return this;
  }
  withValues(...values) {
    this.values = values;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
class BarChartDataValue {
  /**
   * The x axis value of the data point.
   */
  x;
  /**
   * The y axis value of the data point.
   */
  y;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new BarChartDataValue(options);
  }
  withX(x) {
    this.x = x;
    return this;
  }
  withY(y) {
    this.y = y;
    return this;
  }
}
function isVerticalBarChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.VerticalBar";
}
class VerticalBarChart {
  /**
   * Must be **Chart.VerticalBar**.
   */
  type = "Chart.VerticalBar";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The title of the x axis.
   */
  xAxisTitle;
  /**
   * The title of the y axis.
   */
  yAxisTitle;
  /**
   * The data to display in the chart.
   */
  data;
  /**
   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  /**
   * Controls if the bar values should be displayed.
   */
  showBarValues;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new VerticalBarChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withXAxisTitle(xAxisTitle) {
    this.xAxisTitle = xAxisTitle;
    return this;
  }
  withYAxisTitle(yAxisTitle) {
    this.yAxisTitle = yAxisTitle;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withShowBarValues(showBarValues = true) {
    this.showBarValues = showBarValues;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class VerticalBarChartDataValue {
  /**
   * The x axis value of the data point.
   */
  x;
  /**
   * The y axis value of the data point.
   */
  y;
  /**
   * The color to use for the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new VerticalBarChartDataValue(options);
  }
  withX(x) {
    this.x = x;
    return this;
  }
  withY(y) {
    this.y = y;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
function isHorizontalBarChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.HorizontalBar";
}
class HorizontalBarChart {
  /**
   * Must be **Chart.HorizontalBar**.
   */
  type = "Chart.HorizontalBar";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The title of the x axis.
   */
  xAxisTitle;
  /**
   * The title of the y axis.
   */
  yAxisTitle;
  /**
   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  /**
   * The data points in the chart.
   */
  data;
  /**
   * Controls how the chart should be visually laid out.
   */
  displayMode;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new HorizontalBarChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withXAxisTitle(xAxisTitle) {
    this.xAxisTitle = xAxisTitle;
    return this;
  }
  withYAxisTitle(yAxisTitle) {
    this.yAxisTitle = yAxisTitle;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
  withDisplayMode(displayMode) {
    this.displayMode = displayMode;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class HorizontalBarChartDataValue {
  /**
   * The x axis value of the data point.
   */
  x;
  /**
   * The y axis value of the data point.
   */
  y;
  /**
   * The color of the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new HorizontalBarChartDataValue(options);
  }
  withX(x) {
    this.x = x;
    return this;
  }
  withY(y) {
    this.y = y;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
function isStackedHorizontalBarChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.HorizontalBar.Stacked";
}
class StackedHorizontalBarChart {
  /**
   * Must be **Chart.HorizontalBar.Stacked**.
   */
  type = "Chart.HorizontalBar.Stacked";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The title of the x axis.
   */
  xAxisTitle;
  /**
   * The title of the y axis.
   */
  yAxisTitle;
  /**
   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  /**
   * The data to display in the chart.
   */
  data;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new StackedHorizontalBarChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withXAxisTitle(xAxisTitle) {
    this.xAxisTitle = xAxisTitle;
    return this;
  }
  withYAxisTitle(yAxisTitle) {
    this.yAxisTitle = yAxisTitle;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class StackedHorizontalBarChartData {
  /**
   * The title of the series.
   */
  title;
  /**
   * The data points in the series.
   */
  data;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new StackedHorizontalBarChartData(options);
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
}
class StackedHorizontalBarChartDataPoint {
  /**
   * The legend associated with the data point.
   */
  legend;
  /**
   * The value of the data point.
   */
  value;
  /**
   * The color to use to render the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new StackedHorizontalBarChartDataPoint(options);
  }
  withLegend(legend) {
    this.legend = legend;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
function isLineChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.Line";
}
class LineChart {
  /**
   * Must be **Chart.Line**.
   */
  type = "Chart.Line";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The title of the x axis.
   */
  xAxisTitle;
  /**
   * The title of the y axis.
   */
  yAxisTitle;
  /**
   * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  /**
   * The data point series in the line chart.
   */
  data;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new LineChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withXAxisTitle(xAxisTitle) {
    this.xAxisTitle = xAxisTitle;
    return this;
  }
  withYAxisTitle(yAxisTitle) {
    this.yAxisTitle = yAxisTitle;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withData(...data) {
    this.data = data;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class LineChartData {
  /**
   * The legend of the chart.
   */
  legend;
  /**
   * The data points in the series.
   */
  values;
  /**
   * The color all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new LineChartData(options);
  }
  withLegend(legend) {
    this.legend = legend;
    return this;
  }
  withValues(...values) {
    this.values = values;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
class LineChartValue {
  /**
     * The x axis value of the data point.
  
  If all x values of the x [Chart.Line](https://adaptivecards.microsoft.com/?topic=Chart.Line) are expressed as a number, or if all x values are expressed as a date string in the `YYYY-MM-DD` format, the chart will be rendered as a time series chart, i.e. x axis values will span across the minimum x value to maximum x value range.
  
  Otherwise, if x values are represented as a mix of numbers and strings or if at least one x value isn't in the `YYYY-MM-DD` format, the chart will be rendered as a categorical chart, i.e. x axis values will be displayed as categories.
     */
  x;
  /**
   * The y axis value of the data point.
   */
  y;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new LineChartValue(options);
  }
  withX(x) {
    this.x = x;
    return this;
  }
  withY(y) {
    this.y = y;
    return this;
  }
}
function isGaugeChart(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Chart.Gauge";
}
class GaugeChart {
  /**
   * Must be **Chart.Gauge**.
   */
  type = "Chart.Gauge";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The title of the chart.
   */
  title;
  /**
   * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  colorSet;
  /**
   * The minimum value of the gauge.
   */
  min;
  /**
   * The maximum value of the gauge.
   */
  max;
  /**
   * The sub-label of the gauge.
   */
  subLabel;
  /**
   * Controls if the min/max values should be displayed.
   */
  showMinMax;
  /**
   * Controls if the legend should be displayed.
   */
  showLegend;
  /**
   * The segments to display in the gauge.
   */
  segments;
  /**
   * The value of the gauge.
   */
  value;
  /**
   * The format used to display the gauge's value.
   */
  valueFormat;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new GaugeChart(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withColorSet(colorSet) {
    this.colorSet = colorSet;
    return this;
  }
  withMin(min) {
    this.min = min;
    return this;
  }
  withMax(max) {
    this.max = max;
    return this;
  }
  withSubLabel(subLabel) {
    this.subLabel = subLabel;
    return this;
  }
  withShowMinMax(showMinMax = false) {
    this.showMinMax = showMinMax;
    return this;
  }
  withShowLegend(showLegend = false) {
    this.showLegend = showLegend;
    return this;
  }
  withSegments(...segments) {
    this.segments = segments;
    return this;
  }
  withValue(value) {
    this.value = value;
    return this;
  }
  withValueFormat(valueFormat) {
    this.valueFormat = valueFormat;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class GaugeChartLegend {
  /**
   * The size of the segment.
   */
  size;
  /**
   * The legend text associated with the segment.
   */
  legend;
  /**
   * The color to use for the segment. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
   */
  color;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new GaugeChartLegend(options);
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withLegend(legend) {
    this.legend = legend;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
}
function isCodeBlock(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "CodeBlock";
}
class CodeBlock {
  /**
   * Must be **CodeBlock**.
   */
  type = "CodeBlock";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The code snippet to display.
   */
  codeSnippet;
  /**
   * The language the code snippet is expressed in.
   */
  language;
  /**
   * A number that represents the line in the file from where the code snippet was extracted.
   */
  startLineNumber;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new CodeBlock(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withCodeSnippet(codeSnippet) {
    this.codeSnippet = codeSnippet;
    return this;
  }
  withLanguage(language) {
    this.language = language;
    return this;
  }
  withStartLineNumber(startLineNumber) {
    this.startLineNumber = startLineNumber;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isComUserMicrosoftGraphComponent(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Component" && obj.name === "graph.microsoft.com/user";
}
class ComUserMicrosoftGraphComponent {
  /**
   * Must be **Component**.
   */
  type = "Component";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * Must be **graph.microsoft.com/user**.
   */
  name = "graph.microsoft.com/user";
  /**
   * The properties of the user.
   */
  properties;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ComUserMicrosoftGraphComponent(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withProperties(properties) {
    this.properties = properties;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class PersonaProperties {
  /**
   * The UPN of the persona.
   */
  userPrincipalName;
  /**
   * The display name of the persona.
   */
  displayName;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new PersonaProperties(options);
  }
  withUserPrincipalName(userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
    return this;
  }
  withDisplayName(displayName) {
    this.displayName = displayName;
    return this;
  }
}
function isComUsersMicrosoftGraphComponent(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Component" && obj.name === "graph.microsoft.com/users";
}
class ComUsersMicrosoftGraphComponent {
  /**
   * Must be **Component**.
   */
  type = "Component";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * Must be **graph.microsoft.com/users**.
   */
  name = "graph.microsoft.com/users";
  /**
   * The properties of the set.
   */
  properties;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ComUsersMicrosoftGraphComponent(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withProperties(properties) {
    this.properties = properties;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class PersonaSetProperties {
  /**
   * The users a PersonaSet component should display.
   */
  users;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new PersonaSetProperties(options);
  }
  withUsers(...users) {
    this.users = users;
    return this;
  }
}
function isComResourceMicrosoftGraphComponent(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Component" && obj.name === "graph.microsoft.com/resource";
}
class ComResourceMicrosoftGraphComponent {
  /**
   * Must be **Component**.
   */
  type = "Component";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * Must be **graph.microsoft.com/resource**.
   */
  name = "graph.microsoft.com/resource";
  /**
   * The properties of the resource.
   */
  properties;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ComResourceMicrosoftGraphComponent(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withProperties(properties) {
    this.properties = properties;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class ResourceProperties {
  /**
   * The Id of the resource.
   */
  id;
  /**
   * The reference to the resource.
   */
  resourceReference;
  /**
   * The visualization of the resource.
   */
  resourceVisualization;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ResourceProperties(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withResourceReference(resourceReference) {
    this.resourceReference = resourceReference;
    return this;
  }
  withResourceVisualization(resourceVisualization) {
    this.resourceVisualization = resourceVisualization;
    return this;
  }
}
class ResourceVisualization {
  /**
   * The media associated with the resource.
   */
  media;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ResourceVisualization(options);
  }
  withMedia(media) {
    this.media = media;
    return this;
  }
}
function isComFileMicrosoftGraphComponent(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Component" && obj.name === "graph.microsoft.com/file";
}
class ComFileMicrosoftGraphComponent {
  /**
   * Must be **Component**.
   */
  type = "Component";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * Must be **graph.microsoft.com/file**.
   */
  name = "graph.microsoft.com/file";
  /**
   * The properties of the file.
   */
  properties;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ComFileMicrosoftGraphComponent(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withProperties(properties) {
    this.properties = properties;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class FileProperties {
  /**
   * The name of the file.
   */
  name;
  /**
   * The file extension.
   */
  extension;
  /**
   * The URL of the file.
   */
  url;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new FileProperties(options);
  }
  withName(name) {
    this.name = name;
    return this;
  }
  withExtension(extension) {
    this.extension = extension;
    return this;
  }
  withUrl(url) {
    this.url = url;
    return this;
  }
}
function isComEventMicrosoftGraphComponent(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Component" && obj.name === "graph.microsoft.com/event";
}
class ComEventMicrosoftGraphComponent {
  /**
   * Must be **Component**.
   */
  type = "Component";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * Must be **graph.microsoft.com/event**.
   */
  name = "graph.microsoft.com/event";
  /**
   * The properties of the event.
   */
  properties;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new ComEventMicrosoftGraphComponent(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withProperties(properties) {
    this.properties = properties;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
class CalendarEventProperties {
  /**
   * The ID of the event.
   */
  id;
  /**
   * The title of the event.
   */
  title;
  /**
   * The start date and time of the event.
   */
  start;
  /**
   * The end date and time of the event.
   */
  end;
  /**
   * The status of the event.
   */
  status;
  /**
   * The locations of the event.
   */
  locations;
  /**
   * The URL of the online meeting.
   */
  onlineMeetingUrl;
  /**
   * Indicates if the event is all day.
   */
  isAllDay;
  /**
   * The extension of the event.
   */
  extension;
  /**
   * The URL of the event.
   */
  url;
  /**
   * The attendees of the event.
   */
  attendees;
  /**
   * The organizer of the event.
   */
  organizer;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new CalendarEventProperties(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withStart(start) {
    this.start = start;
    return this;
  }
  withEnd(end) {
    this.end = end;
    return this;
  }
  withStatus(status) {
    this.status = status;
    return this;
  }
  withLocations(...locations) {
    this.locations = locations;
    return this;
  }
  withOnlineMeetingUrl(onlineMeetingUrl) {
    this.onlineMeetingUrl = onlineMeetingUrl;
    return this;
  }
  withIsAllDay(isAllDay) {
    this.isAllDay = isAllDay;
    return this;
  }
  withExtension(extension) {
    this.extension = extension;
    return this;
  }
  withUrl(url) {
    this.url = url;
    return this;
  }
  withAttendees(...attendees) {
    this.attendees = attendees;
    return this;
  }
  withOrganizer(organizer) {
    this.organizer = organizer;
    return this;
  }
}
class CalendarEventAttendee {
  /**
   * The name of the attendee.
   */
  name;
  /**
   * The email address of the attendee.
   */
  email;
  /**
   * The title of the attendee.
   */
  title;
  /**
   * The type of the attendee.
   */
  type;
  /**
   * The status of the attendee.
   */
  status;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new CalendarEventAttendee(options);
  }
  withName(name) {
    this.name = name;
    return this;
  }
  withEmail(email) {
    this.email = email;
    return this;
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withType(type) {
    this.type = type;
    return this;
  }
  withStatus(status) {
    this.status = status;
    return this;
  }
}
function isCarouselPage(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "CarouselPage";
}
class CarouselPage {
  /**
   * Must be **CarouselPage**.
   */
  type = "CarouselPage";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * Controls if a border should be displayed around the container.
   */
  showBorder;
  /**
   * Controls if the container should have rounded corners.
   */
  roundedCorners;
  /**
   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
   */
  layouts;
  /**
   * The minimum height, in pixels, of the container, in the `<number>px` format.
   */
  minHeight;
  /**
   * Defines the container's background image.
   */
  backgroundImage;
  /**
   * Controls how the container's content should be vertically aligned.
   */
  verticalContentAlignment;
  /**
   * Controls if the content of the card is to be rendered left-to-right or right-to-left.
   */
  rtl;
  /**
   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
   */
  maxHeight;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The elements in the page.
   */
  items;
  constructor(...items) {
    this.items = items;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withShowBorder(showBorder = true) {
    this.showBorder = showBorder;
    return this;
  }
  withRoundedCorners(roundedCorners = true) {
    this.roundedCorners = roundedCorners;
    return this;
  }
  withLayouts(...layouts) {
    this.layouts = layouts;
    return this;
  }
  withMinHeight(minHeight) {
    this.minHeight = minHeight;
    return this;
  }
  withBackgroundImage(backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }
  withVerticalContentAlignment(verticalContentAlignment) {
    this.verticalContentAlignment = verticalContentAlignment;
    return this;
  }
  withRtl(rtl) {
    this.rtl = rtl;
    return this;
  }
  withMaxHeight(maxHeight) {
    this.maxHeight = maxHeight;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withItems(...items) {
    this.items = items;
    return this;
  }
}
function isTableRow(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "TableRow";
}
class TableRow {
  /**
   * Must be **TableRow**.
   */
  type = "TableRow";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * Controls if a border should be displayed around the container.
   */
  showBorder;
  /**
   * Controls if the container should have rounded corners.
   */
  roundedCorners;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * Controls how the content of every cell in the row should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table and columns.
   */
  horizontalCellContentAlignment;
  /**
   * Controls how the content of every cell in the row should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table and columns.
   */
  verticalCellContentAlignment;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The cells in the row.
   */
  cells;
  constructor(options = {}) {
    Object.assign(this, options);
  }
  static from(options) {
    return new TableRow(options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withShowBorder(showBorder = true) {
    this.showBorder = showBorder;
    return this;
  }
  withRoundedCorners(roundedCorners = true) {
    this.roundedCorners = roundedCorners;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withHorizontalCellContentAlignment(horizontalCellContentAlignment) {
    this.horizontalCellContentAlignment = horizontalCellContentAlignment;
    return this;
  }
  withVerticalCellContentAlignment(verticalCellContentAlignment) {
    this.verticalCellContentAlignment = verticalCellContentAlignment;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withCells(...cells) {
    this.cells = cells;
    return this;
  }
}
function isTableCell(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "TableCell";
}
class TableCell {
  /**
   * Must be **TableCell**.
   */
  type = "TableCell";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
   */
  layouts;
  /**
   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
   */
  bleed;
  /**
   * The minimum height, in pixels, of the container, in the `<number>px` format.
   */
  minHeight;
  /**
   * Defines the container's background image.
   */
  backgroundImage;
  /**
   * Controls how the container's content should be vertically aligned.
   */
  verticalContentAlignment;
  /**
   * Controls if the content of the card is to be rendered left-to-right or right-to-left.
   */
  rtl;
  /**
   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
   */
  maxHeight;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The items (elements) in the cell.
   */
  items;
  constructor(...items) {
    this.items = items;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withLayouts(...layouts) {
    this.layouts = layouts;
    return this;
  }
  withBleed(bleed = true) {
    this.bleed = bleed;
    return this;
  }
  withMinHeight(minHeight) {
    this.minHeight = minHeight;
    return this;
  }
  withBackgroundImage(backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }
  withVerticalContentAlignment(verticalContentAlignment) {
    this.verticalContentAlignment = verticalContentAlignment;
    return this;
  }
  withRtl(rtl) {
    this.rtl = rtl;
    return this;
  }
  withMaxHeight(maxHeight) {
    this.maxHeight = maxHeight;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withItems(...items) {
    this.items = items;
    return this;
  }
}
function isTextRun(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "TextRun";
}
class TextRun {
  /**
   * Must be **TextRun**.
   */
  type = "TextRun";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * The text to display. A subset of markdown is supported.
   */
  text;
  /**
   * The size of the text.
   */
  size;
  /**
   * The weight of the text.
   */
  weight;
  /**
   * The color of the text.
   */
  color;
  /**
   * Controls whether the text should be renderer using a subtler variant of the select color.
   */
  isSubtle;
  /**
   * The type of font to use for rendering.
   */
  fontType;
  /**
   * Controls if the text should be italicized.
   */
  italic;
  /**
   * Controls if the text should be struck through.
   */
  strikethrough;
  /**
   * Controls if the text should be highlighted.
   */
  highlight;
  /**
   * Controls if the text should be underlined.
   */
  underline;
  /**
   * An Action that will be invoked when the text is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  constructor(text, options = {}) {
    Object.assign(this, options);
    this.text = text;
  }
  static from(options) {
    return new TextRun(options.text, options);
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withText(text) {
    this.text = text;
    return this;
  }
  withSize(size) {
    this.size = size;
    return this;
  }
  withWeight(weight) {
    this.weight = weight;
    return this;
  }
  withColor(color) {
    this.color = color;
    return this;
  }
  withIsSubtle(isSubtle) {
    this.isSubtle = isSubtle;
    return this;
  }
  withFontType(fontType) {
    this.fontType = fontType;
    return this;
  }
  withItalic(italic = true) {
    this.italic = italic;
    return this;
  }
  withStrikethrough(strikethrough = true) {
    this.strikethrough = strikethrough;
    return this;
  }
  withHighlight(highlight = true) {
    this.highlight = highlight;
    return this;
  }
  withUnderline(underline = true) {
    this.underline = underline;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
}
function isColumn(value) {
  const obj = value;
  return typeof obj === "object" && obj.type === "Column";
}
class Column {
  /**
   * Optional. If specified, must be **Column**.
   */
  type = "Column";
  /**
   * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
   */
  id;
  /**
   * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
   */
  requires;
  /**
   * The locale associated with the element.
   */
  lang;
  /**
   * Controls the visibility of the element.
   */
  isVisible;
  /**
   * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
   */
  separator;
  /**
   * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
   */
  height;
  /**
   * Controls how the element should be horizontally aligned.
   */
  horizontalAlignment;
  /**
   * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
   */
  spacing;
  /**
   * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
   */
  targetWidth;
  /**
   * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
   */
  isSortKey;
  /**
   * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
   */
  selectAction;
  /**
   * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
   */
  style;
  /**
   * Controls if a border should be displayed around the container.
   */
  showBorder;
  /**
   * Controls if the container should have rounded corners.
   */
  roundedCorners;
  /**
   * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
   */
  layouts;
  /**
   * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
   */
  bleed;
  /**
   * The minimum height, in pixels, of the container, in the `<number>px` format.
   */
  minHeight;
  /**
   * Defines the container's background image.
   */
  backgroundImage;
  /**
   * Controls how the container's content should be vertically aligned.
   */
  verticalContentAlignment;
  /**
   * Controls if the content of the card is to be rendered left-to-right or right-to-left.
   */
  rtl;
  /**
   * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
   */
  maxHeight;
  /**
   * The width of the column. If expressed as a number, represents the relative weight of the column in the set. If expressed as a string, `auto` will automatically adjust the column's width according to its content, `stretch` will make the column use the remaining horizontal space (shared with other columns with width set to `stretch`) and using the `<number>px` format will give the column an explicit width in pixels.
   */
  width;
  /**
   * The area of a Layout.AreaGrid layout in which an element should be displayed.
   */
  "grid.area";
  /**
   * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
   */
  fallback;
  /**
   * The elements in the column.
   */
  items;
  constructor(...items) {
    this.items = items;
  }
  withOptions(value) {
    Object.assign(this, value);
    return this;
  }
  withId(id) {
    this.id = id;
    return this;
  }
  withRequires(requires) {
    this.requires = requires;
    return this;
  }
  withLang(lang) {
    this.lang = lang;
    return this;
  }
  withIsVisible(isVisible = false) {
    this.isVisible = isVisible;
    return this;
  }
  withSeparator(separator = true) {
    this.separator = separator;
    return this;
  }
  withHeight(height) {
    this.height = height;
    return this;
  }
  withHorizontalAlignment(horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }
  withSpacing(spacing) {
    this.spacing = spacing;
    return this;
  }
  withTargetWidth(targetWidth) {
    this.targetWidth = targetWidth;
    return this;
  }
  withIsSortKey(isSortKey = true) {
    this.isSortKey = isSortKey;
    return this;
  }
  withSelectAction(selectAction) {
    this.selectAction = selectAction;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withShowBorder(showBorder = true) {
    this.showBorder = showBorder;
    return this;
  }
  withRoundedCorners(roundedCorners = true) {
    this.roundedCorners = roundedCorners;
    return this;
  }
  withLayouts(...layouts) {
    this.layouts = layouts;
    return this;
  }
  withBleed(bleed = true) {
    this.bleed = bleed;
    return this;
  }
  withMinHeight(minHeight) {
    this.minHeight = minHeight;
    return this;
  }
  withBackgroundImage(backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }
  withVerticalContentAlignment(verticalContentAlignment) {
    this.verticalContentAlignment = verticalContentAlignment;
    return this;
  }
  withRtl(rtl) {
    this.rtl = rtl;
    return this;
  }
  withMaxHeight(maxHeight) {
    this.maxHeight = maxHeight;
    return this;
  }
  withWidth(width) {
    this.width = width;
    return this;
  }
  withFallback(fallback) {
    this.fallback = fallback;
    return this;
  }
  withItems(...items) {
    this.items = items;
    return this;
  }
}

exports.ActionSet = ActionSet;
exports.AdaptiveCard = AdaptiveCard;
exports.AreaGridLayout = AreaGridLayout;
exports.AuthCardButton = AuthCardButton;
exports.Authentication = Authentication;
exports.BackgroundImage = BackgroundImage;
exports.Badge = Badge;
exports.BarChartDataValue = BarChartDataValue;
exports.CalendarEventAttendee = CalendarEventAttendee;
exports.CalendarEventProperties = CalendarEventProperties;
exports.CaptionSource = CaptionSource;
exports.CardMetadata = CardMetadata;
exports.Carousel = Carousel;
exports.CarouselPage = CarouselPage;
exports.Choice = Choice;
exports.ChoiceSetInput = ChoiceSetInput;
exports.CodeBlock = CodeBlock;
exports.Column = Column;
exports.ColumnDefinition = ColumnDefinition;
exports.ColumnSet = ColumnSet;
exports.ComEventMicrosoftGraphComponent = ComEventMicrosoftGraphComponent;
exports.ComFileMicrosoftGraphComponent = ComFileMicrosoftGraphComponent;
exports.ComResourceMicrosoftGraphComponent = ComResourceMicrosoftGraphComponent;
exports.ComUserMicrosoftGraphComponent = ComUserMicrosoftGraphComponent;
exports.ComUsersMicrosoftGraphComponent = ComUsersMicrosoftGraphComponent;
exports.CompoundButton = CompoundButton;
exports.Container = Container;
exports.DateInput = DateInput;
exports.DonutChart = DonutChart;
exports.DonutChartData = DonutChartData;
exports.ExecuteAction = ExecuteAction;
exports.Fact = Fact;
exports.FactSet = FactSet;
exports.FileProperties = FileProperties;
exports.FlowLayout = FlowLayout;
exports.GaugeChart = GaugeChart;
exports.GaugeChartLegend = GaugeChartLegend;
exports.GridArea = GridArea;
exports.GroupedVerticalBarChart = GroupedVerticalBarChart;
exports.GroupedVerticalBarChartData = GroupedVerticalBarChartData;
exports.HorizontalBarChart = HorizontalBarChart;
exports.HorizontalBarChartDataValue = HorizontalBarChartDataValue;
exports.HostCapabilities = HostCapabilities;
exports.Icon = Icon;
exports.IconInfo = IconInfo;
exports.Image = Image;
exports.ImageSet = ImageSet;
exports.LineChart = LineChart;
exports.LineChartData = LineChartData;
exports.LineChartValue = LineChartValue;
exports.Media = Media;
exports.MediaSource = MediaSource;
exports.Mention = Mention;
exports.MentionedEntity = MentionedEntity;
exports.NumberInput = NumberInput;
exports.OpenUrlAction = OpenUrlAction;
exports.PersonaProperties = PersonaProperties;
exports.PersonaSetProperties = PersonaSetProperties;
exports.PieChart = PieChart;
exports.QueryData = QueryData;
exports.Rating = Rating;
exports.RatingInput = RatingInput;
exports.RefreshDefinition = RefreshDefinition;
exports.ResetInputsAction = ResetInputsAction;
exports.ResourceProperties = ResourceProperties;
exports.ResourceVisualization = ResourceVisualization;
exports.RichTextBlock = RichTextBlock;
exports.ShowCardAction = ShowCardAction;
exports.StackLayout = StackLayout;
exports.StackedHorizontalBarChart = StackedHorizontalBarChart;
exports.StackedHorizontalBarChartData = StackedHorizontalBarChartData;
exports.StackedHorizontalBarChartDataPoint = StackedHorizontalBarChartDataPoint;
exports.SubmitAction = SubmitAction;
exports.Table = Table;
exports.TableCell = TableCell;
exports.TableRow = TableRow;
exports.TargetElement = TargetElement;
exports.TeamsCardProperties = TeamsCardProperties;
exports.TeamsImageProperties = TeamsImageProperties;
exports.TeamsSubmitActionFeedback = TeamsSubmitActionFeedback;
exports.TeamsSubmitActionProperties = TeamsSubmitActionProperties;
exports.TextBlock = TextBlock;
exports.TextInput = TextInput;
exports.TextRun = TextRun;
exports.TimeInput = TimeInput;
exports.ToggleInput = ToggleInput;
exports.ToggleVisibilityAction = ToggleVisibilityAction;
exports.TokenExchangeResource = TokenExchangeResource;
exports.VerticalBarChart = VerticalBarChart;
exports.VerticalBarChartDataValue = VerticalBarChartDataValue;
exports.isActionSet = isActionSet;
exports.isAdaptiveCard = isAdaptiveCard;
exports.isAreaGridLayout = isAreaGridLayout;
exports.isBadge = isBadge;
exports.isCarousel = isCarousel;
exports.isCarouselPage = isCarouselPage;
exports.isChoiceSetInput = isChoiceSetInput;
exports.isCodeBlock = isCodeBlock;
exports.isColumn = isColumn;
exports.isColumnSet = isColumnSet;
exports.isComEventMicrosoftGraphComponent = isComEventMicrosoftGraphComponent;
exports.isComFileMicrosoftGraphComponent = isComFileMicrosoftGraphComponent;
exports.isComResourceMicrosoftGraphComponent = isComResourceMicrosoftGraphComponent;
exports.isComUserMicrosoftGraphComponent = isComUserMicrosoftGraphComponent;
exports.isComUsersMicrosoftGraphComponent = isComUsersMicrosoftGraphComponent;
exports.isCompoundButton = isCompoundButton;
exports.isContainer = isContainer;
exports.isDateInput = isDateInput;
exports.isDonutChart = isDonutChart;
exports.isExecuteAction = isExecuteAction;
exports.isFactSet = isFactSet;
exports.isFlowLayout = isFlowLayout;
exports.isGaugeChart = isGaugeChart;
exports.isGroupedVerticalBarChart = isGroupedVerticalBarChart;
exports.isHorizontalBarChart = isHorizontalBarChart;
exports.isIcon = isIcon;
exports.isImage = isImage;
exports.isImageSet = isImageSet;
exports.isLineChart = isLineChart;
exports.isMedia = isMedia;
exports.isMention = isMention;
exports.isNumberInput = isNumberInput;
exports.isOpenUrlAction = isOpenUrlAction;
exports.isPieChart = isPieChart;
exports.isQueryData = isQueryData;
exports.isRating = isRating;
exports.isRatingInput = isRatingInput;
exports.isResetInputsAction = isResetInputsAction;
exports.isRichTextBlock = isRichTextBlock;
exports.isShowCardAction = isShowCardAction;
exports.isStackLayout = isStackLayout;
exports.isStackedHorizontalBarChart = isStackedHorizontalBarChart;
exports.isSubmitAction = isSubmitAction;
exports.isTable = isTable;
exports.isTableCell = isTableCell;
exports.isTableRow = isTableRow;
exports.isTextBlock = isTextBlock;
exports.isTextInput = isTextInput;
exports.isTextRun = isTextRun;
exports.isTimeInput = isTimeInput;
exports.isToggleInput = isToggleInput;
exports.isToggleVisibilityAction = isToggleVisibilityAction;
exports.isVerticalBarChart = isVerticalBarChart;
//# sourceMappingURL=core.js.map
//# sourceMappingURL=core.js.map