type CardElement = IContainer | IActionSet | IColumnSet | IMedia | IRichTextBlock | ITable | ITextBlock | IFactSet | IImageSet | IImage | ITextInput | IDateInput | ITimeInput | INumberInput | IToggleInput | IChoiceSetInput | IRatingInput | IRating | ICompoundButton | IIcon | ICarousel | IBadge | IDonutChart | IPieChart | IGroupedVerticalBarChart | IVerticalBarChart | IHorizontalBarChart | IStackedHorizontalBarChart | ILineChart | IGaugeChart | ICodeBlock | IComUserMicrosoftGraphComponent | IComUsersMicrosoftGraphComponent | IComResourceMicrosoftGraphComponent | IComFileMicrosoftGraphComponent | IComEventMicrosoftGraphComponent;
type CardAction = ISubmitAction | IOpenUrlAction | IExecuteAction | IToggleVisibilityAction | IShowCardAction | IResetInputsAction;
type IconName = 'AccessTime' | 'Accessibility' | 'AccessibilityCheckmark' | 'Add' | 'AddCircle' | 'AddSquare' | 'AddSquareMultiple' | 'AddSubtractCircle' | 'Airplane' | 'AirplaneLanding' | 'AirplaneTakeOff' | 'Album' | 'AlbumAdd' | 'Alert' | 'AlertBadge' | 'AlertOff' | 'AlertOn' | 'AlertSnooze' | 'AlertUrgent' | 'AlignBottom' | 'AlignCenterHorizontal' | 'AlignCenterVertical' | 'AlignDistributeBottom' | 'AlignDistributeLeft' | 'AlignDistributeRight' | 'AlignDistributeTop' | 'AlignEndHorizontal' | 'AlignEndVertical' | 'AlignLeft' | 'AlignRight' | 'AlignSpaceAroundHorizontal' | 'AlignSpaceAroundVertical' | 'AlignSpaceBetweenHorizontal' | 'AlignSpaceBetweenVertical' | 'AlignSpaceEvenlyHorizontal' | 'AlignSpaceEvenlyVertical' | 'AlignSpaceFitVertical' | 'AlignStartHorizontal' | 'AlignStartVertical' | 'AlignStraighten' | 'AlignStretchHorizontal' | 'AlignStretchVertical' | 'AlignTop' | 'AnimalCat' | 'AnimalDog' | 'AnimalRabbit' | 'AnimalRabbitOff' | 'AnimalTurtle' | 'AppFolder' | 'AppGeneric' | 'AppRecent' | 'AppStore' | 'AppTitle' | 'ApprovalsApp' | 'Apps' | 'AppsAddIn' | 'AppsList' | 'AppsListDetail' | 'Archive' | 'ArchiveArrowBack' | 'ArchiveMultiple' | 'ArchiveSettings' | 'ArrowAutofitContent' | 'ArrowAutofitDown' | 'ArrowAutofitHeight' | 'ArrowAutofitHeightDotted' | 'ArrowAutofitHeightIn' | 'ArrowAutofitUp' | 'ArrowAutofitWidth' | 'ArrowAutofitWidthDotted' | 'ArrowBetweenDown' | 'ArrowBetweenUp' | 'ArrowBidirectionalLeftRight' | 'ArrowBidirectionalUpDown' | 'ArrowBounce' | 'ArrowCircleDown' | 'ArrowCircleDownDouble' | 'ArrowCircleDownRight' | 'ArrowCircleDownSplit' | 'ArrowCircleDownUp' | 'ArrowCircleLeft' | 'ArrowCircleRight' | 'ArrowCircleUp' | 'ArrowCircleUpLeft' | 'ArrowCircleUpRight' | 'ArrowClockwise' | 'ArrowClockwiseDashes' | 'ArrowCollapseAll' | 'ArrowCounterclockwise' | 'ArrowCounterclockwiseDashes' | 'ArrowCurveDownLeft' | 'ArrowCurveDownRight' | 'ArrowCurveUpLeft' | 'ArrowCurveUpRight' | 'ArrowDown' | 'ArrowDownExclamation' | 'ArrowDownLeft' | 'ArrowDownload' | 'ArrowDownloadOff' | 'ArrowEject' | 'ArrowEnter' | 'ArrowEnterLeft' | 'ArrowEnterUp' | 'ArrowExit' | 'ArrowExpand' | 'ArrowExport' | 'ArrowExportLtr' | 'ArrowExportRtl' | 'ArrowExportUp' | 'ArrowFit' | 'ArrowFitIn' | 'ArrowFlowDiagonalUpRight' | 'ArrowFlowUpRight' | 'ArrowFlowUpRightRectangleMultiple' | 'ArrowForward' | 'ArrowForwardDownLightning' | 'ArrowForwardDownPerson' | 'ArrowHookDownLeft' | 'ArrowHookDownRight' | 'ArrowHookUpLeft' | 'ArrowHookUpRight' | 'ArrowImport' | 'ArrowJoin' | 'ArrowLeft' | 'ArrowMaximize' | 'ArrowMaximizeVertical' | 'ArrowMinimize' | 'ArrowMinimizeVertical' | 'ArrowMove' | 'ArrowMoveInward' | 'ArrowNext' | 'ArrowOutlineDownLeft' | 'ArrowOutlineUpRight' | 'ArrowParagraph' | 'ArrowPrevious' | 'ArrowRedo' | 'ArrowRepeat1' | 'ArrowRepeatAll' | 'ArrowRepeatAllOff' | 'ArrowReply' | 'ArrowReplyAll' | 'ArrowReplyDown' | 'ArrowReset' | 'ArrowRight' | 'ArrowRotateClockwise' | 'ArrowRotateCounterclockwise' | 'ArrowRouting' | 'ArrowRoutingRectangleMultiple' | 'ArrowShuffle' | 'ArrowShuffleOff' | 'ArrowSort' | 'ArrowSortDown' | 'ArrowSortDownLines' | 'ArrowSortUp' | 'ArrowSplit' | 'ArrowSprint' | 'ArrowSquareDown' | 'ArrowSquareUpRight' | 'ArrowStepBack' | 'ArrowStepIn' | 'ArrowStepInDiagonalDownLeft' | 'ArrowStepInLeft' | 'ArrowStepInRight' | 'ArrowStepOut' | 'ArrowStepOver' | 'ArrowSwap' | 'ArrowSync' | 'ArrowSyncCheckmark' | 'ArrowSyncCircle' | 'ArrowSyncDismiss' | 'ArrowSyncOff' | 'ArrowTrending' | 'ArrowTrendingCheckmark' | 'ArrowTrendingDown' | 'ArrowTrendingLines' | 'ArrowTrendingSettings' | 'ArrowTrendingSparkle' | 'ArrowTrendingText' | 'ArrowTrendingWrench' | 'ArrowTurnBidirectionalDownRight' | 'ArrowTurnDownLeft' | 'ArrowTurnDownRight' | 'ArrowTurnDownUp' | 'ArrowTurnLeftDown' | 'ArrowTurnLeftRight' | 'ArrowTurnLeftUp' | 'ArrowTurnRight' | 'ArrowTurnRightDown' | 'ArrowTurnRightLeft' | 'ArrowTurnRightUp' | 'ArrowTurnUpDown' | 'ArrowTurnUpLeft' | 'ArrowUndo' | 'ArrowUp' | 'ArrowUpLeft' | 'ArrowUpRight' | 'ArrowUpRightDashes' | 'ArrowUpSquareSettings' | 'ArrowUpload' | 'ArrowWrap' | 'ArrowWrapOff' | 'ArrowsBidirectional' | 'Attach' | 'AttachArrowRight' | 'AttachText' | 'AutoFitHeight' | 'AutoFitWidth' | 'Autocorrect' | 'Autosum' | 'Backpack' | 'BackpackAdd' | 'Backspace' | 'Badge' | 'Balloon' | 'BarcodeScanner' | 'Battery0' | 'Battery10' | 'Battery1' | 'Battery2' | 'Battery3' | 'Battery4' | 'Battery5' | 'Battery6' | 'Battery7' | 'Battery8' | 'Battery9' | 'BatteryCharge' | 'BatteryCheckmark' | 'BatterySaver' | 'BatteryWarning' | 'Beach' | 'Beaker' | 'BeakerAdd' | 'BeakerDismiss' | 'BeakerEdit' | 'BeakerEmpty' | 'BeakerOff' | 'BeakerSettings' | 'Bed' | 'BezierCurveSquare' | 'BinFull' | 'BinRecycle' | 'BinRecycleFull' | 'BinderTriangle' | 'Bluetooth' | 'BluetoothConnected' | 'BluetoothDisabled' | 'BluetoothSearching' | 'Blur' | 'Board' | 'BoardGames' | 'BoardHeart' | 'BoardSplit' | 'Book' | 'BookAdd' | 'BookArrowClockwise' | 'BookClock' | 'BookCoins' | 'BookCompass' | 'BookContacts' | 'BookDatabase' | 'BookDefault' | 'BookDismiss' | 'BookExclamationMark' | 'BookGlobe' | 'BookInformation' | 'BookLetter' | 'BookNumber' | 'BookOpen' | 'BookOpenGlobe' | 'BookOpenMicrophone' | 'BookPulse' | 'BookQuestionMark' | 'BookQuestionMarkRtl' | 'BookSearch' | 'BookStar' | 'BookTemplate' | 'BookTheta' | 'BookToolbox' | 'Bookmark' | 'BookmarkAdd' | 'BookmarkMultiple' | 'BookmarkOff' | 'BookmarkSearch' | 'BorderAll' | 'BorderBottom' | 'BorderBottomDouble' | 'BorderBottomThick' | 'BorderInside' | 'BorderLeft' | 'BorderLeftRight' | 'BorderNone' | 'BorderOutside' | 'BorderOutsideThick' | 'BorderRight' | 'BorderTop' | 'BorderTopBottom' | 'BorderTopBottomDouble' | 'BorderTopBottomThick' | 'Bot' | 'BotAdd' | 'BotSparkle' | 'BowTie' | 'BowlChopsticks' | 'BowlSalad' | 'Box' | 'BoxArrowLeft' | 'BoxArrowUp' | 'BoxCheckmark' | 'BoxDismiss' | 'BoxEdit' | 'BoxMultiple' | 'BoxMultipleArrowLeft' | 'BoxMultipleArrowRight' | 'BoxMultipleCheckmark' | 'BoxMultipleSearch' | 'BoxSearch' | 'BoxToolbox' | 'Braces' | 'BracesCheckmark' | 'BracesDismiss' | 'BracesVariable' | 'BrainCircuit' | 'Branch' | 'BranchCompare' | 'BranchFork' | 'BranchForkHint' | 'BranchForkLink' | 'BranchRequest' | 'BreakoutRoom' | 'Briefcase' | 'BriefcaseMedical' | 'BriefcaseOff' | 'BriefcasePerson' | 'BriefcaseSearch' | 'BrightnessHigh' | 'BrightnessLow' | 'BroadActivityFeed' | 'Broom' | 'BubbleMultiple' | 'Bug' | 'BugArrowCounterclockwise' | 'BugProhibited' | 'Building' | 'BuildingBank' | 'BuildingBankLink' | 'BuildingBankToolbox' | 'BuildingCloud' | 'BuildingDesktop' | 'BuildingFactory' | 'BuildingGovernment' | 'BuildingGovernmentSearch' | 'BuildingHome' | 'BuildingLighthouse' | 'BuildingMosque' | 'BuildingMultiple' | 'BuildingPeople' | 'BuildingRetail' | 'BuildingRetailMoney' | 'BuildingRetailMore' | 'BuildingRetailShield' | 'BuildingRetailToolbox' | 'BuildingShop' | 'BuildingSkyscraper' | 'BuildingSwap' | 'BuildingTownhouse' | 'Button' | 'Calculator' | 'CalculatorArrowClockwise' | 'CalculatorMultiple' | 'Calendar' | 'Calendar3Day' | 'CalendarAdd' | 'CalendarAgenda' | 'CalendarArrowCounterclockwise' | 'CalendarArrowDown' | 'CalendarArrowRight' | 'CalendarAssistant' | 'CalendarCancel' | 'CalendarChat' | 'CalendarCheckmark' | 'CalendarClock' | 'CalendarDataBar' | 'CalendarDate' | 'CalendarDay' | 'CalendarEdit' | 'CalendarEmpty' | 'CalendarError' | 'CalendarEye' | 'CalendarInfo' | 'CalendarLink' | 'CalendarLock' | 'CalendarLtr' | 'CalendarMail' | 'CalendarMention' | 'CalendarMonth' | 'CalendarMultiple' | 'CalendarNote' | 'CalendarPattern' | 'CalendarPerson' | 'CalendarPhone' | 'CalendarPlay' | 'CalendarQuestionMark' | 'CalendarRecord' | 'CalendarReply' | 'CalendarRtl' | 'CalendarSearch' | 'CalendarSettings' | 'CalendarShield' | 'CalendarStar' | 'CalendarSync' | 'CalendarToday' | 'CalendarToolbox' | 'CalendarVideo' | 'CalendarWeekNumbers' | 'CalendarWeekStart' | 'CalendarWorkWeek' | 'Call' | 'CallAdd' | 'CallCheckmark' | 'CallConnecting' | 'CallDismiss' | 'CallEnd' | 'CallExclamation' | 'CallForward' | 'CallInbound' | 'CallMissed' | 'CallOutbound' | 'CallPark' | 'CallPause' | 'CallProhibited' | 'CallTransfer' | 'CallWarning' | 'CalligraphyPen' | 'CalligraphyPenCheckmark' | 'CalligraphyPenError' | 'CalligraphyPenQuestionMark' | 'Camera' | 'CameraAdd' | 'CameraDome' | 'CameraEdit' | 'CameraOff' | 'CameraSparkles' | 'CameraSwitch' | 'CardUi' | 'CaretDown' | 'CaretDownRight' | 'CaretLeft' | 'CaretRight' | 'CaretUp' | 'Cart' | 'Cast' | 'CastMultiple' | 'CatchUp' | 'Cd' | 'Cellular3G' | 'Cellular4G' | 'Cellular5G' | 'CellularData1' | 'CellularData2' | 'CellularData3' | 'CellularData4' | 'CellularData5' | 'CellularOff' | 'CellularWarning' | 'CenterHorizontal' | 'CenterVertical' | 'Certificate' | 'Channel' | 'ChannelAdd' | 'ChannelAlert' | 'ChannelArrowLeft' | 'ChannelDismiss' | 'ChannelShare' | 'ChannelSubtract' | 'ChartMultiple' | 'ChartPerson' | 'Chat' | 'ChatAdd' | 'ChatArrowBack' | 'ChatArrowDoubleBack' | 'ChatBubblesQuestion' | 'ChatCursor' | 'ChatDismiss' | 'ChatEmpty' | 'ChatHelp' | 'ChatLock' | 'ChatMail' | 'ChatMultiple' | 'ChatMultipleHeart' | 'ChatOff' | 'ChatSettings' | 'ChatSparkle' | 'ChatVideo' | 'ChatWarning' | 'Check' | 'Checkbox1' | 'Checkbox2' | 'CheckboxArrowRight' | 'CheckboxChecked' | 'CheckboxCheckedSync' | 'CheckboxIndeterminate' | 'CheckboxPerson' | 'CheckboxUnchecked' | 'CheckboxWarning' | 'Checkmark' | 'CheckmarkCircle' | 'CheckmarkCircleSquare' | 'CheckmarkLock' | 'CheckmarkNote' | 'CheckmarkSquare' | 'CheckmarkStarburst' | 'CheckmarkUnderlineCircle' | 'Chess' | 'ChevronCircleDown' | 'ChevronCircleLeft' | 'ChevronCircleRight' | 'ChevronCircleUp' | 'ChevronDoubleDown' | 'ChevronDoubleLeft' | 'ChevronDoubleRight' | 'ChevronDoubleUp' | 'ChevronDown' | 'ChevronDownUp' | 'ChevronLeft' | 'ChevronRight' | 'ChevronUp' | 'ChevronUpDown' | 'Circle' | 'CircleEdit' | 'CircleEraser' | 'CircleHalfFill' | 'CircleHint' | 'CircleHintHalfVertical' | 'CircleImage' | 'CircleLine' | 'CircleMultipleSubtractCheckmark' | 'CircleOff' | 'CircleSmall' | 'City' | 'Class' | 'Classification' | 'ClearFormatting' | 'Clipboard' | 'Clipboard3Day' | 'ClipboardArrowRight' | 'ClipboardBrush' | 'ClipboardBulletList' | 'ClipboardBulletListLtr' | 'ClipboardBulletListRtl' | 'ClipboardCheckmark' | 'ClipboardClock' | 'ClipboardCode' | 'ClipboardDataBar' | 'ClipboardDay' | 'ClipboardEdit' | 'ClipboardError' | 'ClipboardHeart' | 'ClipboardImage' | 'ClipboardLetter' | 'ClipboardLink' | 'ClipboardMathFormula' | 'ClipboardMonth' | 'ClipboardMore' | 'ClipboardMultiple' | 'ClipboardNote' | 'ClipboardNumber123' | 'ClipboardPaste' | 'ClipboardPulse' | 'ClipboardSearch' | 'ClipboardSettings' | 'ClipboardTask' | 'ClipboardTaskAdd' | 'ClipboardTaskList' | 'ClipboardTaskListLtr' | 'ClipboardTaskListRtl' | 'ClipboardText' | 'ClipboardTextEdit' | 'ClipboardTextLtr' | 'ClipboardTextRtl' | 'Clock' | 'ClockAlarm' | 'ClockArrowDownload' | 'ClockDismiss' | 'ClockLock' | 'ClockPause' | 'ClockToolbox' | 'ClosedCaption' | 'ClosedCaptionOff' | 'Cloud' | 'CloudAdd' | 'CloudArchive' | 'CloudArrowDown' | 'CloudArrowUp' | 'CloudBeaker' | 'CloudBidirectional' | 'CloudCheckmark' | 'CloudCube' | 'CloudDatabase' | 'CloudDesktop' | 'CloudDismiss' | 'CloudEdit' | 'CloudError' | 'CloudFlow' | 'CloudLink' | 'CloudOff' | 'CloudSwap' | 'CloudSync' | 'CloudWords' | 'Clover' | 'Code' | 'CodeBlock' | 'CodeCircle' | 'CodeCs' | 'CodeCsRectangle' | 'CodeFs' | 'CodeFsRectangle' | 'CodeJs' | 'CodeJsRectangle' | 'CodePy' | 'CodePyRectangle' | 'CodeRb' | 'CodeRbRectangle' | 'CodeText' | 'CodeTextEdit' | 'CodeTextOff' | 'CodeTs' | 'CodeTsRectangle' | 'CodeVb' | 'CodeVbRectangle' | 'Collections' | 'CollectionsAdd' | 'Color' | 'ColorBackground' | 'ColorBackgroundAccent' | 'ColorFill' | 'ColorFillAccent' | 'ColorLine' | 'ColorLineAccent' | 'Column' | 'ColumnArrowRight' | 'ColumnDoubleCompare' | 'ColumnEdit' | 'ColumnSingle' | 'ColumnSingleCompare' | 'ColumnTriple' | 'ColumnTripleEdit' | 'Comma' | 'Comment' | 'CommentAdd' | 'CommentArrowLeft' | 'CommentArrowRight' | 'CommentCheckmark' | 'CommentDismiss' | 'CommentEdit' | 'CommentError' | 'CommentLightning' | 'CommentLink' | 'CommentMention' | 'CommentMultiple' | 'CommentMultipleCheckmark' | 'CommentMultipleLink' | 'CommentNote' | 'CommentOff' | 'Communication' | 'CommunicationPerson' | 'CommunicationShield' | 'CompassNorthwest' | 'Component2DoubleTapSwipeDown' | 'Component2DoubleTapSwipeUp' | 'Compose' | 'Cone' | 'ConferenceRoom' | 'Connected' | 'Connector' | 'ContactCard' | 'ContactCardGroup' | 'ContactCardLink' | 'ContactCardRibbon' | 'ContentSettings' | 'ContentView' | 'ContentViewGallery' | 'ContentViewGalleryLightning' | 'ContractDownLeft' | 'ContractUpRight' | 'ControlButton' | 'ConvertRange' | 'Cookies' | 'Copy' | 'CopyAdd' | 'CopyArrowRight' | 'CopySelect' | 'Couch' | 'CreditCardClock' | 'CreditCardPerson' | 'CreditCardToolbox' | 'Crop' | 'CropInterim' | 'CropInterimOff' | 'CropSparkle' | 'Crown' | 'CrownSubtract' | 'Cube' | 'CubeAdd' | 'CubeArrowCurveDown' | 'CubeLink' | 'CubeMultiple' | 'CubeQuick' | 'CubeRotate' | 'CubeSync' | 'CubeTree' | 'CurrencyDollarEuro' | 'CurrencyDollarRupee' | 'Cursor' | 'CursorClick' | 'CursorHover' | 'CursorHoverOff' | 'CursorProhibited' | 'Cut' | 'DarkTheme' | 'DataArea' | 'DataBarHorizontal' | 'DataBarHorizontalDescending' | 'DataBarVertical' | 'DataBarVerticalAdd' | 'DataBarVerticalAscending' | 'DataBarVerticalStar' | 'DataFunnel' | 'DataHistogram' | 'DataLine' | 'DataPie' | 'DataScatter' | 'DataSunburst' | 'DataTreemap' | 'DataTrending' | 'DataUsage' | 'DataUsageEdit' | 'DataUsageSettings' | 'DataUsageToolbox' | 'DataWaterfall' | 'DataWhisker' | 'Database' | 'DatabaseArrowDown' | 'DatabaseArrowRight' | 'DatabaseArrowUp' | 'DatabaseLightning' | 'DatabaseLink' | 'DatabaseMultiple' | 'DatabasePerson' | 'DatabasePlugConnected' | 'DatabaseSearch' | 'DatabaseStack' | 'DatabaseSwitch' | 'DatabaseWarning' | 'DatabaseWindow' | 'DecimalArrowLeft' | 'DecimalArrowRight' | 'Delete' | 'DeleteArrowBack' | 'DeleteDismiss' | 'DeleteLines' | 'DeleteOff' | 'Dentist' | 'DesignIdeas' | 'Desk' | 'Desktop' | 'DesktopArrowDown' | 'DesktopArrowRight' | 'DesktopCheckmark' | 'DesktopCursor' | 'DesktopEdit' | 'DesktopFlow' | 'DesktopKeyboard' | 'DesktopMac' | 'DesktopPulse' | 'DesktopSignal' | 'DesktopSpeaker' | 'DesktopSpeakerOff' | 'DesktopSync' | 'DesktopToolbox' | 'DesktopTower' | 'DeveloperBoard' | 'DeveloperBoardLightning' | 'DeveloperBoardLightningToolbox' | 'DeveloperBoardSearch' | 'DeviceEq' | 'DeviceMeetingRoom' | 'DeviceMeetingRoomRemote' | 'Diagram' | 'Dialpad' | 'DialpadOff' | 'DialpadQuestionMark' | 'Diamond' | 'Directions' | 'Dishwasher' | 'Dismiss' | 'DismissCircle' | 'DismissSquare' | 'DismissSquareMultiple' | 'Diversity' | 'DividerShort' | 'DividerTall' | 'Dock' | 'DockRow' | 'Doctor' | 'Document100' | 'Document' | 'DocumentAdd' | 'DocumentArrowDown' | 'DocumentArrowLeft' | 'DocumentArrowRight' | 'DocumentArrowUp' | 'DocumentBorder' | 'DocumentBorderPrint' | 'DocumentBriefcase' | 'DocumentBulletList' | 'DocumentBulletListArrowLeft' | 'DocumentBulletListClock' | 'DocumentBulletListCube' | 'DocumentBulletListMultiple' | 'DocumentBulletListOff' | 'DocumentCatchUp' | 'DocumentCheckmark' | 'DocumentChevronDouble' | 'DocumentContract' | 'DocumentCopy' | 'DocumentCs' | 'DocumentCss' | 'DocumentCube' | 'DocumentData' | 'DocumentDataLink' | 'DocumentDataLock' | 'DocumentDatabase' | 'DocumentDismiss' | 'DocumentEdit' | 'DocumentEndnote' | 'DocumentError' | 'DocumentFit' | 'DocumentFlowchart' | 'DocumentFolder' | 'DocumentFooter' | 'DocumentFooterDismiss' | 'DocumentFs' | 'DocumentHeader' | 'DocumentHeaderArrowDown' | 'DocumentHeaderDismiss' | 'DocumentHeaderFooter' | 'DocumentHeart' | 'DocumentHeartPulse' | 'DocumentImage' | 'DocumentJava' | 'DocumentJavascript' | 'DocumentJs' | 'DocumentKey' | 'DocumentLandscape' | 'DocumentLandscapeData' | 'DocumentLandscapeSplit' | 'DocumentLandscapeSplitHint' | 'DocumentLightning' | 'DocumentLink' | 'DocumentLock' | 'DocumentMargins' | 'DocumentMention' | 'DocumentMultiple' | 'DocumentMultiplePercent' | 'DocumentMultipleProhibited' | 'DocumentMultipleSync' | 'DocumentNumber1' | 'DocumentOnePage' | 'DocumentOnePageAdd' | 'DocumentOnePageBeaker' | 'DocumentOnePageColumns' | 'DocumentOnePageLink' | 'DocumentOnePageMultiple' | 'DocumentOnePageSparkle' | 'DocumentPageBottomCenter' | 'DocumentPageBottomLeft' | 'DocumentPageBottomRight' | 'DocumentPageBreak' | 'DocumentPageNumber' | 'DocumentPageTopCenter' | 'DocumentPageTopLeft' | 'DocumentPageTopRight' | 'DocumentPdf' | 'DocumentPercent' | 'DocumentPerson' | 'DocumentPill' | 'DocumentPrint' | 'DocumentProhibited' | 'DocumentPy' | 'DocumentQuestionMark' | 'DocumentQueue' | 'DocumentQueueAdd' | 'DocumentQueueMultiple' | 'DocumentRb' | 'DocumentRibbon' | 'DocumentSass' | 'DocumentSave' | 'DocumentSearch' | 'DocumentSettings' | 'DocumentSplitHint' | 'DocumentSplitHintOff' | 'DocumentSync' | 'DocumentTable' | 'DocumentTableArrowRight' | 'DocumentTableCheckmark' | 'DocumentTableCube' | 'DocumentTableSearch' | 'DocumentTableTruck' | 'DocumentTarget' | 'DocumentText' | 'DocumentTextClock' | 'DocumentTextExtract' | 'DocumentTextLink' | 'DocumentTextToolbox' | 'DocumentToolbox' | 'DocumentTs' | 'DocumentVb' | 'DocumentWidth' | 'DocumentYml' | 'Door' | 'DoorArrowLeft' | 'DoorArrowRight' | 'DoorTag' | 'DoubleSwipeDown' | 'DoubleSwipeUp' | 'DoubleTapSwipeDown' | 'DoubleTapSwipeUp' | 'Drafts' | 'Drag' | 'DrawImage' | 'DrawShape' | 'DrawText' | 'Drawer' | 'DrawerAdd' | 'DrawerArrowDownload' | 'DrawerDismiss' | 'DrawerPlay' | 'DrawerSubtract' | 'DrinkBeer' | 'DrinkBottle' | 'DrinkBottleOff' | 'DrinkCoffee' | 'DrinkMargarita' | 'DrinkToGo' | 'DrinkWine' | 'DriveTrain' | 'Drop' | 'DualScreen' | 'DualScreenAdd' | 'DualScreenArrowRight' | 'DualScreenArrowUp' | 'DualScreenClock' | 'DualScreenClosedAlert' | 'DualScreenDesktop' | 'DualScreenDismiss' | 'DualScreenGroup' | 'DualScreenHeader' | 'DualScreenLock' | 'DualScreenMirror' | 'DualScreenPagination' | 'DualScreenSettings' | 'DualScreenSpan' | 'DualScreenSpeaker' | 'DualScreenStatusBar' | 'DualScreenTablet' | 'DualScreenUpdate' | 'DualScreenVerticalScroll' | 'DualScreenVibrate' | 'Dumbbell' | 'Dust' | 'Earth' | 'EarthLeaf' | 'Edit' | 'EditArrowBack' | 'EditOff' | 'EditProhibited' | 'EditSettings' | 'Elevator' | 'Emoji' | 'EmojiAdd' | 'EmojiAngry' | 'EmojiEdit' | 'EmojiHand' | 'EmojiHint' | 'EmojiLaugh' | 'EmojiMeh' | 'EmojiMultiple' | 'EmojiSad' | 'EmojiSadSlight' | 'EmojiSmileSlight' | 'EmojiSparkle' | 'EmojiSurprise' | 'Engine' | 'EqualCircle' | 'EqualOff' | 'Eraser' | 'EraserMedium' | 'EraserSegment' | 'EraserSmall' | 'EraserTool' | 'ErrorCircle' | 'ErrorCircleSettings' | 'ExpandUpLeft' | 'ExpandUpRight' | 'ExtendedDock' | 'Eye' | 'EyeLines' | 'EyeOff' | 'EyeTracking' | 'EyeTrackingOff' | 'Eyedropper' | 'EyedropperOff' | 'FStop' | 'FastAcceleration' | 'FastForward' | 'Fax' | 'Feed' | 'Filmstrip' | 'FilmstripImage' | 'FilmstripOff' | 'FilmstripPlay' | 'FilmstripSplit' | 'Filter' | 'FilterAdd' | 'FilterDismiss' | 'FilterSync' | 'Fingerprint' | 'Fire' | 'Fireplace' | 'FixedWidth' | 'Flag' | 'FlagCheckered' | 'FlagClock' | 'FlagOff' | 'FlagPride' | 'FlagPrideIntersexInclusiveProgress' | 'FlagPridePhiladelphia' | 'FlagPrideProgress' | 'Flash' | 'FlashAdd' | 'FlashAuto' | 'FlashCheckmark' | 'FlashFlow' | 'FlashOff' | 'FlashPlay' | 'FlashSettings' | 'FlashSparkle' | 'Flashlight' | 'FlashlightOff' | 'FlipHorizontal' | 'FlipVertical' | 'Flow' | 'Flowchart' | 'FlowchartCircle' | 'Fluent' | 'Fluid' | 'Folder' | 'FolderAdd' | 'FolderArrowLeft' | 'FolderArrowRight' | 'FolderArrowUp' | 'FolderBriefcase' | 'FolderGlobe' | 'FolderLightning' | 'FolderLink' | 'FolderList' | 'FolderMail' | 'FolderMultiple' | 'FolderOpen' | 'FolderOpenVertical' | 'FolderPeople' | 'FolderPerson' | 'FolderProhibited' | 'FolderSearch' | 'FolderSwap' | 'FolderSync' | 'FolderZip' | 'FontDecrease' | 'FontIncrease' | 'FontSpaceTrackingIn' | 'FontSpaceTrackingOut' | 'Food' | 'FoodApple' | 'FoodCake' | 'FoodCarrot' | 'FoodChickenLeg' | 'FoodEgg' | 'FoodFish' | 'FoodGrains' | 'FoodPizza' | 'FoodToast' | 'Form' | 'FormMultiple' | 'FormNew' | 'Fps120' | 'Fps240' | 'Fps30' | 'Fps60' | 'Fps960' | 'Frame' | 'FullScreenMaximize' | 'FullScreenMinimize' | 'Games' | 'GanttChart' | 'Gas' | 'GasPump' | 'Gather' | 'Gauge' | 'GaugeAdd' | 'Gavel' | 'GavelProhibited' | 'Gesture' | 'Gif' | 'Gift' | 'GiftCard' | 'GiftCardAdd' | 'GiftCardArrowRight' | 'GiftCardMoney' | 'GiftCardMultiple' | 'GiftOpen' | 'Glance' | 'GlanceDefault' | 'GlanceHorizontal' | 'GlanceHorizontalSparkle' | 'GlanceHorizontalSparkles' | 'Glasses' | 'GlassesOff' | 'Globe' | 'GlobeAdd' | 'GlobeArrowForward' | 'GlobeArrowUp' | 'GlobeClock' | 'GlobeDesktop' | 'GlobeError' | 'GlobeLocation' | 'GlobePerson' | 'GlobeProhibited' | 'GlobeSearch' | 'GlobeShield' | 'GlobeStar' | 'GlobeSurface' | 'GlobeSync' | 'GlobeVideo' | 'GlobeWarning' | 'Grid' | 'GridCircles' | 'GridDots' | 'GridKanban' | 'Group' | 'GroupDismiss' | 'GroupList' | 'GroupReturn' | 'Guardian' | 'Guest' | 'GuestAdd' | 'Guitar' | 'HandDraw' | 'HandLeft' | 'HandLeftChat' | 'HandOpenHeart' | 'HandRight' | 'HandRightOff' | 'HandWave' | 'Handshake' | 'HardDrive' | 'HardDriveCall' | 'HatGraduation' | 'HatGraduationAdd' | 'HatGraduationSparkle' | 'Hd' | 'Hdr' | 'HdrOff' | 'Headphones' | 'HeadphonesSoundWave' | 'Headset' | 'HeadsetAdd' | 'HeadsetVr' | 'Heart' | 'HeartBroken' | 'HeartCircle' | 'HeartCircleHint' | 'HeartOff' | 'HeartPulse' | 'HeartPulseCheckmark' | 'HeartPulseError' | 'HeartPulseWarning' | 'Hexagon' | 'HexagonThree' | 'Highlight' | 'HighlightAccent' | 'HighlightLink' | 'History' | 'HistoryDismiss' | 'Home' | 'HomeAdd' | 'HomeCheckmark' | 'HomeDatabase' | 'HomeHeart' | 'HomeMore' | 'HomePerson' | 'HomeSplit' | 'Hourglass' | 'HourglassHalf' | 'HourglassOneQuarter' | 'HourglassThreeQuarter' | 'Icons' | 'Image' | 'ImageAdd' | 'ImageAltText' | 'ImageArrowBack' | 'ImageArrowCounterclockwise' | 'ImageArrowForward' | 'ImageBorder' | 'ImageCircle' | 'ImageCopy' | 'ImageEdit' | 'ImageGlobe' | 'ImageMultiple' | 'ImageMultipleOff' | 'ImageOff' | 'ImageProhibited' | 'ImageReflection' | 'ImageSearch' | 'ImageShadow' | 'ImageSparkle' | 'ImageStack' | 'ImageTable' | 'ImmersiveReader' | 'Important' | 'Incognito' | 'Info' | 'InfoShield' | 'InkStroke' | 'InkStrokeArrowDown' | 'InkStrokeArrowUpDown' | 'InkingTool' | 'InkingToolAccent' | 'InprivateAccount' | 'Insert' | 'IosArrow' | 'IosArrowLtr' | 'IosArrowRtl' | 'IosChevronRight' | 'Iot' | 'IotAlert' | 'Javascript' | 'Joystick' | 'Key' | 'KeyCommand' | 'KeyMultiple' | 'KeyReset' | 'Keyboard123' | 'Keyboard' | 'KeyboardDock' | 'KeyboardLayoutFloat' | 'KeyboardLayoutOneHandedLeft' | 'KeyboardLayoutResize' | 'KeyboardLayoutSplit' | 'KeyboardMouse' | 'KeyboardShift' | 'KeyboardShiftUppercase' | 'KeyboardTab' | 'Kiosk' | 'Laptop' | 'LaptopDismiss' | 'LaptopMultiple' | 'LaptopSettings' | 'LaptopShield' | 'LaserTool' | 'Lasso' | 'LauncherSettings' | 'Layer' | 'LayerDiagonal' | 'LayerDiagonalAdd' | 'LayerDiagonalPerson' | 'LayoutCellFour' | 'LayoutCellFourFocusBottomLeft' | 'LayoutCellFourFocusBottomRight' | 'LayoutCellFourFocusTopLeft' | 'LayoutCellFourFocusTopRight' | 'LayoutColumnFour' | 'LayoutColumnFourFocusCenterLeft' | 'LayoutColumnFourFocusCenterRight' | 'LayoutColumnFourFocusLeft' | 'LayoutColumnFourFocusRight' | 'LayoutColumnOneThirdLeft' | 'LayoutColumnOneThirdRight' | 'LayoutColumnOneThirdRightHint' | 'LayoutColumnThree' | 'LayoutColumnThreeFocusCenter' | 'LayoutColumnThreeFocusLeft' | 'LayoutColumnThreeFocusRight' | 'LayoutColumnTwo' | 'LayoutColumnTwoFocusLeft' | 'LayoutColumnTwoFocusRight' | 'LayoutColumnTwoSplitLeft' | 'LayoutColumnTwoSplitLeftFocusBottomLeft' | 'LayoutColumnTwoSplitLeftFocusRight' | 'LayoutColumnTwoSplitLeftFocusTopLeft' | 'LayoutColumnTwoSplitRight' | 'LayoutColumnTwoSplitRightFocusBottomRight' | 'LayoutColumnTwoSplitRightFocusLeft' | 'LayoutColumnTwoSplitRightFocusTopRight' | 'LayoutRowFour' | 'LayoutRowFourFocusBottom' | 'LayoutRowFourFocusCenterBottom' | 'LayoutRowFourFocusCenterTop' | 'LayoutRowFourFocusTop' | 'LayoutRowThree' | 'LayoutRowThreeFocusBottom' | 'LayoutRowThreeFocusCenter' | 'LayoutRowThreeFocusTop' | 'LayoutRowTwo' | 'LayoutRowTwoFocusBottom' | 'LayoutRowTwoFocusTop' | 'LayoutRowTwoSplitBottom' | 'LayoutRowTwoSplitBottomFocusBottomLeft' | 'LayoutRowTwoSplitBottomFocusBottomRight' | 'LayoutRowTwoSplitBottomFocusTop' | 'LayoutRowTwoSplitTop' | 'LayoutRowTwoSplitTopFocusBottom' | 'LayoutRowTwoSplitTopFocusTopLeft' | 'LayoutRowTwoSplitTopFocusTopRight' | 'LeafOne' | 'LeafThree' | 'LeafTwo' | 'LearningApp' | 'Library' | 'Lightbulb' | 'LightbulbCheckmark' | 'LightbulbCircle' | 'LightbulbFilament' | 'LightbulbPerson' | 'Likert' | 'Line' | 'LineDashes' | 'LineHorizontal1' | 'LineHorizontal1Dashes' | 'LineHorizontal2DashesSolid' | 'LineHorizontal3' | 'LineHorizontal4' | 'LineHorizontal4Search' | 'LineHorizontal5' | 'LineHorizontal5Error' | 'LineStyle' | 'LineThickness' | 'Link' | 'LinkAdd' | 'LinkDismiss' | 'LinkEdit' | 'LinkMultiple' | 'LinkPerson' | 'LinkSettings' | 'LinkSquare' | 'LinkToolbox' | 'List' | 'ListBar' | 'ListBarTree' | 'ListBarTreeOffset' | 'ListRtl' | 'Live' | 'LiveOff' | 'LocalLanguage' | 'Location' | 'LocationAdd' | 'LocationAddLeft' | 'LocationAddRight' | 'LocationAddUp' | 'LocationArrow' | 'LocationArrowLeft' | 'LocationArrowRight' | 'LocationArrowUp' | 'LocationDismiss' | 'LocationLive' | 'LocationOff' | 'LocationTargetSquare' | 'LockClosed' | 'LockClosedKey' | 'LockMultiple' | 'LockOpen' | 'LockShield' | 'Lottery' | 'Luggage' | 'Mail' | 'MailAdd' | 'MailAlert' | 'MailAllRead' | 'MailAllUnread' | 'MailArrowDoubleBack' | 'MailArrowDown' | 'MailArrowForward' | 'MailArrowUp' | 'MailAttach' | 'MailCheckmark' | 'MailClock' | 'MailCopy' | 'MailDismiss' | 'MailEdit' | 'MailError' | 'MailInbox' | 'MailInboxAdd' | 'MailInboxAll' | 'MailInboxArrowDown' | 'MailInboxArrowRight' | 'MailInboxArrowUp' | 'MailInboxCheckmark' | 'MailInboxDismiss' | 'MailLink' | 'MailList' | 'MailMultiple' | 'MailOff' | 'MailOpenPerson' | 'MailPause' | 'MailProhibited' | 'MailRead' | 'MailReadMultiple' | 'MailRewind' | 'MailSettings' | 'MailShield' | 'MailTemplate' | 'MailUnread' | 'MailWarning' | 'Mailbox' | 'Map' | 'MapDrive' | 'Markdown' | 'MatchAppLayout' | 'MathFormatLinear' | 'MathFormatProfessional' | 'MathFormula' | 'MathSymbols' | 'Maximize' | 'MeetNow' | 'Megaphone' | 'MegaphoneCircle' | 'MegaphoneLoud' | 'MegaphoneOff' | 'Memory' | 'Mention' | 'MentionArrowDown' | 'MentionBrackets' | 'Merge' | 'Mic' | 'MicOff' | 'MicProhibited' | 'MicPulse' | 'MicPulseOff' | 'MicRecord' | 'MicSettings' | 'MicSparkle' | 'MicSync' | 'Microscope' | 'Midi' | 'MobileOptimized' | 'Mold' | 'Molecule' | 'Money' | 'MoneyCalculator' | 'MoneyDismiss' | 'MoneyHand' | 'MoneyOff' | 'MoneySettings' | 'MoreCircle' | 'MoreHorizontal' | 'MoreVertical' | 'MountainLocationBottom' | 'MountainLocationTop' | 'MountainTrail' | 'MoviesAndTv' | 'Multiplier12X' | 'Multiplier15X' | 'Multiplier18X' | 'Multiplier1X' | 'Multiplier2X' | 'Multiplier5X' | 'MultiselectLtr' | 'MultiselectRtl' | 'MusicNote1' | 'MusicNote2' | 'MusicNote2Play' | 'MusicNoteOff1' | 'MusicNoteOff2' | 'MyLocation' | 'Navigation' | 'NavigationLocationTarget' | 'NavigationPlay' | 'NavigationUnread' | 'NetworkAdapter' | 'NetworkCheck' | 'New' | 'News' | 'Next' | 'NextFrame' | 'Note' | 'NoteAdd' | 'NoteEdit' | 'NotePin' | 'Notebook' | 'NotebookAdd' | 'NotebookArrowCurveDown' | 'NotebookError' | 'NotebookEye' | 'NotebookLightning' | 'NotebookQuestionMark' | 'NotebookSection' | 'NotebookSectionArrowRight' | 'NotebookSubsection' | 'NotebookSync' | 'Notepad' | 'NotepadEdit' | 'NotepadPerson' | 'NumberCircle0' | 'NumberCircle1' | 'NumberCircle2' | 'NumberCircle3' | 'NumberCircle4' | 'NumberCircle5' | 'NumberCircle6' | 'NumberCircle7' | 'NumberCircle8' | 'NumberCircle9' | 'NumberRow' | 'NumberSymbol' | 'NumberSymbolDismiss' | 'NumberSymbolSquare' | 'Open' | 'OpenFolder' | 'OpenOff' | 'Options' | 'Organization' | 'OrganizationHorizontal' | 'Orientation' | 'Oval' | 'Oven' | 'PaddingDown' | 'PaddingLeft' | 'PaddingRight' | 'PaddingTop' | 'PageFit' | 'PaintBrush' | 'PaintBrushArrowDown' | 'PaintBrushArrowUp' | 'PaintBucket' | 'Pair' | 'PanelBottom' | 'PanelBottomContract' | 'PanelBottomExpand' | 'PanelLeft' | 'PanelLeftAdd' | 'PanelLeftContract' | 'PanelLeftExpand' | 'PanelLeftFocusRight' | 'PanelLeftHeader' | 'PanelLeftHeaderAdd' | 'PanelLeftHeaderKey' | 'PanelLeftKey' | 'PanelLeftText' | 'PanelLeftTextAdd' | 'PanelLeftTextDismiss' | 'PanelRight' | 'PanelRightAdd' | 'PanelRightContract' | 'PanelRightCursor' | 'PanelRightExpand' | 'PanelRightGallery' | 'PanelSeparateWindow' | 'PanelTopContract' | 'PanelTopExpand' | 'PanelTopGallery' | 'Password' | 'Patch' | 'Patient' | 'Pause' | 'PauseCircle' | 'PauseOff' | 'PauseSettings' | 'Payment' | 'Pen' | 'PenDismiss' | 'PenOff' | 'PenProhibited' | 'PenSparkle' | 'Pentagon' | 'People' | 'PeopleAdd' | 'PeopleAudience' | 'PeopleCall' | 'PeopleChat' | 'PeopleCheckmark' | 'PeopleCommunity' | 'PeopleCommunityAdd' | 'PeopleEdit' | 'PeopleError' | 'PeopleList' | 'PeopleLock' | 'PeopleMoney' | 'PeopleProhibited' | 'PeopleQueue' | 'PeopleSearch' | 'PeopleSettings' | 'PeopleStar' | 'PeopleSwap' | 'PeopleSync' | 'PeopleTeam' | 'PeopleTeamAdd' | 'PeopleTeamDelete' | 'PeopleTeamToolbox' | 'PeopleToolbox' | 'Person' | 'Person5' | 'Person6' | 'PersonAccounts' | 'PersonAdd' | 'PersonAlert' | 'PersonArrowBack' | 'PersonArrowLeft' | 'PersonArrowRight' | 'PersonAvailable' | 'PersonBoard' | 'PersonCall' | 'PersonChat' | 'PersonCircle' | 'PersonClock' | 'PersonDelete' | 'PersonDesktop' | 'PersonEdit' | 'PersonFeedback' | 'PersonHeart' | 'PersonInfo' | 'PersonKey' | 'PersonLightbulb' | 'PersonLightning' | 'PersonLink' | 'PersonLock' | 'PersonMail' | 'PersonMoney' | 'PersonNote' | 'PersonPhone' | 'PersonPill' | 'PersonProhibited' | 'PersonQuestionMark' | 'PersonRibbon' | 'PersonRunning' | 'PersonSearch' | 'PersonSettings' | 'PersonSquare' | 'PersonSquareCheckmark' | 'PersonStanding' | 'PersonStar' | 'PersonStarburst' | 'PersonSubtract' | 'PersonSupport' | 'PersonSwap' | 'PersonSync' | 'PersonTag' | 'PersonVoice' | 'PersonWalking' | 'PersonWarning' | 'PersonWrench' | 'Phone' | 'PhoneAdd' | 'PhoneArrowRight' | 'PhoneBriefcase' | 'PhoneChat' | 'PhoneCheckmark' | 'PhoneDesktop' | 'PhoneDesktopAdd' | 'PhoneDismiss' | 'PhoneEdit' | 'PhoneEraser' | 'PhoneFooterArrowDown' | 'PhoneHeaderArrowUp' | 'PhoneKey' | 'PhoneLaptop' | 'PhoneLinkSetup' | 'PhoneLock' | 'PhoneMultiple' | 'PhoneMultipleSettings' | 'PhonePageHeader' | 'PhonePagination' | 'PhonePerson' | 'PhoneScreenTime' | 'PhoneShake' | 'PhoneSpanIn' | 'PhoneSpanOut' | 'PhoneSpeaker' | 'PhoneStatusBar' | 'PhoneSubtract' | 'PhoneTablet' | 'PhoneUpdate' | 'PhoneUpdateCheckmark' | 'PhoneVerticalScroll' | 'PhoneVibrate' | 'PhotoFilter' | 'Pi' | 'PictureInPicture' | 'PictureInPictureEnter' | 'PictureInPictureExit' | 'Pill' | 'Pin' | 'PinOff' | 'Pipeline' | 'PipelineAdd' | 'PipelineArrowCurveDown' | 'PipelinePlay' | 'Pivot' | 'PlantGrass' | 'PlantRagweed' | 'Play' | 'PlayCircle' | 'PlayCircleHint' | 'PlayMultiple' | 'PlaySettings' | 'PlayingCards' | 'PlugConnected' | 'PlugConnectedAdd' | 'PlugConnectedCheckmark' | 'PlugConnectedSettings' | 'PlugDisconnected' | 'PointScan' | 'Poll' | 'PollHorizontal' | 'PollOff' | 'PortHdmi' | 'PortMicroUsb' | 'PortUsbA' | 'PortUsbC' | 'PositionBackward' | 'PositionForward' | 'PositionToBack' | 'PositionToFront' | 'Power' | 'Predictions' | 'Premium' | 'PremiumPerson' | 'PresenceAvailable' | 'PresenceAway' | 'PresenceBlocked' | 'PresenceBusy' | 'PresenceDnd' | 'PresenceOffline' | 'PresenceOof' | 'PresenceUnknown' | 'Presenter' | 'PresenterOff' | 'PreviewLink' | 'Previous' | 'PreviousFrame' | 'Print' | 'PrintAdd' | 'Production' | 'ProductionCheckmark' | 'Prohibited' | 'ProhibitedMultiple' | 'ProhibitedNote' | 'ProjectionScreen' | 'ProjectionScreenDismiss' | 'ProjectionScreenText' | 'ProtocolHandler' | 'Pulse' | 'PulseSquare' | 'PuzzleCube' | 'PuzzleCubePiece' | 'PuzzlePiece' | 'PuzzlePieceShield' | 'QrCode' | 'Question' | 'QuestionCircle' | 'QuizNew' | 'Radar' | 'RadarCheckmark' | 'RadarRectangleMultiple' | 'RadioButton' | 'RadioButtonOff' | 'Ram' | 'RatingMature' | 'RatioOneToOne' | 'ReOrder' | 'ReOrderDotsHorizontal' | 'ReOrderDotsVertical' | 'ReadAloud' | 'ReadingList' | 'ReadingListAdd' | 'ReadingModeMobile' | 'RealEstate' | 'Receipt' | 'ReceiptAdd' | 'ReceiptBag' | 'ReceiptCube' | 'ReceiptMoney' | 'ReceiptPlay' | 'ReceiptSearch' | 'ReceiptSparkles' | 'Record' | 'RecordStop' | 'RectangleLandscape' | 'RectangleLandscapeHintCopy' | 'RectangleLandscapeSparkle' | 'RectangleLandscapeSync' | 'RectangleLandscapeSyncOff' | 'RectanglePortraitLocationTarget' | 'Recycle' | 'RemixAdd' | 'Remote' | 'Rename' | 'Reorder' | 'Replay' | 'Resize' | 'ResizeImage' | 'ResizeLarge' | 'ResizeSmall' | 'ResizeTable' | 'ResizeVideo' | 'Reward' | 'Rewind' | 'Rhombus' | 'Ribbon' | 'RibbonAdd' | 'RibbonOff' | 'RibbonStar' | 'RoadCone' | 'Rocket' | 'RotateLeft' | 'RotateRight' | 'Router' | 'RowTriple' | 'Rss' | 'Ruler' | 'Run' | 'Sanitize' | 'Save' | 'SaveArrowRight' | 'SaveCopy' | 'SaveEdit' | 'SaveImage' | 'SaveMultiple' | 'SaveSearch' | 'SaveSync' | 'Savings' | 'ScaleFill' | 'ScaleFit' | 'Scales' | 'Scan' | 'ScanCamera' | 'ScanDash' | 'ScanObject' | 'ScanPerson' | 'ScanQrCode' | 'ScanTable' | 'ScanText' | 'ScanThumbUp' | 'ScanThumbUpOff' | 'ScanType' | 'ScanTypeCheckmark' | 'ScanTypeOff' | 'Scratchpad' | 'ScreenCut' | 'ScreenPerson' | 'ScreenSearch' | 'Screenshot' | 'ScreenshotRecord' | 'Script' | 'Search' | 'SearchInfo' | 'SearchSettings' | 'SearchShield' | 'SearchSquare' | 'SearchVisual' | 'Seat' | 'SeatAdd' | 'SelectAllOff' | 'SelectAllOn' | 'SelectObject' | 'SelectObjectSkew' | 'SelectObjectSkewDismiss' | 'SelectObjectSkewEdit' | 'Send' | 'SendBeaker' | 'SendClock' | 'SendCopy' | 'SerialPort' | 'Server' | 'ServerLink' | 'ServerMultiple' | 'ServerPlay' | 'ServerSurface' | 'ServerSurfaceMultiple' | 'ServiceBell' | 'Settings' | 'SettingsChat' | 'SettingsCogMultiple' | 'ShapeExclude' | 'ShapeIntersect' | 'ShapeOrganic' | 'ShapeSubtract' | 'ShapeUnion' | 'Shapes' | 'Share' | 'ShareAndroid' | 'ShareCloseTray' | 'ShareIos' | 'ShareScreenPerson' | 'ShareScreenPersonOverlay' | 'ShareScreenPersonOverlayInside' | 'ShareScreenPersonP' | 'ShareScreenStart' | 'ShareScreenStop' | 'Shield' | 'ShieldAdd' | 'ShieldBadge' | 'ShieldCheckmark' | 'ShieldDismiss' | 'ShieldDismissShield' | 'ShieldError' | 'ShieldGlobe' | 'ShieldKeyhole' | 'ShieldLock' | 'ShieldPerson' | 'ShieldPersonAdd' | 'ShieldProhibited' | 'ShieldQuestion' | 'ShieldTask' | 'Shifts' | 'Shifts30Minutes' | 'ShiftsActivity' | 'ShiftsAdd' | 'ShiftsAvailability' | 'ShiftsCheckmark' | 'ShiftsDay' | 'ShiftsOpen' | 'ShiftsProhibited' | 'ShiftsQuestionMark' | 'ShiftsTeam' | 'ShoppingBag' | 'ShoppingBagAdd' | 'ShoppingBagArrowLeft' | 'ShoppingBagDismiss' | 'ShoppingBagPause' | 'ShoppingBagPercent' | 'ShoppingBagPlay' | 'ShoppingBagTag' | 'Shortpick' | 'Showerhead' | 'SidebarSearchLtr' | 'SidebarSearchRtl' | 'SignOut' | 'Signature' | 'Sim' | 'SkipBack10' | 'SkipForward10' | 'SkipForward30' | 'SkipForwardTab' | 'SlashForward' | 'Sleep' | 'SlideAdd' | 'SlideArrowRight' | 'SlideContent' | 'SlideEraser' | 'SlideGrid' | 'SlideHide' | 'SlideLayout' | 'SlideLink' | 'SlideMicrophone' | 'SlideMultiple' | 'SlideMultipleArrowRight' | 'SlideMultipleSearch' | 'SlideRecord' | 'SlideSearch' | 'SlideSettings' | 'SlideSize' | 'SlideText' | 'SlideTextEdit' | 'SlideTextMultiple' | 'SlideTextPerson' | 'SlideTextSparkle' | 'SlideTransition' | 'Smartwatch' | 'SmartwatchDot' | 'Snooze' | 'SoundSource' | 'SoundWaveCircle' | 'Space3D' | 'Spacebar' | 'Sparkle' | 'SparkleCircle' | 'Speaker0' | 'Speaker1' | 'Speaker2' | 'SpeakerBluetooth' | 'SpeakerBox' | 'SpeakerEdit' | 'SpeakerMute' | 'SpeakerOff' | 'SpeakerSettings' | 'SpeakerUsb' | 'SpinnerIos' | 'SplitHint' | 'SplitHorizontal' | 'SplitVertical' | 'Sport' | 'SportAmericanFootball' | 'SportBaseball' | 'SportBasketball' | 'SportHockey' | 'SportSoccer' | 'SprayCan' | 'Square' | 'SquareAdd' | 'SquareArrowForward' | 'SquareDismiss' | 'SquareEraser' | 'SquareHint' | 'SquareHintApps' | 'SquareHintArrowBack' | 'SquareHintHexagon' | 'SquareHintSparkles' | 'SquareMultiple' | 'SquareShadow' | 'SquaresNested' | 'Stack' | 'StackAdd' | 'StackArrowForward' | 'StackStar' | 'StackVertical' | 'Star' | 'StarAdd' | 'StarArrowBack' | 'StarArrowRightEnd' | 'StarArrowRightStart' | 'StarCheckmark' | 'StarDismiss' | 'StarEdit' | 'StarEmphasis' | 'StarHalf' | 'StarLineHorizontal3' | 'StarOff' | 'StarOneQuarter' | 'StarProhibited' | 'StarSettings' | 'StarThreeQuarter' | 'Status' | 'Step' | 'Steps' | 'Stethoscope' | 'Sticker' | 'StickerAdd' | 'Stop' | 'Storage' | 'StoreMicrosoft' | 'Stream' | 'StreamInput' | 'StreamInputOutput' | 'StreamOutput' | 'StreetSign' | 'StyleGuide' | 'SubGrid' | 'Subtitles' | 'Subtract' | 'SubtractCircle' | 'SubtractCircleArrowBack' | 'SubtractCircleArrowForward' | 'SubtractParentheses' | 'SubtractSquare' | 'SubtractSquareMultiple' | 'SurfaceEarbuds' | 'SurfaceHub' | 'SwimmingPool' | 'SwipeDown' | 'SwipeRight' | 'SwipeUp' | 'Symbols' | 'SyncOff' | 'Syringe' | 'System' | 'Tab' | 'TabAdd' | 'TabArrowLeft' | 'TabDesktop' | 'TabDesktopArrowClockwise' | 'TabDesktopArrowLeft' | 'TabDesktopBottom' | 'TabDesktopClock' | 'TabDesktopCopy' | 'TabDesktopImage' | 'TabDesktopLink' | 'TabDesktopMultiple' | 'TabDesktopMultipleAdd' | 'TabDesktopMultipleBottom' | 'TabDesktopNewPage' | 'TabInPrivate' | 'TabInprivateAccount' | 'TabProhibited' | 'TabShieldDismiss' | 'Table' | 'TableAdd' | 'TableArrowUp' | 'TableBottomRow' | 'TableCalculator' | 'TableCellEdit' | 'TableCellsMerge' | 'TableCellsSplit' | 'TableChecker' | 'TableColumnTopBottom' | 'TableCopy' | 'TableDefault' | 'TableDeleteColumn' | 'TableDeleteRow' | 'TableDismiss' | 'TableEdit' | 'TableFreezeColumn' | 'TableFreezeColumnAndRow' | 'TableFreezeRow' | 'TableImage' | 'TableInsertColumn' | 'TableInsertRow' | 'TableLightning' | 'TableLink' | 'TableLock' | 'TableMoveAbove' | 'TableMoveBelow' | 'TableMoveLeft' | 'TableMoveRight' | 'TableMultiple' | 'TableOffset' | 'TableOffsetAdd' | 'TableOffsetLessThanOrEqualTo' | 'TableOffsetSettings' | 'TableResizeColumn' | 'TableResizeRow' | 'TableSearch' | 'TableSettings' | 'TableSimple' | 'TableSimpleCheckmark' | 'TableSimpleExclude' | 'TableSimpleInclude' | 'TableSimpleMultiple' | 'TableSplit' | 'TableStackAbove' | 'TableStackBelow' | 'TableStackLeft' | 'TableStackRight' | 'TableSwitch' | 'Tablet' | 'TabletLaptop' | 'TabletSpeaker' | 'Tabs' | 'Tag' | 'TagCircle' | 'TagDismiss' | 'TagError' | 'TagLock' | 'TagLockAccent' | 'TagMultiple' | 'TagOff' | 'TagQuestionMark' | 'TagReset' | 'TagSearch' | 'TapDouble' | 'TapSingle' | 'Target' | 'TargetAdd' | 'TargetArrow' | 'TargetDismiss' | 'TargetEdit' | 'TaskListAdd' | 'TaskListLtr' | 'TaskListRtl' | 'TaskListSquareAdd' | 'TaskListSquareDatabase' | 'TaskListSquareLtr' | 'TaskListSquarePerson' | 'TaskListSquareRtl' | 'TaskListSquareSettings' | 'TasksApp' | 'TeardropBottomRight' | 'Teddy' | 'Temperature' | 'Tent' | 'TetrisApp' | 'Text' | 'TextAbcUnderlineDouble' | 'TextAdd' | 'TextAddSpaceAfter' | 'TextAddSpaceBefore' | 'TextAddT' | 'TextAlignCenter' | 'TextAlignCenterRotate270' | 'TextAlignCenterRotate90' | 'TextAlignDistributed' | 'TextAlignDistributedEvenly' | 'TextAlignDistributedVertical' | 'TextAlignJustify' | 'TextAlignJustifyLow' | 'TextAlignJustifyLow90' | 'TextAlignJustifyLowRotate270' | 'TextAlignJustifyLowRotate90' | 'TextAlignJustifyRotate270' | 'TextAlignJustifyRotate90' | 'TextAlignLeft' | 'TextAlignLeftRotate270' | 'TextAlignLeftRotate90' | 'TextAlignRight' | 'TextAlignRightRotate270' | 'TextAlignRightRotate90' | 'TextArrowDownRightColumn' | 'TextAsterisk' | 'TextBaseline' | 'TextBold' | 'TextBoxSettings' | 'TextBulletList' | 'TextBulletList270' | 'TextBulletList90' | 'TextBulletListAdd' | 'TextBulletListCheckmark' | 'TextBulletListDismiss' | 'TextBulletListLtr' | 'TextBulletListLtr90' | 'TextBulletListLtrRotate270' | 'TextBulletListRtl' | 'TextBulletListRtl90' | 'TextBulletListSquare' | 'TextBulletListSquareClock' | 'TextBulletListSquareEdit' | 'TextBulletListSquarePerson' | 'TextBulletListSquareSearch' | 'TextBulletListSquareSettings' | 'TextBulletListSquareShield' | 'TextBulletListSquareSparkle' | 'TextBulletListSquareToolbox' | 'TextBulletListSquareWarning' | 'TextBulletListTree' | 'TextCaseLowercase' | 'TextCaseTitle' | 'TextCaseUppercase' | 'TextChangeCase' | 'TextClearFormatting' | 'TextCollapse' | 'TextColor' | 'TextColorAccent' | 'TextColumnOne' | 'TextColumnOneNarrow' | 'TextColumnOneSemiNarrow' | 'TextColumnOneWide' | 'TextColumnOneWideLightning' | 'TextColumnThree' | 'TextColumnTwo' | 'TextColumnTwoLeft' | 'TextColumnTwoRight' | 'TextColumnWide' | 'TextContinuous' | 'TextDensity' | 'TextDescription' | 'TextDescriptionLtr' | 'TextDescriptionRtl' | 'TextDirectionHorizontalLeft' | 'TextDirectionHorizontalLtr' | 'TextDirectionHorizontalRight' | 'TextDirectionHorizontalRtl' | 'TextDirectionRotate270Right' | 'TextDirectionRotate315Right' | 'TextDirectionRotate45Right' | 'TextDirectionRotate90Left' | 'TextDirectionRotate90Ltr' | 'TextDirectionRotate90Right' | 'TextDirectionRotate90Rtl' | 'TextDirectionVertical' | 'TextEditStyle' | 'TextEditStyleCharacterA' | 'TextEditStyleCharacterGa' | 'TextEffects' | 'TextEffectsSparkle' | 'TextExpand' | 'TextField' | 'TextFirstLine' | 'TextFont' | 'TextFontInfo' | 'TextFontSize' | 'TextFootnote' | 'TextGrammarArrowLeft' | 'TextGrammarArrowRight' | 'TextGrammarCheckmark' | 'TextGrammarDismiss' | 'TextGrammarError' | 'TextGrammarLightning' | 'TextGrammarSettings' | 'TextGrammarWand' | 'TextHanging' | 'TextHeader1' | 'TextHeader1Lines' | 'TextHeader1LinesCaret' | 'TextHeader2' | 'TextHeader2Lines' | 'TextHeader2LinesCaret' | 'TextHeader3' | 'TextHeader3Lines' | 'TextHeader3LinesCaret' | 'TextIndentDecrease' | 'TextIndentDecreaseLtr' | 'TextIndentDecreaseLtr90' | 'TextIndentDecreaseLtrRotate270' | 'TextIndentDecreaseRotate270' | 'TextIndentDecreaseRotate90' | 'TextIndentDecreaseRtl' | 'TextIndentDecreaseRtl90' | 'TextIndentDecreaseRtlRotate270' | 'TextIndentIncrease' | 'TextIndentIncreaseLtr' | 'TextIndentIncreaseLtr90' | 'TextIndentIncreaseLtrRotate270' | 'TextIndentIncreaseRotate270' | 'TextIndentIncreaseRotate90' | 'TextIndentIncreaseRtl' | 'TextIndentIncreaseRtl90' | 'TextIndentIncreaseRtlRotate270' | 'TextItalic' | 'TextLineSpacing' | 'TextMore' | 'TextNumberFormat' | 'TextNumberListLtr' | 'TextNumberListLtr90' | 'TextNumberListLtrRotate270' | 'TextNumberListRotate270' | 'TextNumberListRotate90' | 'TextNumberListRtl' | 'TextNumberListRtl90' | 'TextNumberListRtlRotate270' | 'TextParagraph' | 'TextParagraphDirection' | 'TextParagraphDirectionLeft' | 'TextParagraphDirectionRight' | 'TextPeriodAsterisk' | 'TextPositionBehind' | 'TextPositionFront' | 'TextPositionLine' | 'TextPositionSquare' | 'TextPositionSquareLeft' | 'TextPositionSquareRight' | 'TextPositionThrough' | 'TextPositionTight' | 'TextPositionTopBottom' | 'TextProofingTools' | 'TextQuote' | 'TextSortAscending' | 'TextSortDescending' | 'TextStrikethrough' | 'TextSubscript' | 'TextSuperscript' | 'TextT' | 'TextTTag' | 'TextUnderline' | 'TextUnderlineCharacterU' | 'TextUnderlineDouble' | 'TextWholeWord' | 'TextWordCount' | 'TextWrap' | 'TextWrapOff' | 'Textbox' | 'TextboxAlignBottom' | 'TextboxAlignBottomCenter' | 'TextboxAlignBottomLeft' | 'TextboxAlignBottomRight' | 'TextboxAlignBottomRotate90' | 'TextboxAlignCenter' | 'TextboxAlignMiddle' | 'TextboxAlignMiddleLeft' | 'TextboxAlignMiddleRight' | 'TextboxAlignMiddleRotate90' | 'TextboxAlignTop' | 'TextboxAlignTopCenter' | 'TextboxAlignTopLeft' | 'TextboxAlignTopRight' | 'TextboxAlignTopRotate90' | 'TextboxMore' | 'TextboxRotate90' | 'TextboxSettings' | 'Thinking' | 'ThumbDislike' | 'ThumbLike' | 'ThumbLikeDislike' | 'TicketDiagonal' | 'TicketHorizontal' | 'TimeAndWeather' | 'TimePicker' | 'Timeline' | 'Timer10' | 'Timer' | 'Timer2' | 'Timer3' | 'TimerOff' | 'ToggleLeft' | 'ToggleMultiple' | 'ToggleRight' | 'Toolbox' | 'TooltipQuote' | 'TopSpeed' | 'Translate' | 'TranslateAuto' | 'TranslateOff' | 'Transmission' | 'TrayItemAdd' | 'TrayItemRemove' | 'TreeDeciduous' | 'TreeEvergreen' | 'Triangle' | 'TriangleDown' | 'TriangleLeft' | 'TriangleRight' | 'TriangleUp' | 'Trophy' | 'TrophyLock' | 'TrophyOff' | 'Tv' | 'TvArrowRight' | 'TvUsb' | 'Umbrella' | 'UninstallApp' | 'UsbPlug' | 'UsbStick' | 'Vault' | 'VehicleBicycle' | 'VehicleBus' | 'VehicleCab' | 'VehicleCableCar' | 'VehicleCar' | 'VehicleCarCollision' | 'VehicleCarParking' | 'VehicleCarProfile' | 'VehicleCarProfileLtr' | 'VehicleCarProfileLtrClock' | 'VehicleCarProfileRtl' | 'VehicleShip' | 'VehicleSubway' | 'VehicleSubwayClock' | 'VehicleTruck' | 'VehicleTruckBag' | 'VehicleTruckCube' | 'VehicleTruckProfile' | 'Video' | 'Video360' | 'Video360Off' | 'VideoAdd' | 'VideoBackgroundEffect' | 'VideoBackgroundEffectHorizontal' | 'VideoChat' | 'VideoClip' | 'VideoClipMultiple' | 'VideoClipOff' | 'VideoClipOptimize' | 'VideoLink' | 'VideoOff' | 'VideoPeople' | 'VideoPerson' | 'VideoPersonCall' | 'VideoPersonClock' | 'VideoPersonOff' | 'VideoPersonPulse' | 'VideoPersonSparkle' | 'VideoPersonSparkleOff' | 'VideoPersonStar' | 'VideoPersonStarOff' | 'VideoPlayPause' | 'VideoProhibited' | 'VideoRecording' | 'VideoSecurity' | 'VideoSwitch' | 'VideoSync' | 'ViewDesktop' | 'ViewDesktopMobile' | 'VirtualNetwork' | 'VirtualNetworkToolbox' | 'Voicemail' | 'VoicemailArrowBack' | 'VoicemailArrowForward' | 'VoicemailArrowSubtract' | 'VoicemailShield' | 'VoicemailSubtract' | 'Vote' | 'WalkieTalkie' | 'Wallet' | 'WalletCreditCard' | 'Wallpaper' | 'Wand' | 'Warning' | 'WarningShield' | 'Washer' | 'Water' | 'WeatherBlowingSnow' | 'WeatherCloudy' | 'WeatherDrizzle' | 'WeatherDuststorm' | 'WeatherFog' | 'WeatherHailDay' | 'WeatherHailNight' | 'WeatherHaze' | 'WeatherMoon' | 'WeatherMoonOff' | 'WeatherPartlyCloudyDay' | 'WeatherPartlyCloudyNight' | 'WeatherRain' | 'WeatherRainShowersDay' | 'WeatherRainShowersNight' | 'WeatherRainSnow' | 'WeatherSnow' | 'WeatherSnowShowerDay' | 'WeatherSnowShowerNight' | 'WeatherSnowflake' | 'WeatherSqualls' | 'WeatherSunny' | 'WeatherSunnyHigh' | 'WeatherSunnyLow' | 'WeatherThunderstorm' | 'WebAsset' | 'Whiteboard' | 'WhiteboardOff' | 'Wifi1' | 'Wifi2' | 'Wifi3' | 'Wifi4' | 'WifiLock' | 'WifiOff' | 'WifiSettings' | 'WifiWarning' | 'Window' | 'WindowAd' | 'WindowAdOff' | 'WindowAdPerson' | 'WindowApps' | 'WindowArrowUp' | 'WindowBulletList' | 'WindowBulletListAdd' | 'WindowConsole' | 'WindowDatabase' | 'WindowDevEdit' | 'WindowDevTools' | 'WindowEdit' | 'WindowHeaderHorizontal' | 'WindowHeaderHorizontalOff' | 'WindowHeaderVertical' | 'WindowInprivate' | 'WindowInprivateAccount' | 'WindowLocationTarget' | 'WindowMultiple' | 'WindowMultipleSwap' | 'WindowNew' | 'WindowPlay' | 'WindowSettings' | 'WindowShield' | 'WindowText' | 'WindowWrench' | 'Wrench' | 'WrenchScrewdriver' | 'WrenchSettings' | 'XboxConsole' | 'XboxController' | 'XboxControllerError' | 'Xray' | 'ZoomFit' | 'ZoomIn' | 'ZoomOut';
type ActionStyle = 'default' | 'positive' | 'destructive';
type ActionMode = 'primary' | 'secondary';
type FallbackAction = ISubmitAction | IOpenUrlAction | IExecuteAction | IToggleVisibilityAction | IShowCardAction | IResetInputsAction | 'drop';
type ContainerStyle = 'default' | 'emphasis' | 'accent' | 'good' | 'attention' | 'warning';
type TargetWidth = 'VeryNarrow' | 'Narrow' | 'Standard' | 'Wide' | 'atLeast:VeryNarrow' | 'atMost:VeryNarrow' | 'atLeast:Narrow' | 'atMost:Narrow' | 'atLeast:Standard' | 'atMost:Standard' | 'atLeast:Wide' | 'atMost:Wide';
type HorizontalAlignment = 'Left' | 'Center' | 'Right';
type VerticalAlignment = 'Top' | 'Center' | 'Bottom';
type FlowLayoutItemFit = 'Fit' | 'Fill';
type Spacing = 'None' | 'ExtraSmall' | 'Small' | 'Default' | 'Medium' | 'Large' | 'ExtraLarge' | 'Padding';
type FillMode = 'Cover' | 'RepeatHorizontally' | 'RepeatVertically' | 'Repeat';
type MentionType = 'Person' | 'Tag';
type ElementHeight = 'auto' | 'stretch';
type TextSize = 'Small' | 'Default' | 'Medium' | 'Large' | 'ExtraLarge';
type TextWeight = 'Lighter' | 'Default' | 'Bolder';
type TextColor = 'Default' | 'Dark' | 'Light' | 'Accent' | 'Good' | 'Warning' | 'Attention';
type FontType = 'Default' | 'Monospace';
type ImageStyle = 'Default' | 'Person' | 'RoundedCorners';
type Size = 'Auto' | 'Stretch' | 'Small' | 'Medium' | 'Large';
type InputTextStyle = 'Text' | 'Tel' | 'Url' | 'Email' | 'Password';
type RatingSize = 'Medium' | 'Large';
type RatingColor = 'Neutral' | 'Marigold';
type RatingStyle = 'Default' | 'Compact';
type IconSize = 'xxSmall' | 'xSmall' | 'Small' | 'Standard' | 'Medium' | 'Large' | 'xLarge' | 'xxLarge';
type IconStyle = 'Regular' | 'Filled';
type CarouselPageAnimation = 'Slide' | 'CrossFade' | 'None';
type BadgeIconPosition = 'Before' | 'After';
type BadgeAppearance = 'Filled' | 'Tint';
type BadgeSize = 'Medium' | 'Large' | 'ExtraLarge';
type BadgeShape = 'Square' | 'Rounded' | 'Circular';
type BadgeStyle = 'Default' | 'Subtle' | 'Informative' | 'Accent' | 'Good' | 'Attention' | 'Warning';
type ChartColorSet = 'categorical' | 'sequential' | 'diverging';
type ChartColor = 'good' | 'warning' | 'attention' | 'neutral' | 'categoricalRed' | 'categoricalPurple' | 'categoricalLavender' | 'categoricalBlue' | 'categoricalLightBlue' | 'categoricalTeal' | 'categoricalGreen' | 'categoricalLime' | 'categoricalMarigold' | 'sequential1' | 'sequential2' | 'sequential3' | 'sequential4' | 'sequential5' | 'sequential6' | 'sequential7' | 'sequential8' | 'divergingBlue' | 'divergingLightBlue' | 'divergingCyan' | 'divergingTeal' | 'divergingYellow' | 'divergingPeach' | 'divergingLightRed' | 'divergingRed' | 'divergingMaroon' | 'divergingGray';
type HorizontalBarChartDisplayMode = 'AbsoluteWithAxis' | 'AbsoluteNoAxis' | 'PartToWhole';
type GaugeChartValueFormat = 'Percentage' | 'Fraction';
type FallbackElement = IContainer | IActionSet | IColumnSet | IMedia | IRichTextBlock | ITable | ITextBlock | IFactSet | IImageSet | IImage | ITextInput | IDateInput | ITimeInput | INumberInput | IToggleInput | IChoiceSetInput | IRatingInput | IRating | ICompoundButton | IIcon | ICarousel | IBadge | IDonutChart | IPieChart | IGroupedVerticalBarChart | IVerticalBarChart | IHorizontalBarChart | IStackedHorizontalBarChart | ILineChart | IGaugeChart | ICodeBlock | IComUserMicrosoftGraphComponent | IComUsersMicrosoftGraphComponent | IComResourceMicrosoftGraphComponent | IComFileMicrosoftGraphComponent | IComEventMicrosoftGraphComponent | 'drop';
type CardElementArray = (IActionSet | IBadge | ICarousel | IDonutChart | IGaugeChart | IHorizontalBarChart | IStackedHorizontalBarChart | ILineChart | IPieChart | IVerticalBarChart | IGroupedVerticalBarChart | ICodeBlock | IColumnSet | IComEventMicrosoftGraphComponent | IComFileMicrosoftGraphComponent | IComResourceMicrosoftGraphComponent | IComUserMicrosoftGraphComponent | IComUsersMicrosoftGraphComponent | ICompoundButton | IContainer | IFactSet | IIcon | IImage | IImageSet | IChoiceSetInput | IDateInput | INumberInput | IRatingInput | ITextInput | ITimeInput | IToggleInput | IMedia | IRating | IRichTextBlock | ITable | ITextBlock)[];
type ImageSize = 'Small' | 'Medium' | 'Large';
type TableCellArray = ITableCell[];
type TableRowArray = ITableRow[];
type RichTextBlockInlineArray = (ITextRun | string)[];
type ColumnArray = IColumn[];
type ActionArray = (IExecuteAction | IOpenUrlAction | IResetInputsAction | IShowCardAction | ISubmitAction | IToggleVisibilityAction)[];
/**
 * An Adaptive Card, containing a free-form body of card elements, and an optional set of actions.
 */
interface IAdaptiveCard {
    /**
     * Must be **AdaptiveCard**.
     */
    readonly type: 'AdaptiveCard';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * A URL to the Adaptive Card schema the card is authored against.
     */
    $schema?: string;
    /**
     * The Adaptive Card schema version the card is authored against.
     */
    version?: '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6';
    /**
     * The text that should be displayed if the client is not able to render the card.
     */
    fallbackText?: string;
    /**
     * The text that should be spoken for the entire card.
     */
    speak?: string;
    /**
     * Defines how the card can be refreshed by making a request to the target Bot.
     */
    refresh?: IRefreshDefinition;
    /**
     * Defines authentication information to enable on-behalf-of single-sign-on or just-in-time OAuth. This information is used in conjunction with the refresh property and Action.Execute in general.
     */
    authentication?: IAuthentication;
    /**
     * Teams-specific metadata associated with the card.
     */
    msTeams?: ITeamsCardProperties;
    /**
     * Metadata associated with the card.
     */
    metadata?: ICardMetadata;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The body of the card, comprised of a list of elements displayed according to the layouts property. If the layouts property is not specified, a Layout.Stack is used.
     */
    body: CardElementArray;
    /**
     * The card level actions, which always appear at the bottom of the card.
     */
    actions?: ActionArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IAdaptiveCard.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of AdaptiveCard, false otherwise.
 */
declare function isAdaptiveCard(value: unknown): value is IAdaptiveCard;
type AdaptiveCardOptions = Omit<IAdaptiveCard, 'type' | 'body'>;
/**
 * An Adaptive Card, containing a free-form body of card elements, and an optional set of actions.
 */
declare class AdaptiveCard implements IAdaptiveCard {
    /**
     * Must be **AdaptiveCard**.
     */
    readonly type = "AdaptiveCard";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * A URL to the Adaptive Card schema the card is authored against.
     */
    $schema?: string;
    /**
     * The Adaptive Card schema version the card is authored against.
     */
    version?: '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6';
    /**
     * The text that should be displayed if the client is not able to render the card.
     */
    fallbackText?: string;
    /**
     * The text that should be spoken for the entire card.
     */
    speak?: string;
    /**
     * Defines how the card can be refreshed by making a request to the target Bot.
     */
    refresh?: IRefreshDefinition;
    /**
     * Defines authentication information to enable on-behalf-of single-sign-on or just-in-time OAuth. This information is used in conjunction with the refresh property and Action.Execute in general.
     */
    authentication?: IAuthentication;
    /**
     * Teams-specific metadata associated with the card.
     */
    msTeams?: ITeamsCardProperties;
    /**
     * Metadata associated with the card.
     */
    metadata?: ICardMetadata;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The body of the card, comprised of a list of elements displayed according to the layouts property. If the layouts property is not specified, a Layout.Stack is used.
     */
    body: CardElementArray;
    /**
     * The card level actions, which always appear at the bottom of the card.
     */
    actions?: ActionArray;
    constructor(...body: CardElementArray);
    withOptions(value: AdaptiveCardOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withIsSortKey(isSortKey?: boolean): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withStyle(style: ContainerStyle): this;
    withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this;
    withMinHeight(minHeight: string): this;
    withBackgroundImage(backgroundImage: string | IBackgroundImage): this;
    withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this;
    withRtl(rtl: boolean): this;
    with$schema($schema: string): this;
    withVersion(version: '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6'): this;
    withFallbackText(fallbackText: string): this;
    withSpeak(speak: string): this;
    withRefresh(refresh: IRefreshDefinition): this;
    withAuthentication(authentication: IAuthentication): this;
    withMsTeams(msTeams: ITeamsCardProperties): this;
    withMetadata(metadata: ICardMetadata): this;
    withFallback(fallback: FallbackElement): this;
    withBody(...body: CardElementArray): this;
    withActions(...actions: ActionArray): this;
}
/**
 * Represents a list of versioned capabilities a host application must support.
 */
interface IHostCapabilities {
}
/**
 * Represents a list of versioned capabilities a host application must support.
 */
declare class HostCapabilities implements IHostCapabilities {
}
/**
 * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can respond synchronously and return an updated Adaptive Card to be displayed by the client. Action.Execute works in all Adaptive Card hosts.
 */
interface IExecuteAction {
    /**
     * Must be **Action.Execute**.
     */
    readonly type: 'Action.Execute';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.
     */
    data?: any;
    /**
     * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    associatedInputs?: 'auto' | 'none';
    /**
     * Controls if the action is enabled only if at least one required input has been filled by the user.
     */
    conditionallyEnabled?: boolean;
    /**
     * The verb of the action.
     */
    verb?: string;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IExecuteAction.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ExecuteAction, false otherwise.
 */
declare function isExecuteAction(value: unknown): value is IExecuteAction;
type ExecuteActionOptions = Omit<IExecuteAction, 'type'>;
/**
 * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can respond synchronously and return an updated Adaptive Card to be displayed by the client. Action.Execute works in all Adaptive Card hosts.
 */
declare class ExecuteAction implements IExecuteAction {
    /**
     * Must be **Action.Execute**.
     */
    readonly type = "Action.Execute";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.
     */
    data?: any;
    /**
     * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    associatedInputs?: 'auto' | 'none';
    /**
     * Controls if the action is enabled only if at least one required input has been filled by the user.
     */
    conditionallyEnabled?: boolean;
    /**
     * The verb of the action.
     */
    verb?: string;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
    constructor(options?: ExecuteActionOptions);
    static from(options: Omit<IExecuteAction, 'type'>): ExecuteAction;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withTitle(title: string): this;
    withIconUrl(iconUrl: string): this;
    withStyle(style: ActionStyle): this;
    withMode(mode: ActionMode): this;
    withTooltip(tooltip: string): this;
    withIsEnabled(isEnabled?: boolean): this;
    withData(data: any): this;
    withAssociatedInputs(associatedInputs: 'auto' | 'none'): this;
    withConditionallyEnabled(conditionallyEnabled?: boolean): this;
    withVerb(verb: string): this;
    withFallback(fallback: FallbackAction): this;
}
/**
 * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can only acknowledge is has received the request. Action.Submit only works in Teams.
 */
interface ISubmitAction {
    /**
     * Must be **Action.Submit**.
     */
    readonly type: 'Action.Submit';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.
     */
    data?: any;
    /**
     * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    associatedInputs?: 'auto' | 'none';
    /**
     * Controls if the action is enabled only if at least one required input has been filled by the user.
     */
    conditionallyEnabled?: boolean;
    /**
     * Teams-specific metadata associated with the action.
     */
    msTeams?: ITeamsSubmitActionProperties;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ISubmitAction.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of SubmitAction, false otherwise.
 */
declare function isSubmitAction(value: unknown): value is ISubmitAction;
type SubmitActionOptions = Omit<ISubmitAction, 'type'>;
/**
 * Gathers input values, merges them with the data property if specified, and sends them to the Bot via an Invoke activity. The Bot can only acknowledge is has received the request. Action.Submit only works in Teams.
 */
declare class SubmitAction implements ISubmitAction {
    /**
     * Must be **Action.Submit**.
     */
    readonly type = "Action.Submit";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The data to send to the Bot when the action is executed. The data specified in the card payload will be sent back to the Bot as is, alongside the values of the inputs expressed as key/value pairs where the key is the Id of the input.
     */
    data?: any;
    /**
     * The Ids of the inputs associated with the Action.Submit. When the action is executed, the values of the associated inputs are sent to the Bot. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    associatedInputs?: 'auto' | 'none';
    /**
     * Controls if the action is enabled only if at least one required input has been filled by the user.
     */
    conditionallyEnabled?: boolean;
    /**
     * Teams-specific metadata associated with the action.
     */
    msTeams?: ITeamsSubmitActionProperties;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
    constructor(options?: SubmitActionOptions);
    static from(options: Omit<ISubmitAction, 'type'>): SubmitAction;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withTitle(title: string): this;
    withIconUrl(iconUrl: string): this;
    withStyle(style: ActionStyle): this;
    withMode(mode: ActionMode): this;
    withTooltip(tooltip: string): this;
    withIsEnabled(isEnabled?: boolean): this;
    withData(data: any): this;
    withAssociatedInputs(associatedInputs: 'auto' | 'none'): this;
    withConditionallyEnabled(conditionallyEnabled?: boolean): this;
    withMsTeams(msTeams: ITeamsSubmitActionProperties): this;
    withFallback(fallback: FallbackAction): this;
}
/**
 * Teams-specific properties associated with the action.
 */
interface ITeamsSubmitActionProperties {
    /**
     * Defines how feedback is provided to the end-user when the action is executed.
     */
    feedback?: ITeamsSubmitActionFeedback;
}
type TeamsSubmitActionPropertiesOptions = ITeamsSubmitActionProperties;
/**
 * Teams-specific properties associated with the action.
 */
declare class TeamsSubmitActionProperties implements ITeamsSubmitActionProperties {
    /**
     * Defines how feedback is provided to the end-user when the action is executed.
     */
    feedback?: ITeamsSubmitActionFeedback;
    constructor(options?: TeamsSubmitActionPropertiesOptions);
    static from(options: ITeamsSubmitActionProperties): TeamsSubmitActionProperties;
    withFeedback(feedback: ITeamsSubmitActionFeedback): this;
}
/**
 * Represents feedback options for an [Action.Submit](https://adaptivecards.microsoft.com/?topic=Action.Submit).
 */
interface ITeamsSubmitActionFeedback {
    /**
     * Defines if a feedback message should be displayed after the action is executed.
     */
    hide?: boolean;
}
type TeamsSubmitActionFeedbackOptions = ITeamsSubmitActionFeedback;
/**
 * Represents feedback options for an [Action.Submit](https://adaptivecards.microsoft.com/?topic=Action.Submit).
 */
declare class TeamsSubmitActionFeedback implements ITeamsSubmitActionFeedback {
    /**
     * Defines if a feedback message should be displayed after the action is executed.
     */
    hide?: boolean;
    constructor(options?: TeamsSubmitActionFeedbackOptions);
    static from(options: ITeamsSubmitActionFeedback): TeamsSubmitActionFeedback;
    withHide(hide: boolean): this;
}
/**
 * Opens the provided URL in either a separate browser tab or within the host application.
 */
interface IOpenUrlAction {
    /**
     * Must be **Action.OpenUrl**.
     */
    readonly type: 'Action.OpenUrl';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The URL to open.
     */
    url: string;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IOpenUrlAction.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of OpenUrlAction, false otherwise.
 */
declare function isOpenUrlAction(value: unknown): value is IOpenUrlAction;
type OpenUrlActionOptions = Omit<IOpenUrlAction, 'type' | 'url'>;
/**
 * Opens the provided URL in either a separate browser tab or within the host application.
 */
declare class OpenUrlAction implements IOpenUrlAction {
    /**
     * Must be **Action.OpenUrl**.
     */
    readonly type = "Action.OpenUrl";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The URL to open.
     */
    url: string;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
    constructor(url: string, options?: OpenUrlActionOptions);
    static from(options: Omit<IOpenUrlAction, 'type'>): OpenUrlAction;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withTitle(title: string): this;
    withIconUrl(iconUrl: string): this;
    withStyle(style: ActionStyle): this;
    withMode(mode: ActionMode): this;
    withTooltip(tooltip: string): this;
    withIsEnabled(isEnabled?: boolean): this;
    withUrl(url: string): this;
    withFallback(fallback: FallbackAction): this;
}
/**
 * Toggles the visibility of a set of elements. Action.ToggleVisibility is useful for creating "Show more" type UI patterns.
 */
interface IToggleVisibilityAction {
    /**
     * Must be **Action.ToggleVisibility**.
     */
    readonly type: 'Action.ToggleVisibility';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The Ids of the elements to toggle the visibility of.
     */
    targetElements?: (string | ITargetElement)[];
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IToggleVisibilityAction.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ToggleVisibilityAction, false otherwise.
 */
declare function isToggleVisibilityAction(value: unknown): value is IToggleVisibilityAction;
type ToggleVisibilityActionOptions = Omit<IToggleVisibilityAction, 'type'>;
/**
 * Toggles the visibility of a set of elements. Action.ToggleVisibility is useful for creating "Show more" type UI patterns.
 */
declare class ToggleVisibilityAction implements IToggleVisibilityAction {
    /**
     * Must be **Action.ToggleVisibility**.
     */
    readonly type = "Action.ToggleVisibility";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The Ids of the elements to toggle the visibility of.
     */
    targetElements?: (string | ITargetElement)[];
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
    constructor(options?: ToggleVisibilityActionOptions);
    static from(options: Omit<IToggleVisibilityAction, 'type'>): ToggleVisibilityAction;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withTitle(title: string): this;
    withIconUrl(iconUrl: string): this;
    withStyle(style: ActionStyle): this;
    withMode(mode: ActionMode): this;
    withTooltip(tooltip: string): this;
    withIsEnabled(isEnabled?: boolean): this;
    withTargetElements(...targetElements: (string | ITargetElement)[]): this;
    withFallback(fallback: FallbackAction): this;
}
/**
 * Defines a target element in an Action.ToggleVisibility.
 */
interface ITargetElement {
    /**
     * The Id of the element to change the visibility of.
     */
    elementId?: string;
    /**
     * The new visibility state of the element.
     */
    isVisible?: boolean;
}
type TargetElementOptions = ITargetElement;
/**
 * Defines a target element in an Action.ToggleVisibility.
 */
declare class TargetElement implements ITargetElement {
    /**
     * The Id of the element to change the visibility of.
     */
    elementId?: string;
    /**
     * The new visibility state of the element.
     */
    isVisible?: boolean;
    constructor(options?: TargetElementOptions);
    static from(options: ITargetElement): TargetElement;
    withElementId(elementId: string): this;
    withIsVisible(isVisible: boolean): this;
}
/**
 * Expands or collapses an embedded card within the main card.
 */
interface IShowCardAction {
    /**
     * Must be **Action.ShowCard**.
     */
    readonly type: 'Action.ShowCard';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
    /**
     * The card that should be displayed when the action is executed.
     */
    card?: IAdaptiveCard;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IShowCardAction.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ShowCardAction, false otherwise.
 */
declare function isShowCardAction(value: unknown): value is IShowCardAction;
type ShowCardActionOptions = Omit<IShowCardAction, 'type'>;
/**
 * Expands or collapses an embedded card within the main card.
 */
declare class ShowCardAction implements IShowCardAction {
    /**
     * Must be **Action.ShowCard**.
     */
    readonly type = "Action.ShowCard";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
    /**
     * The card that should be displayed when the action is executed.
     */
    card?: IAdaptiveCard;
    constructor(options?: ShowCardActionOptions);
    static from(options: Omit<IShowCardAction, 'type'>): ShowCardAction;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withTitle(title: string): this;
    withIconUrl(iconUrl: string): this;
    withStyle(style: ActionStyle): this;
    withMode(mode: ActionMode): this;
    withTooltip(tooltip: string): this;
    withIsEnabled(isEnabled?: boolean): this;
    withFallback(fallback: FallbackAction): this;
    withCard(card: IAdaptiveCard): this;
}
/**
 * Resets the values of the inputs in the card.
 */
interface IResetInputsAction {
    /**
     * Must be **Action.ResetInputs**.
     */
    readonly type: 'Action.ResetInputs';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The Ids of the inputs that should be reset.
     */
    targetInputIds?: string[];
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IResetInputsAction.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ResetInputsAction, false otherwise.
 */
declare function isResetInputsAction(value: unknown): value is IResetInputsAction;
type ResetInputsActionOptions = Omit<IResetInputsAction, 'type'>;
/**
 * Resets the values of the inputs in the card.
 */
declare class ResetInputsAction implements IResetInputsAction {
    /**
     * Must be **Action.ResetInputs**.
     */
    readonly type = "Action.ResetInputs";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The title of the action, as it appears on buttons.
     */
    title?: string;
    /**
     * A URL (or Base64-encoded Data URI) to a PNG, GIF, JPEG or SVG image to be displayed on the left of the action's title.
  
  `iconUrl` also accepts the `<icon-name>[,regular|filled]` format to display an icon from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) instead of an image.
     */
    iconUrl?: string;
    /**
     * Control the style of the action, affecting its visual and spoken representations.
     */
    style?: ActionStyle;
    /**
     * Controls if the action is primary or secondary. Secondary actions appear in an overflow menu.
     */
    mode?: ActionMode;
    /**
     * The tooltip text to display when the action is hovered over.
     */
    tooltip?: string;
    /**
     * Controls the enabled state of the action. A disabled action cannot be clicked. If the action is represented as a button, the button's style will reflect this state.
     */
    isEnabled?: boolean;
    /**
     * The Ids of the inputs that should be reset.
     */
    targetInputIds?: string[];
    /**
     * An alternate action to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackAction;
    constructor(options?: ResetInputsActionOptions);
    static from(options: Omit<IResetInputsAction, 'type'>): ResetInputsAction;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withTitle(title: string): this;
    withIconUrl(iconUrl: string): this;
    withStyle(style: ActionStyle): this;
    withMode(mode: ActionMode): this;
    withTooltip(tooltip: string): this;
    withIsEnabled(isEnabled?: boolean): this;
    withTargetInputIds(...targetInputIds: string[]): this;
    withFallback(fallback: FallbackAction): this;
}
/**
 * A layout that stacks elements on top of each other. Layout.Stack is the default layout used by AdaptiveCard and all containers.
 */
interface IStackLayout {
    /**
     * Must be **Layout.Stack**.
     */
    readonly type: 'Layout.Stack';
    /**
     * Controls for which card width the layout should be used.
     */
    targetWidth?: TargetWidth;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IStackLayout.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of StackLayout, false otherwise.
 */
declare function isStackLayout(value: unknown): value is IStackLayout;
type StackLayoutOptions = Omit<IStackLayout, 'type'>;
/**
 * A layout that stacks elements on top of each other. Layout.Stack is the default layout used by AdaptiveCard and all containers.
 */
declare class StackLayout implements IStackLayout {
    /**
     * Must be **Layout.Stack**.
     */
    readonly type = "Layout.Stack";
    /**
     * Controls for which card width the layout should be used.
     */
    targetWidth?: TargetWidth;
    constructor(options?: StackLayoutOptions);
    static from(options: Omit<IStackLayout, 'type'>): StackLayout;
    withTargetWidth(targetWidth: TargetWidth): this;
}
/**
 * A layout that spreads elements horizontally and wraps them across multiple rows, as needed.
 */
interface IFlowLayout {
    /**
     * Must be **Layout.Flow**.
     */
    readonly type: 'Layout.Flow';
    /**
     * Controls for which card width the layout should be used.
     */
    targetWidth?: TargetWidth;
    /**
     * Controls how the content of the container should be horizontally aligned.
     */
    horizontalItemsAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of the container should be vertically aligned.
     */
    verticalItemsAlignment?: VerticalAlignment;
    /**
     * Controls how item should fit inside the container.
     */
    itemFit?: FlowLayoutItemFit;
    /**
     * The minimum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.
     */
    minItemWidth?: string;
    /**
     * The maximum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.
     */
    maxItemWidth?: string;
    /**
     * The width, in pixels, of each item, in the `<number>px` format. Should not be used if maxItemWidth and/or minItemWidth are set.
     */
    itemWidth?: string;
    /**
     * The space between items.
     */
    columnSpacing?: Spacing;
    /**
     * The space between rows of items.
     */
    rowSpacing?: Spacing;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IFlowLayout.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of FlowLayout, false otherwise.
 */
declare function isFlowLayout(value: unknown): value is IFlowLayout;
type FlowLayoutOptions = Omit<IFlowLayout, 'type'>;
/**
 * A layout that spreads elements horizontally and wraps them across multiple rows, as needed.
 */
declare class FlowLayout implements IFlowLayout {
    /**
     * Must be **Layout.Flow**.
     */
    readonly type = "Layout.Flow";
    /**
     * Controls for which card width the layout should be used.
     */
    targetWidth?: TargetWidth;
    /**
     * Controls how the content of the container should be horizontally aligned.
     */
    horizontalItemsAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of the container should be vertically aligned.
     */
    verticalItemsAlignment?: VerticalAlignment;
    /**
     * Controls how item should fit inside the container.
     */
    itemFit?: FlowLayoutItemFit;
    /**
     * The minimum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.
     */
    minItemWidth?: string;
    /**
     * The maximum width, in pixels, of each item, in the `<number>px` format. Should not be used if itemWidth is set.
     */
    maxItemWidth?: string;
    /**
     * The width, in pixels, of each item, in the `<number>px` format. Should not be used if maxItemWidth and/or minItemWidth are set.
     */
    itemWidth?: string;
    /**
     * The space between items.
     */
    columnSpacing?: Spacing;
    /**
     * The space between rows of items.
     */
    rowSpacing?: Spacing;
    constructor(options?: FlowLayoutOptions);
    static from(options: Omit<IFlowLayout, 'type'>): FlowLayout;
    withTargetWidth(targetWidth: TargetWidth): this;
    withHorizontalItemsAlignment(horizontalItemsAlignment: HorizontalAlignment): this;
    withVerticalItemsAlignment(verticalItemsAlignment: VerticalAlignment): this;
    withItemFit(itemFit: FlowLayoutItemFit): this;
    withMinItemWidth(minItemWidth: string): this;
    withMaxItemWidth(maxItemWidth: string): this;
    withItemWidth(itemWidth: string): this;
    withColumnSpacing(columnSpacing: Spacing): this;
    withRowSpacing(rowSpacing: Spacing): this;
}
/**
 * A layout that divides a container into named areas into which elements can be placed.
 */
interface IAreaGridLayout {
    /**
     * Must be **Layout.AreaGrid**.
     */
    readonly type: 'Layout.AreaGrid';
    /**
     * Controls for which card width the layout should be used.
     */
    targetWidth?: TargetWidth;
    /**
     * The columns in the grid layout, defined as a percentage of the available width or in pixels using the `<number>px` format.
     */
    columns?: (number | string)[];
    /**
     * The areas in the grid layout.
     */
    areas?: IGridArea[];
    /**
     * The space between columns.
     */
    columnSpacing?: Spacing;
    /**
     * The space between rows.
     */
    rowSpacing?: Spacing;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IAreaGridLayout.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of AreaGridLayout, false otherwise.
 */
declare function isAreaGridLayout(value: unknown): value is IAreaGridLayout;
type AreaGridLayoutOptions = Omit<IAreaGridLayout, 'type'>;
/**
 * A layout that divides a container into named areas into which elements can be placed.
 */
declare class AreaGridLayout implements IAreaGridLayout {
    /**
     * Must be **Layout.AreaGrid**.
     */
    readonly type = "Layout.AreaGrid";
    /**
     * Controls for which card width the layout should be used.
     */
    targetWidth?: TargetWidth;
    /**
     * The columns in the grid layout, defined as a percentage of the available width or in pixels using the `<number>px` format.
     */
    columns?: (number | string)[];
    /**
     * The areas in the grid layout.
     */
    areas?: IGridArea[];
    /**
     * The space between columns.
     */
    columnSpacing?: Spacing;
    /**
     * The space between rows.
     */
    rowSpacing?: Spacing;
    constructor(options?: AreaGridLayoutOptions);
    static from(options: Omit<IAreaGridLayout, 'type'>): AreaGridLayout;
    withTargetWidth(targetWidth: TargetWidth): this;
    withColumns(...columns: (number | string)[]): this;
    withAreas(...areas: IGridArea[]): this;
    withColumnSpacing(columnSpacing: Spacing): this;
    withRowSpacing(rowSpacing: Spacing): this;
}
/**
 * Defines an area in a Layout.AreaGrid layout.
 */
interface IGridArea {
    /**
     * The name of the area. To place an element in this area, set its `grid.area` property to match the name of the area.
     */
    name?: string;
    /**
     * The start column index of the area. Column indices start at 1.
     */
    column?: number;
    /**
     * Defines how many columns the area should span.
     */
    columnSpan?: number;
    /**
     * The start row index of the area. Row indices start at 1.
     */
    row?: number;
    /**
     * Defines how many rows the area should span.
     */
    rowSpan?: number;
}
type GridAreaOptions = IGridArea;
/**
 * Defines an area in a Layout.AreaGrid layout.
 */
declare class GridArea implements IGridArea {
    /**
     * The name of the area. To place an element in this area, set its `grid.area` property to match the name of the area.
     */
    name?: string;
    /**
     * The start column index of the area. Column indices start at 1.
     */
    column?: number;
    /**
     * Defines how many columns the area should span.
     */
    columnSpan?: number;
    /**
     * The start row index of the area. Row indices start at 1.
     */
    row?: number;
    /**
     * Defines how many rows the area should span.
     */
    rowSpan?: number;
    constructor(options?: GridAreaOptions);
    static from(options: IGridArea): GridArea;
    withName(name: string): this;
    withColumn(column: number): this;
    withColumnSpan(columnSpan: number): this;
    withRow(row: number): this;
    withRowSpan(rowSpan: number): this;
}
/**
 * Defines a container's background image and the way it should be rendered.
 */
interface IBackgroundImage {
    /**
     * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.
     */
    url?: string;
    /**
     * Controls how the image should fill the area.
     */
    fillMode?: FillMode;
    /**
     * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.
     */
    verticalAlignment?: VerticalAlignment;
}
type BackgroundImageOptions = IBackgroundImage;
/**
 * Defines a container's background image and the way it should be rendered.
 */
declare class BackgroundImage implements IBackgroundImage {
    /**
     * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.
     */
    url?: string;
    /**
     * Controls how the image should fill the area.
     */
    fillMode?: FillMode;
    /**
     * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls how the image should be aligned if it must be cropped or if using repeat fill mode.
     */
    verticalAlignment?: VerticalAlignment;
    constructor(options?: BackgroundImageOptions);
    static from(options: IBackgroundImage): BackgroundImage;
    withUrl(url: string): this;
    withFillMode(fillMode: FillMode): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withVerticalAlignment(verticalAlignment: VerticalAlignment): this;
}
/**
 * Defines how a card can be refreshed by making a request to the target Bot.
 */
interface IRefreshDefinition {
    /**
     * The Action.Execute action to invoke to refresh the card.
     */
    action?: IExecuteAction;
    /**
     * The list of user Ids for which the card will be automatically refreshed. In Teams, in chats or channels with more than 60 users, the card will automatically refresh only for users specified in the userIds list. Other users will have to manually click on a "refresh" button. In contexts with fewer than 60 users, the card will automatically refresh for all users.
     */
    userIds?: string[];
}
type RefreshDefinitionOptions = IRefreshDefinition;
/**
 * Defines how a card can be refreshed by making a request to the target Bot.
 */
declare class RefreshDefinition implements IRefreshDefinition {
    /**
     * The Action.Execute action to invoke to refresh the card.
     */
    action?: IExecuteAction;
    /**
     * The list of user Ids for which the card will be automatically refreshed. In Teams, in chats or channels with more than 60 users, the card will automatically refresh only for users specified in the userIds list. Other users will have to manually click on a "refresh" button. In contexts with fewer than 60 users, the card will automatically refresh for all users.
     */
    userIds?: string[];
    constructor(options?: RefreshDefinitionOptions);
    static from(options: IRefreshDefinition): RefreshDefinition;
    withAction(action: IExecuteAction): this;
    withUserIds(...userIds: string[]): this;
}
/**
 * Defines authentication information associated with a card. For more information, refer to the [Bot Framework OAuthCard type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.oauthcard)
 */
interface IAuthentication {
    /**
     * The text that can be displayed to the end user when prompting them to authenticate.
     */
    text?: string;
    /**
     * The identifier for registered OAuth connection setting information.
     */
    connectionName?: string;
    /**
     * The buttons that should be displayed to the user when prompting for authentication. The array MUST contain one button of type “signin”. Other button types are not currently supported.
     */
    buttons?: IAuthCardButton[];
    /**
     * Provides information required to enable on-behalf-of single sign-on user authentication.
     */
    tokenExchangeResource?: ITokenExchangeResource;
}
type AuthenticationOptions = IAuthentication;
/**
 * Defines authentication information associated with a card. For more information, refer to the [Bot Framework OAuthCard type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.oauthcard)
 */
declare class Authentication implements IAuthentication {
    /**
     * The text that can be displayed to the end user when prompting them to authenticate.
     */
    text?: string;
    /**
     * The identifier for registered OAuth connection setting information.
     */
    connectionName?: string;
    /**
     * The buttons that should be displayed to the user when prompting for authentication. The array MUST contain one button of type “signin”. Other button types are not currently supported.
     */
    buttons?: IAuthCardButton[];
    /**
     * Provides information required to enable on-behalf-of single sign-on user authentication.
     */
    tokenExchangeResource?: ITokenExchangeResource;
    constructor(options?: AuthenticationOptions);
    static from(options: IAuthentication): Authentication;
    withText(text: string): this;
    withConnectionName(connectionName: string): this;
    withButtons(...buttons: IAuthCardButton[]): this;
    withTokenExchangeResource(tokenExchangeResource: ITokenExchangeResource): this;
}
/**
 * Defines a button as displayed when prompting a user to authenticate. For more information, refer to the [Bot Framework CardAction type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.cardaction).
 */
interface IAuthCardButton {
    /**
     * Must be **signin**.
     */
    type?: string;
    /**
     * The caption of the button.
     */
    title?: string;
    /**
     * A URL to an image to display alongside the button’s caption.
     */
    image?: string;
    /**
     * The value associated with the button. The meaning of value depends on the button’s type.
     */
    value?: string;
}
type AuthCardButtonOptions = IAuthCardButton;
/**
 * Defines a button as displayed when prompting a user to authenticate. For more information, refer to the [Bot Framework CardAction type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.cardaction).
 */
declare class AuthCardButton implements IAuthCardButton {
    /**
     * Must be **signin**.
     */
    type?: string;
    /**
     * The caption of the button.
     */
    title?: string;
    /**
     * A URL to an image to display alongside the button’s caption.
     */
    image?: string;
    /**
     * The value associated with the button. The meaning of value depends on the button’s type.
     */
    value?: string;
    constructor(options?: AuthCardButtonOptions);
    static from(options: IAuthCardButton): AuthCardButton;
    withType(type: string): this;
    withTitle(title: string): this;
    withImage(image: string): this;
    withValue(value: string): this;
}
/**
 * Defines information required to enable on-behalf-of single sign-on user authentication. For more information, refer to the [Bot Framework TokenExchangeResource type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.tokenexchangeresource)
 */
interface ITokenExchangeResource {
    /**
     * The unique identified of this token exchange instance.
     */
    id?: string;
    /**
     * An application ID or resource identifier with which to exchange a token on behalf of. This property is identity provider- and application-specific.
     */
    uri?: string;
    /**
     * An identifier for the identity provider with which to attempt a token exchange.
     */
    providerId?: string;
}
type TokenExchangeResourceOptions = ITokenExchangeResource;
/**
 * Defines information required to enable on-behalf-of single sign-on user authentication. For more information, refer to the [Bot Framework TokenExchangeResource type](https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.tokenexchangeresource)
 */
declare class TokenExchangeResource implements ITokenExchangeResource {
    /**
     * The unique identified of this token exchange instance.
     */
    id?: string;
    /**
     * An application ID or resource identifier with which to exchange a token on behalf of. This property is identity provider- and application-specific.
     */
    uri?: string;
    /**
     * An identifier for the identity provider with which to attempt a token exchange.
     */
    providerId?: string;
    constructor(options?: TokenExchangeResourceOptions);
    static from(options: ITokenExchangeResource): TokenExchangeResource;
    withId(id: string): this;
    withUri(uri: string): this;
    withProviderId(providerId: string): this;
}
/**
 * Represents a set of Teams-specific properties on a card.
 */
interface ITeamsCardProperties {
    /**
     * Controls the width of the card in a Teams chat.
  
  Note that setting `width` to "full" will not actually stretch the card to the "full width" of the chat pane. It will only make the card wider than when the `width` property isn't set.
     */
    width?: 'full';
    /**
     * The Teams-specific entities associated with the card.
     */
    entities?: IMention[];
}
type TeamsCardPropertiesOptions = ITeamsCardProperties;
/**
 * Represents a set of Teams-specific properties on a card.
 */
declare class TeamsCardProperties implements ITeamsCardProperties {
    /**
     * Controls the width of the card in a Teams chat.
  
  Note that setting `width` to "full" will not actually stretch the card to the "full width" of the chat pane. It will only make the card wider than when the `width` property isn't set.
     */
    width?: 'full';
    /**
     * The Teams-specific entities associated with the card.
     */
    entities?: IMention[];
    constructor(options?: TeamsCardPropertiesOptions);
    static from(options: ITeamsCardProperties): TeamsCardProperties;
    withWidth(width: 'full'): this;
    withEntities(...entities: IMention[]): this;
}
/**
 * Represents a mention to a person.
 */
interface IMention {
    /**
     * Must be **mention**.
     */
    readonly type: 'mention';
    /**
     * The text that will be substituted with the mention.
     */
    text?: string;
    /**
     * Defines the entity being mentioned.
     */
    mentioned?: IMentionedEntity;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IMention.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Mention, false otherwise.
 */
declare function isMention(value: unknown): value is IMention;
type MentionOptions = Omit<IMention, 'type'>;
/**
 * Represents a mention to a person.
 */
declare class Mention implements IMention {
    /**
     * Must be **mention**.
     */
    readonly type = "mention";
    /**
     * The text that will be substituted with the mention.
     */
    text?: string;
    /**
     * Defines the entity being mentioned.
     */
    mentioned?: IMentionedEntity;
    constructor(options?: MentionOptions);
    static from(options: Omit<IMention, 'type'>): Mention;
    withText(text: string): this;
    withMentioned(mentioned: IMentionedEntity): this;
}
/**
 * Represents a mentioned person or tag.
 */
interface IMentionedEntity {
    /**
     * The Id of a person (typically a Microsoft Entra user Id) or tag.
     */
    id?: string;
    /**
     * The name of the mentioned entity.
     */
    name?: string;
    /**
     * The type of the mentioned entity.
     */
    mentionType?: MentionType;
}
type MentionedEntityOptions = IMentionedEntity;
/**
 * Represents a mentioned person or tag.
 */
declare class MentionedEntity implements IMentionedEntity {
    /**
     * The Id of a person (typically a Microsoft Entra user Id) or tag.
     */
    id?: string;
    /**
     * The name of the mentioned entity.
     */
    name?: string;
    /**
     * The type of the mentioned entity.
     */
    mentionType?: MentionType;
    constructor(options?: MentionedEntityOptions);
    static from(options: IMentionedEntity): MentionedEntity;
    withId(id: string): this;
    withName(name: string): this;
    withMentionType(mentionType: MentionType): this;
}
/**
 * Card-level metadata.
 */
interface ICardMetadata {
    /**
     * The URL the card originates from. When `webUrl` is set, the card is dubbed an **Adaptive Card-based Loop Component** and, when pasted in Teams or other Loop Component-capable host applications, the URL will unfurl to the same exact card.
     */
    webUrl?: string;
}
type CardMetadataOptions = ICardMetadata;
/**
 * Card-level metadata.
 */
declare class CardMetadata implements ICardMetadata {
    /**
     * The URL the card originates from. When `webUrl` is set, the card is dubbed an **Adaptive Card-based Loop Component** and, when pasted in Teams or other Loop Component-capable host applications, the URL will unfurl to the same exact card.
     */
    webUrl?: string;
    constructor(options?: CardMetadataOptions);
    static from(options: ICardMetadata): CardMetadata;
    withWebUrl(webUrl: string): this;
}
/**
 * A container for other elements. Use containers for styling purposes and/or to logically group a set of elements together, which can be especially useful when used with Action.ToggleVisibility.
 */
interface IContainer {
    /**
     * Must be **Container**.
     */
    readonly type: 'Container';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The elements in the container.
     */
    items: CardElementArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IContainer.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Container, false otherwise.
 */
declare function isContainer(value: unknown): value is IContainer;
type ContainerOptions = Omit<IContainer, 'type' | 'items'>;
/**
 * A container for other elements. Use containers for styling purposes and/or to logically group a set of elements together, which can be especially useful when used with Action.ToggleVisibility.
 */
declare class Container implements IContainer {
    /**
     * Must be **Container**.
     */
    readonly type = "Container";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The elements in the container.
     */
    items: CardElementArray;
    constructor(...items: CardElementArray);
    withOptions(value: ContainerOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withStyle(style: ContainerStyle): this;
    withShowBorder(showBorder?: boolean): this;
    withRoundedCorners(roundedCorners?: boolean): this;
    withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this;
    withBleed(bleed?: boolean): this;
    withMinHeight(minHeight: string): this;
    withBackgroundImage(backgroundImage: string | IBackgroundImage): this;
    withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this;
    withRtl(rtl: boolean): this;
    withMaxHeight(maxHeight: string): this;
    withFallback(fallback: FallbackElement): this;
    withItems(...items: CardElementArray): this;
}
/**
 * Displays a set of action, which can be placed anywhere in the card.
 */
interface IActionSet {
    /**
     * Must be **ActionSet**.
     */
    readonly type: 'ActionSet';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The actions in the set.
     */
    actions: ActionArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IActionSet.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ActionSet, false otherwise.
 */
declare function isActionSet(value: unknown): value is IActionSet;
type ActionSetOptions = Omit<IActionSet, 'type' | 'actions'>;
/**
 * Displays a set of action, which can be placed anywhere in the card.
 */
declare class ActionSet implements IActionSet {
    /**
     * Must be **ActionSet**.
     */
    readonly type = "ActionSet";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The actions in the set.
     */
    actions: ActionArray;
    constructor(...actions: ActionArray);
    withOptions(value: ActionSetOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withFallback(fallback: FallbackElement): this;
    withActions(...actions: ActionArray): this;
}
/**
 * Splits the available horizontal space into separate columns, so elements can be organized in a row.
 */
interface IColumnSet {
    /**
     * Must be **ColumnSet**.
     */
    readonly type: 'ColumnSet';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The columns in the set.
     */
    columns?: ColumnArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IColumnSet.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ColumnSet, false otherwise.
 */
declare function isColumnSet(value: unknown): value is IColumnSet;
type ColumnSetOptions = Omit<IColumnSet, 'type'>;
/**
 * Splits the available horizontal space into separate columns, so elements can be organized in a row.
 */
declare class ColumnSet implements IColumnSet {
    /**
     * Must be **ColumnSet**.
     */
    readonly type = "ColumnSet";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The columns in the set.
     */
    columns?: ColumnArray;
    constructor(options?: ColumnSetOptions);
    static from(options: Omit<IColumnSet, 'type'>): ColumnSet;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withStyle(style: ContainerStyle): this;
    withShowBorder(showBorder?: boolean): this;
    withRoundedCorners(roundedCorners?: boolean): this;
    withBleed(bleed?: boolean): this;
    withMinHeight(minHeight: string): this;
    withFallback(fallback: FallbackElement): this;
    withColumns(...columns: ColumnArray): this;
}
/**
 * A media element, that makes it possible to embed videos inside a card.
 */
interface IMedia {
    /**
     * Must be **Media**.
     */
    readonly type: 'Media';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The sources for the media. For YouTube, Dailymotion and Vimeo, only one source can be specified.
     */
    sources?: IMediaSource[];
    /**
     * The caption sources for the media. Caption sources are not used for YouTube, Dailymotion or Vimeo sources.
     */
    captionSources?: ICaptionSource[];
    /**
     * The URL of the poster image to display.
     */
    poster?: string;
    /**
     * The alternate text for the media, used for accessibility purposes.
     */
    altText?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IMedia.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Media, false otherwise.
 */
declare function isMedia(value: unknown): value is IMedia;
type MediaOptions = Omit<IMedia, 'type'>;
/**
 * A media element, that makes it possible to embed videos inside a card.
 */
declare class Media implements IMedia {
    /**
     * Must be **Media**.
     */
    readonly type = "Media";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The sources for the media. For YouTube, Dailymotion and Vimeo, only one source can be specified.
     */
    sources?: IMediaSource[];
    /**
     * The caption sources for the media. Caption sources are not used for YouTube, Dailymotion or Vimeo sources.
     */
    captionSources?: ICaptionSource[];
    /**
     * The URL of the poster image to display.
     */
    poster?: string;
    /**
     * The alternate text for the media, used for accessibility purposes.
     */
    altText?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: MediaOptions);
    static from(options: Omit<IMedia, 'type'>): Media;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withSources(...sources: IMediaSource[]): this;
    withCaptionSources(...captionSources: ICaptionSource[]): this;
    withPoster(poster: string): this;
    withAltText(altText: string): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Defines the source URL of a media stream. YouTube, Dailymotion, Vimeo and Microsoft Stream URLs are supported.
 */
interface IMediaSource {
    /**
     * The MIME type of the source.
     */
    mimeType?: string;
    /**
     * The URL of the source.
     */
    url?: string;
}
type MediaSourceOptions = IMediaSource;
/**
 * Defines the source URL of a media stream. YouTube, Dailymotion, Vimeo and Microsoft Stream URLs are supported.
 */
declare class MediaSource implements IMediaSource {
    /**
     * The MIME type of the source.
     */
    mimeType?: string;
    /**
     * The URL of the source.
     */
    url?: string;
    constructor(options?: MediaSourceOptions);
    static from(options: IMediaSource): MediaSource;
    withMimeType(mimeType: string): this;
    withUrl(url: string): this;
}
/**
 * Defines a source URL for a video captions.
 */
interface ICaptionSource {
    /**
     * The MIME type of the source.
     */
    mimeType?: string;
    /**
     * The URL of the source.
     */
    url?: string;
    /**
     * The label of this caption source.
     */
    label?: string;
}
type CaptionSourceOptions = ICaptionSource;
/**
 * Defines a source URL for a video captions.
 */
declare class CaptionSource implements ICaptionSource {
    /**
     * The MIME type of the source.
     */
    mimeType?: string;
    /**
     * The URL of the source.
     */
    url?: string;
    /**
     * The label of this caption source.
     */
    label?: string;
    constructor(options?: CaptionSourceOptions);
    static from(options: ICaptionSource): CaptionSource;
    withMimeType(mimeType: string): this;
    withUrl(url: string): this;
    withLabel(label: string): this;
}
/**
 * A rich text block that displays formatted text.
 */
interface IRichTextBlock {
    /**
     * Must be **RichTextBlock**.
     */
    readonly type: 'RichTextBlock';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The inlines making up the rich text block.
     */
    inlines?: RichTextBlockInlineArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IRichTextBlock.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of RichTextBlock, false otherwise.
 */
declare function isRichTextBlock(value: unknown): value is IRichTextBlock;
type RichTextBlockOptions = Omit<IRichTextBlock, 'type'>;
/**
 * A rich text block that displays formatted text.
 */
declare class RichTextBlock implements IRichTextBlock {
    /**
     * Must be **RichTextBlock**.
     */
    readonly type = "RichTextBlock";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The inlines making up the rich text block.
     */
    inlines?: RichTextBlockInlineArray;
    constructor(options?: RichTextBlockOptions);
    static from(options: Omit<IRichTextBlock, 'type'>): RichTextBlock;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withFallback(fallback: FallbackElement): this;
    withInlines(...inlines: RichTextBlockInlineArray): this;
}
/**
 * Use tables to display data in a tabular way, with rows, columns and cells.
 */
interface ITable {
    /**
     * Must be **Table**.
     */
    readonly type: 'Table';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The columns in the table.
     */
    columns?: IColumnDefinition[];
    /**
     * Controls whether the first row of the table should be treated as a header.
     */
    firstRowAsHeaders?: boolean;
    /**
     * Controls if grid lines should be displayed.
     */
    showGridLines?: boolean;
    /**
     * The style of the grid lines between cells.
     */
    gridStyle?: ContainerStyle;
    /**
     * Controls how the content of every cell in the table should be horizontally aligned by default.
     */
    horizontalCellContentAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of every cell in the table should be vertically aligned by default.
     */
    verticalCellContentAlignment?: VerticalAlignment;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The rows of the table.
     */
    rows?: TableRowArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ITable.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Table, false otherwise.
 */
declare function isTable(value: unknown): value is ITable;
type TableOptions = Omit<ITable, 'type'>;
/**
 * Use tables to display data in a tabular way, with rows, columns and cells.
 */
declare class Table implements ITable {
    /**
     * Must be **Table**.
     */
    readonly type = "Table";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The columns in the table.
     */
    columns?: IColumnDefinition[];
    /**
     * Controls whether the first row of the table should be treated as a header.
     */
    firstRowAsHeaders?: boolean;
    /**
     * Controls if grid lines should be displayed.
     */
    showGridLines?: boolean;
    /**
     * The style of the grid lines between cells.
     */
    gridStyle?: ContainerStyle;
    /**
     * Controls how the content of every cell in the table should be horizontally aligned by default.
     */
    horizontalCellContentAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of every cell in the table should be vertically aligned by default.
     */
    verticalCellContentAlignment?: VerticalAlignment;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The rows of the table.
     */
    rows?: TableRowArray;
    constructor(options?: TableOptions);
    static from(options: Omit<ITable, 'type'>): Table;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withStyle(style: ContainerStyle): this;
    withShowBorder(showBorder?: boolean): this;
    withRoundedCorners(roundedCorners?: boolean): this;
    withColumns(...columns: IColumnDefinition[]): this;
    withFirstRowAsHeaders(firstRowAsHeaders?: boolean): this;
    withShowGridLines(showGridLines?: boolean): this;
    withGridStyle(gridStyle: ContainerStyle): this;
    withHorizontalCellContentAlignment(horizontalCellContentAlignment: HorizontalAlignment): this;
    withVerticalCellContentAlignment(verticalCellContentAlignment: VerticalAlignment): this;
    withFallback(fallback: FallbackElement): this;
    withRows(...rows: TableRowArray): this;
}
/**
 * Defines a column in a Table element.
 */
interface IColumnDefinition {
    /**
     * Controls how the content of every cell in the table should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table.
     */
    horizontalCellContentAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of every cell in the column should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table.
     */
    verticalCellContentAlignment?: VerticalAlignment;
    /**
     * The width of the column in the table, expressed as either a percentage of the available width or in pixels, using the `<number>px` format.
     */
    width?: string | number;
}
type ColumnDefinitionOptions = IColumnDefinition;
/**
 * Defines a column in a Table element.
 */
declare class ColumnDefinition implements IColumnDefinition {
    /**
     * Controls how the content of every cell in the table should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table.
     */
    horizontalCellContentAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of every cell in the column should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table.
     */
    verticalCellContentAlignment?: VerticalAlignment;
    /**
     * The width of the column in the table, expressed as either a percentage of the available width or in pixels, using the `<number>px` format.
     */
    width?: string | number;
    constructor(options?: ColumnDefinitionOptions);
    static from(options: IColumnDefinition): ColumnDefinition;
    withHorizontalCellContentAlignment(horizontalCellContentAlignment: HorizontalAlignment): this;
    withVerticalCellContentAlignment(verticalCellContentAlignment: VerticalAlignment): this;
    withWidth(width: string | number): this;
}
/**
 * A block of text, optionally formatted using Markdown.
 */
interface ITextBlock {
    /**
     * Must be **TextBlock**.
     */
    readonly type: 'TextBlock';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The text to display. A subset of markdown is supported.
     */
    text: string;
    /**
     * The size of the text.
     */
    size?: TextSize;
    /**
     * The weight of the text.
     */
    weight?: TextWeight;
    /**
     * The color of the text.
     */
    color?: TextColor;
    /**
     * Controls whether the text should be renderer using a subtler variant of the select color.
     */
    isSubtle?: boolean;
    /**
     * The type of font to use for rendering.
     */
    fontType?: FontType;
    /**
     * Controls if the text should wrap.
     */
    wrap?: boolean;
    /**
     * The maximum number of lines to display.
     */
    maxLines?: number;
    /**
     * The style of the text.
     */
    style?: 'default' | 'columnHeader' | 'heading';
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ITextBlock.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of TextBlock, false otherwise.
 */
declare function isTextBlock(value: unknown): value is ITextBlock;
type TextBlockOptions = Omit<ITextBlock, 'type' | 'text'>;
/**
 * A block of text, optionally formatted using Markdown.
 */
declare class TextBlock implements ITextBlock {
    /**
     * Must be **TextBlock**.
     */
    readonly type = "TextBlock";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The text to display. A subset of markdown is supported.
     */
    text: string;
    /**
     * The size of the text.
     */
    size?: TextSize;
    /**
     * The weight of the text.
     */
    weight?: TextWeight;
    /**
     * The color of the text.
     */
    color?: TextColor;
    /**
     * Controls whether the text should be renderer using a subtler variant of the select color.
     */
    isSubtle?: boolean;
    /**
     * The type of font to use for rendering.
     */
    fontType?: FontType;
    /**
     * Controls if the text should wrap.
     */
    wrap?: boolean;
    /**
     * The maximum number of lines to display.
     */
    maxLines?: number;
    /**
     * The style of the text.
     */
    style?: 'default' | 'columnHeader' | 'heading';
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(text: string, options?: TextBlockOptions);
    static from(options: Omit<ITextBlock, 'type'>): TextBlock;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withText(text: string): this;
    withSize(size: TextSize): this;
    withWeight(weight: TextWeight): this;
    withColor(color: TextColor): this;
    withIsSubtle(isSubtle: boolean): this;
    withFontType(fontType: FontType): this;
    withWrap(wrap?: boolean): this;
    withMaxLines(maxLines: number): this;
    withStyle(style: 'default' | 'columnHeader' | 'heading'): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A set of facts, displayed as a table or a vertical list when horizontal space is constrained.
 */
interface IFactSet {
    /**
     * Must be **FactSet**.
     */
    readonly type: 'FactSet';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The facts in the set.
     */
    facts: IFact[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IFactSet.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of FactSet, false otherwise.
 */
declare function isFactSet(value: unknown): value is IFactSet;
type FactSetOptions = Omit<IFactSet, 'type' | 'facts'>;
/**
 * A set of facts, displayed as a table or a vertical list when horizontal space is constrained.
 */
declare class FactSet implements IFactSet {
    /**
     * Must be **FactSet**.
     */
    readonly type = "FactSet";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The facts in the set.
     */
    facts: IFact[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(...facts: IFact[]);
    withOptions(value: FactSetOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withFacts(...facts: IFact[]): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A fact in a FactSet element.
 */
interface IFact {
    /**
     * The fact's title.
     */
    title: string;
    /**
     * The fact's value.
     */
    value: string;
}
type FactOptions = IFact;
/**
 * A fact in a FactSet element.
 */
declare class Fact implements IFact {
    /**
     * The fact's title.
     */
    title: string;
    /**
     * The fact's value.
     */
    value: string;
    constructor(title: string, value: string);
    static from(options: IFact): Fact;
    withTitle(title: string): this;
    withValue(value: string): this;
}
/**
 * A set of images, displayed side-by-side and wrapped across multiple rows as needed.
 */
interface IImageSet {
    /**
     * Must be **ImageSet**.
     */
    readonly type: 'ImageSet';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The images in the set.
     */
    images: IImage[];
    /**
     * The size to use to render all images in the set.
     */
    imageSize?: ImageSize;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IImageSet.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ImageSet, false otherwise.
 */
declare function isImageSet(value: unknown): value is IImageSet;
type ImageSetOptions = Omit<IImageSet, 'type' | 'images'>;
/**
 * A set of images, displayed side-by-side and wrapped across multiple rows as needed.
 */
declare class ImageSet implements IImageSet {
    /**
     * Must be **ImageSet**.
     */
    readonly type = "ImageSet";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The images in the set.
     */
    images: IImage[];
    /**
     * The size to use to render all images in the set.
     */
    imageSize?: ImageSize;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(...images: IImage[]);
    withOptions(value: ImageSetOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withImages(...images: IImage[]): this;
    withImageSize(imageSize: ImageSize): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A standalone image element.
 */
interface IImage {
    /**
     * Must be **Image**.
     */
    readonly type: 'Image';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.
     */
    url: string;
    /**
     * The alternate text for the image, used for accessibility purposes.
     */
    altText?: string;
    /**
     * The background color of the image.
     */
    backgroundColor?: string;
    /**
     * The style of the image.
     */
    style?: ImageStyle;
    /**
     * The size of the image.
     */
    size?: Size;
    /**
     * The width of the image.
     */
    width?: 'auto' | 'stretch' | string;
    /**
     * An Action that will be invoked when the image is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * Controls if the image can be expanded to full screen.
     */
    allowExpand?: boolean;
    /**
     * Teams-specific metadata associated with the image.
     */
    msTeams?: ITeamsImageProperties;
    /**
     * The height of the image.
     */
    height?: 'auto' | 'stretch' | string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IImage.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Image, false otherwise.
 */
declare function isImage(value: unknown): value is IImage;
type ImageOptions = Omit<IImage, 'type' | 'url'>;
/**
 * A standalone image element.
 */
declare class Image implements IImage {
    /**
     * Must be **Image**.
     */
    readonly type = "Image";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The URL (or Base64-encoded Data URI) of the image. Acceptable formats are PNG, JPEG, GIF and SVG.
     */
    url: string;
    /**
     * The alternate text for the image, used for accessibility purposes.
     */
    altText?: string;
    /**
     * The background color of the image.
     */
    backgroundColor?: string;
    /**
     * The style of the image.
     */
    style?: ImageStyle;
    /**
     * The size of the image.
     */
    size?: Size;
    /**
     * The width of the image.
     */
    width?: 'auto' | 'stretch' | string;
    /**
     * An Action that will be invoked when the image is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * Controls if the image can be expanded to full screen.
     */
    allowExpand?: boolean;
    /**
     * Teams-specific metadata associated with the image.
     */
    msTeams?: ITeamsImageProperties;
    /**
     * The height of the image.
     */
    height?: 'auto' | 'stretch' | string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(url: string, options?: ImageOptions);
    static from(options: Omit<IImage, 'type'>): Image;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withUrl(url: string): this;
    withAltText(altText: string): this;
    withBackgroundColor(backgroundColor: string): this;
    withStyle(style: ImageStyle): this;
    withSize(size: Size): this;
    withWidth(width: 'auto' | 'stretch' | string): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withAllowExpand(allowExpand?: boolean): this;
    withMsTeams(msTeams: ITeamsImageProperties): this;
    withHeight(height: 'auto' | 'stretch' | string): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents a set of Teams-specific properties on an image.
 */
interface ITeamsImageProperties {
    /**
     * Controls if the image is expandable in Teams. This property is equivalent to the Image.allowExpand property.
     */
    allowExpand?: boolean;
}
type TeamsImagePropertiesOptions = ITeamsImageProperties;
/**
 * Represents a set of Teams-specific properties on an image.
 */
declare class TeamsImageProperties implements ITeamsImageProperties {
    /**
     * Controls if the image is expandable in Teams. This property is equivalent to the Image.allowExpand property.
     */
    allowExpand?: boolean;
    constructor(options?: TeamsImagePropertiesOptions);
    static from(options: ITeamsImageProperties): TeamsImageProperties;
    withAllowExpand(allowExpand: boolean): this;
}
/**
 * An input to allow the user to enter text.
 */
interface ITextInput {
    /**
     * Must be **Input.Text**.
     */
    readonly type: 'Input.Text';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: string;
    /**
     * The maximum length of the text in the input.
     */
    maxLength?: number;
    /**
     * Controls if the input should allow multiple lines of text.
     */
    isMultiline?: boolean;
    /**
     * The text to display as a placeholder when the user hasn't entered a value.
     */
    placeholder?: string;
    /**
     * The style of the input.
     */
    style?: InputTextStyle;
    /**
     * The action that should be displayed as a button alongside the input. Action.ShowCard is not supported.
     */
    inlineAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The regular expression to validate the input.
     */
    regex?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ITextInput.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of TextInput, false otherwise.
 */
declare function isTextInput(value: unknown): value is ITextInput;
type TextInputOptions = Omit<ITextInput, 'type'>;
/**
 * An input to allow the user to enter text.
 */
declare class TextInput implements ITextInput {
    /**
     * Must be **Input.Text**.
     */
    readonly type = "Input.Text";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: string;
    /**
     * The maximum length of the text in the input.
     */
    maxLength?: number;
    /**
     * Controls if the input should allow multiple lines of text.
     */
    isMultiline?: boolean;
    /**
     * The text to display as a placeholder when the user hasn't entered a value.
     */
    placeholder?: string;
    /**
     * The style of the input.
     */
    style?: InputTextStyle;
    /**
     * The action that should be displayed as a button alongside the input. Action.ShowCard is not supported.
     */
    inlineAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The regular expression to validate the input.
     */
    regex?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: TextInputOptions);
    static from(options: Omit<ITextInput, 'type'>): TextInput;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withLabel(label: string): this;
    withIsRequired(isRequired?: boolean): this;
    withErrorMessage(errorMessage: string): this;
    withValueChangedAction(valueChangedAction: IResetInputsAction): this;
    withValue(value: string): this;
    withMaxLength(maxLength: number): this;
    withIsMultiline(isMultiline?: boolean): this;
    withPlaceholder(placeholder: string): this;
    withStyle(style: InputTextStyle): this;
    withInlineAction(inlineAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withRegex(regex: string): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * An input to allow the user to select a date.
 */
interface IDateInput {
    /**
     * Must be **Input.Date**.
     */
    readonly type: 'Input.Date';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input, in the `YYYY-MM-DD` format.
     */
    value?: string;
    /**
     * The text to display as a placeholder when the user has not selected a date.
     */
    placeholder?: string;
    /**
     * The minimum date that can be selected.
     */
    min?: string;
    /**
     * The maximum date that can be selected.
     */
    max?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IDateInput.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of DateInput, false otherwise.
 */
declare function isDateInput(value: unknown): value is IDateInput;
type DateInputOptions = Omit<IDateInput, 'type'>;
/**
 * An input to allow the user to select a date.
 */
declare class DateInput implements IDateInput {
    /**
     * Must be **Input.Date**.
     */
    readonly type = "Input.Date";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input, in the `YYYY-MM-DD` format.
     */
    value?: string;
    /**
     * The text to display as a placeholder when the user has not selected a date.
     */
    placeholder?: string;
    /**
     * The minimum date that can be selected.
     */
    min?: string;
    /**
     * The maximum date that can be selected.
     */
    max?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: DateInputOptions);
    static from(options: Omit<IDateInput, 'type'>): DateInput;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withLabel(label: string): this;
    withIsRequired(isRequired?: boolean): this;
    withErrorMessage(errorMessage: string): this;
    withValueChangedAction(valueChangedAction: IResetInputsAction): this;
    withValue(value: string): this;
    withPlaceholder(placeholder: string): this;
    withMin(min: string): this;
    withMax(max: string): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * An input to allow the user to select a time.
 */
interface ITimeInput {
    /**
     * Must be **Input.Time**.
     */
    readonly type: 'Input.Time';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input, in the `HH:MM` format.
     */
    value?: string;
    /**
     * The text to display as a placeholder when the user hasn't entered a value.
     */
    placeholder?: string;
    /**
     * The minimum time that can be selected, in the `HH:MM` format.
     */
    min?: string;
    /**
     * The maximum time that can be selected, in the `HH:MM` format.
     */
    max?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ITimeInput.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of TimeInput, false otherwise.
 */
declare function isTimeInput(value: unknown): value is ITimeInput;
type TimeInputOptions = Omit<ITimeInput, 'type'>;
/**
 * An input to allow the user to select a time.
 */
declare class TimeInput implements ITimeInput {
    /**
     * Must be **Input.Time**.
     */
    readonly type = "Input.Time";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input, in the `HH:MM` format.
     */
    value?: string;
    /**
     * The text to display as a placeholder when the user hasn't entered a value.
     */
    placeholder?: string;
    /**
     * The minimum time that can be selected, in the `HH:MM` format.
     */
    min?: string;
    /**
     * The maximum time that can be selected, in the `HH:MM` format.
     */
    max?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: TimeInputOptions);
    static from(options: Omit<ITimeInput, 'type'>): TimeInput;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withLabel(label: string): this;
    withIsRequired(isRequired?: boolean): this;
    withErrorMessage(errorMessage: string): this;
    withValueChangedAction(valueChangedAction: IResetInputsAction): this;
    withValue(value: string): this;
    withPlaceholder(placeholder: string): this;
    withMin(min: string): this;
    withMax(max: string): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * An input to allow the user to enter a number.
 */
interface INumberInput {
    /**
     * Must be **Input.Number**.
     */
    readonly type: 'Input.Number';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: number;
    /**
     * The text to display as a placeholder when the user hasn't entered a value.
     */
    placeholder?: string;
    /**
     * The minimum value that can be entered.
     */
    min?: number;
    /**
     * The maximum value that can be entered.
     */
    max?: number;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type INumberInput.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of NumberInput, false otherwise.
 */
declare function isNumberInput(value: unknown): value is INumberInput;
type NumberInputOptions = Omit<INumberInput, 'type'>;
/**
 * An input to allow the user to enter a number.
 */
declare class NumberInput implements INumberInput {
    /**
     * Must be **Input.Number**.
     */
    readonly type = "Input.Number";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: number;
    /**
     * The text to display as a placeholder when the user hasn't entered a value.
     */
    placeholder?: string;
    /**
     * The minimum value that can be entered.
     */
    min?: number;
    /**
     * The maximum value that can be entered.
     */
    max?: number;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: NumberInputOptions);
    static from(options: Omit<INumberInput, 'type'>): NumberInput;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withLabel(label: string): this;
    withIsRequired(isRequired?: boolean): this;
    withErrorMessage(errorMessage: string): this;
    withValueChangedAction(valueChangedAction: IResetInputsAction): this;
    withValue(value: number): this;
    withPlaceholder(placeholder: string): this;
    withMin(min: number): this;
    withMax(max: number): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * An input to allow the user to select between on/off states.
 */
interface IToggleInput {
    /**
     * Must be **Input.Toggle**.
     */
    readonly type: 'Input.Toggle';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: string;
    /**
     * The title (caption) to display next to the toggle.
     */
    title: string;
    /**
     * The value to send to the Bot when the toggle is on.
     */
    valueOn?: string;
    /**
     * The value to send to the Bot when the toggle is off.
     */
    valueOff?: string;
    /**
     * Controls if the title should wrap.
     */
    wrap?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IToggleInput.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ToggleInput, false otherwise.
 */
declare function isToggleInput(value: unknown): value is IToggleInput;
type ToggleInputOptions = Omit<IToggleInput, 'type' | 'title'>;
/**
 * An input to allow the user to select between on/off states.
 */
declare class ToggleInput implements IToggleInput {
    /**
     * Must be **Input.Toggle**.
     */
    readonly type = "Input.Toggle";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: string;
    /**
     * The title (caption) to display next to the toggle.
     */
    title: string;
    /**
     * The value to send to the Bot when the toggle is on.
     */
    valueOn?: string;
    /**
     * The value to send to the Bot when the toggle is off.
     */
    valueOff?: string;
    /**
     * Controls if the title should wrap.
     */
    wrap?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(title: string, options?: ToggleInputOptions);
    static from(options: Omit<IToggleInput, 'type'>): ToggleInput;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withLabel(label: string): this;
    withIsRequired(isRequired?: boolean): this;
    withErrorMessage(errorMessage: string): this;
    withValueChangedAction(valueChangedAction: IResetInputsAction): this;
    withValue(value: string): this;
    withTitle(title: string): this;
    withValueOn(valueOn: string): this;
    withValueOff(valueOff: string): this;
    withWrap(wrap?: boolean): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * An input to allow the user to select one or more values.
 */
interface IChoiceSetInput {
    /**
     * Must be **Input.ChoiceSet**.
     */
    readonly type: 'Input.ChoiceSet';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: string;
    /**
     * The choices associated with the input.
     */
    choices: IChoice[];
    /**
     * A Data.Query object that defines the dataset from which to dynamically fetch the choices for the input.
     */
    'choices.data'?: IQueryData;
    /**
     * Controls whether the input should be displayed as a dropdown (compact) or a list of radio buttons or checkboxes (expanded).
     */
    style?: 'compact' | 'expanded' | 'filtered';
    /**
     * Controls whether multiple choices can be selected.
     */
    isMultiSelect?: boolean;
    /**
     * The text to display as a placeholder when the user has not entered any value.
     */
    placeholder?: string;
    /**
     * Controls if choice titles should wrap.
     */
    wrap?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IChoiceSetInput.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ChoiceSetInput, false otherwise.
 */
declare function isChoiceSetInput(value: unknown): value is IChoiceSetInput;
type ChoiceSetInputOptions = Omit<IChoiceSetInput, 'type' | 'choices'>;
/**
 * An input to allow the user to select one or more values.
 */
declare class ChoiceSetInput implements IChoiceSetInput {
    /**
     * Must be **Input.ChoiceSet**.
     */
    readonly type = "Input.ChoiceSet";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: string;
    /**
     * The choices associated with the input.
     */
    choices: IChoice[];
    /**
     * A Data.Query object that defines the dataset from which to dynamically fetch the choices for the input.
     */
    'choices.data'?: IQueryData;
    /**
     * Controls whether the input should be displayed as a dropdown (compact) or a list of radio buttons or checkboxes (expanded).
     */
    style?: 'compact' | 'expanded' | 'filtered';
    /**
     * Controls whether multiple choices can be selected.
     */
    isMultiSelect?: boolean;
    /**
     * The text to display as a placeholder when the user has not entered any value.
     */
    placeholder?: string;
    /**
     * Controls if choice titles should wrap.
     */
    wrap?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(...choices: IChoice[]);
    withOptions(value: ChoiceSetInputOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withLabel(label: string): this;
    withIsRequired(isRequired?: boolean): this;
    withErrorMessage(errorMessage: string): this;
    withValueChangedAction(valueChangedAction: IResetInputsAction): this;
    withValue(value: string): this;
    withChoices(...choices: IChoice[]): this;
    withStyle(style: 'compact' | 'expanded' | 'filtered'): this;
    withIsMultiSelect(isMultiSelect?: boolean): this;
    withPlaceholder(placeholder: string): this;
    withWrap(wrap?: boolean): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A choice as used by the Input.ChoiceSet input.
 */
interface IChoice {
    /**
     * The text to display for the choice.
     */
    title?: string;
    /**
     * The value associated with the choice, as sent to the Bot when an Action.Submit or Action.Execute is invoked
     */
    value?: string;
}
type ChoiceOptions = IChoice;
/**
 * A choice as used by the Input.ChoiceSet input.
 */
declare class Choice implements IChoice {
    /**
     * The text to display for the choice.
     */
    title?: string;
    /**
     * The value associated with the choice, as sent to the Bot when an Action.Submit or Action.Execute is invoked
     */
    value?: string;
    constructor(options?: ChoiceOptions);
    static from(options: IChoice): Choice;
    withTitle(title: string): this;
    withValue(value: string): this;
}
/**
 * Defines a query to dynamically fetch data from a Bot.
 */
interface IQueryData {
    /**
     * Must be **Data.Query**.
     */
    readonly type: 'Data.Query';
    /**
     * The dataset from which to fetch the data.
     */
    dataset?: string;
    /**
     * Controls which inputs are associated with the Data.Query. When a Data.Query is executed, the values of the associated inputs are sent to the Bot, allowing it to perform filtering operations based on the user's input.
     */
    associatedInputs?: 'auto' | 'none';
    /**
     * The maximum number of data items that should be returned by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.
     */
    count?: number;
    /**
     * The number of data items to be skipped by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.
     */
    skip?: number;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IQueryData.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of QueryData, false otherwise.
 */
declare function isQueryData(value: unknown): value is IQueryData;
type QueryDataOptions = Omit<IQueryData, 'type'>;
/**
 * Defines a query to dynamically fetch data from a Bot.
 */
declare class QueryData implements IQueryData {
    /**
     * Must be **Data.Query**.
     */
    readonly type = "Data.Query";
    /**
     * The dataset from which to fetch the data.
     */
    dataset?: string;
    /**
     * Controls which inputs are associated with the Data.Query. When a Data.Query is executed, the values of the associated inputs are sent to the Bot, allowing it to perform filtering operations based on the user's input.
     */
    associatedInputs?: 'auto' | 'none';
    /**
     * The maximum number of data items that should be returned by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.
     */
    count?: number;
    /**
     * The number of data items to be skipped by the query. Card authors should not specify this property in their card payload. It is determined by the client and sent to the Bot to enable pagination.
     */
    skip?: number;
    constructor(options?: QueryDataOptions);
    static from(options: Omit<IQueryData, 'type'>): QueryData;
    withDataset(dataset: string): this;
    withAssociatedInputs(associatedInputs: 'auto' | 'none'): this;
    withCount(count: number): this;
    withSkip(skip: number): this;
}
/**
 * An input to allow the user to rate something using stars.
 */
interface IRatingInput {
    /**
     * Must be **Input.Rating**.
     */
    readonly type: 'Input.Rating';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: number;
    /**
     * The number of stars to display.
     */
    max?: number;
    /**
     * Controls if the user can select half stars.
     */
    allowHalfSteps?: boolean;
    /**
     * The size of the stars.
     */
    size?: RatingSize;
    /**
     * The color of the stars.
     */
    color?: RatingColor;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IRatingInput.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of RatingInput, false otherwise.
 */
declare function isRatingInput(value: unknown): value is IRatingInput;
type RatingInputOptions = Omit<IRatingInput, 'type'>;
/**
 * An input to allow the user to rate something using stars.
 */
declare class RatingInput implements IRatingInput {
    /**
     * Must be **Input.Rating**.
     */
    readonly type = "Input.Rating";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The label of the input.
  
  A label should **always** be provided to ensure the best user experience especially for users of assistive technology.
     */
    label?: string;
    /**
     * Controls whether the input is required. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    isRequired?: boolean;
    /**
     * The error message to display when the input fails validation. See [Input validation](https://adaptivecards.microsoft.com/?topic=input-validation) for more details.
     */
    errorMessage?: string;
    /**
     * An Action.ResetInputs action that will be executed when the value of the input changes.
     */
    valueChangedAction?: IResetInputsAction;
    /**
     * The default value of the input.
     */
    value?: number;
    /**
     * The number of stars to display.
     */
    max?: number;
    /**
     * Controls if the user can select half stars.
     */
    allowHalfSteps?: boolean;
    /**
     * The size of the stars.
     */
    size?: RatingSize;
    /**
     * The color of the stars.
     */
    color?: RatingColor;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: RatingInputOptions);
    static from(options: Omit<IRatingInput, 'type'>): RatingInput;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withLabel(label: string): this;
    withIsRequired(isRequired?: boolean): this;
    withErrorMessage(errorMessage: string): this;
    withValueChangedAction(valueChangedAction: IResetInputsAction): this;
    withValue(value: number): this;
    withMax(max: number): this;
    withAllowHalfSteps(allowHalfSteps?: boolean): this;
    withSize(size: RatingSize): this;
    withColor(color: RatingColor): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A read-only star rating element, to display the rating of something.
 */
interface IRating {
    /**
     * Must be **Rating**.
     */
    readonly type: 'Rating';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The value of the rating. Must be between 0 and max.
     */
    value?: number;
    /**
     * The number of "votes" associated with the rating.
     */
    count?: number;
    /**
     * The number of stars to display.
     */
    max?: number;
    /**
     * The size of the stars.
     */
    size?: RatingSize;
    /**
     * The color of the stars.
     */
    color?: RatingColor;
    /**
     * The style of the stars.
     */
    style?: RatingStyle;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IRating.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Rating, false otherwise.
 */
declare function isRating(value: unknown): value is IRating;
type RatingOptions = Omit<IRating, 'type'>;
/**
 * A read-only star rating element, to display the rating of something.
 */
declare class Rating implements IRating {
    /**
     * Must be **Rating**.
     */
    readonly type = "Rating";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The value of the rating. Must be between 0 and max.
     */
    value?: number;
    /**
     * The number of "votes" associated with the rating.
     */
    count?: number;
    /**
     * The number of stars to display.
     */
    max?: number;
    /**
     * The size of the stars.
     */
    size?: RatingSize;
    /**
     * The color of the stars.
     */
    color?: RatingColor;
    /**
     * The style of the stars.
     */
    style?: RatingStyle;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: RatingOptions);
    static from(options: Omit<IRating, 'type'>): Rating;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withValue(value: number): this;
    withCount(count: number): this;
    withMax(max: number): this;
    withSize(size: RatingSize): this;
    withColor(color: RatingColor): this;
    withStyle(style: RatingStyle): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A special type of button with an icon, title and description.
 */
interface ICompoundButton {
    /**
     * Must be **CompoundButton**.
     */
    readonly type: 'CompoundButton';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The icon to show on the button.
     */
    icon?: IIconInfo;
    /**
     * The badge to show on the button.
     */
    badge?: string;
    /**
     * The title of the button.
     */
    title?: string;
    /**
     * The description text of the button.
     */
    description?: string;
    /**
     * An Action that will be invoked when the button is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ICompoundButton.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of CompoundButton, false otherwise.
 */
declare function isCompoundButton(value: unknown): value is ICompoundButton;
type CompoundButtonOptions = Omit<ICompoundButton, 'type'>;
/**
 * A special type of button with an icon, title and description.
 */
declare class CompoundButton implements ICompoundButton {
    /**
     * Must be **CompoundButton**.
     */
    readonly type = "CompoundButton";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The icon to show on the button.
     */
    icon?: IIconInfo;
    /**
     * The badge to show on the button.
     */
    badge?: string;
    /**
     * The title of the button.
     */
    title?: string;
    /**
     * The description text of the button.
     */
    description?: string;
    /**
     * An Action that will be invoked when the button is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: CompoundButtonOptions);
    static from(options: Omit<ICompoundButton, 'type'>): CompoundButton;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withIcon(icon: IIconInfo): this;
    withBadge(badge: string): this;
    withTitle(title: string): this;
    withDescription(description: string): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Defines information about a Fluent icon and how it should be rendered.
 */
interface IIconInfo {
    /**
     * The name of the icon to display.
     */
    name?: string;
    /**
     * The size of the icon.
     */
    size?: IconSize;
    /**
     * The style of the icon.
     */
    style?: IconStyle;
    /**
     * The color of the icon.
     */
    color?: TextColor;
}
type IconInfoOptions = IIconInfo;
/**
 * Defines information about a Fluent icon and how it should be rendered.
 */
declare class IconInfo implements IIconInfo {
    /**
     * The name of the icon to display.
     */
    name?: string;
    /**
     * The size of the icon.
     */
    size?: IconSize;
    /**
     * The style of the icon.
     */
    style?: IconStyle;
    /**
     * The color of the icon.
     */
    color?: TextColor;
    constructor(options?: IconInfoOptions);
    static from(options: IIconInfo): IconInfo;
    withName(name: string): this;
    withSize(size: IconSize): this;
    withStyle(style: IconStyle): this;
    withColor(color: TextColor): this;
}
/**
 * A standalone icon element. Icons can be picked from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog).
 */
interface IIcon {
    /**
     * Must be **Icon**.
     */
    readonly type: 'Icon';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The name of the icon to display.
     */
    name: string;
    /**
     * The size of the icon.
     */
    size?: IconSize;
    /**
     * The style of the icon.
     */
    style?: IconStyle;
    /**
     * The color of the icon.
     */
    color?: TextColor;
    /**
     * An Action that will be invoked when the icon is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IIcon.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Icon, false otherwise.
 */
declare function isIcon(value: unknown): value is IIcon;
type IconOptions = Omit<IIcon, 'type' | 'name'>;
/**
 * A standalone icon element. Icons can be picked from the vast [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog).
 */
declare class Icon implements IIcon {
    /**
     * Must be **Icon**.
     */
    readonly type = "Icon";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The name of the icon to display.
     */
    name: string;
    /**
     * The size of the icon.
     */
    size?: IconSize;
    /**
     * The style of the icon.
     */
    style?: IconStyle;
    /**
     * The color of the icon.
     */
    color?: TextColor;
    /**
     * An Action that will be invoked when the icon is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(name: string, options?: IconOptions);
    static from(options: Omit<IIcon, 'type'>): Icon;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withName(name: string): this;
    withSize(size: IconSize): this;
    withStyle(style: IconStyle): this;
    withColor(color: TextColor): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A carousel with sliding pages.
 */
interface ICarousel {
    /**
     * Must be **Carousel**.
     */
    readonly type: 'Carousel';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Controls the type of animation to use to navigate between pages.
     */
    pageAnimation?: CarouselPageAnimation;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The pages in the carousel.
     */
    pages?: ICarouselPage[];
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ICarousel.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Carousel, false otherwise.
 */
declare function isCarousel(value: unknown): value is ICarousel;
type CarouselOptions = Omit<ICarousel, 'type'>;
/**
 * A carousel with sliding pages.
 */
declare class Carousel implements ICarousel {
    /**
     * Must be **Carousel**.
     */
    readonly type = "Carousel";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Controls the type of animation to use to navigate between pages.
     */
    pageAnimation?: CarouselPageAnimation;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The pages in the carousel.
     */
    pages?: ICarouselPage[];
    constructor(options?: CarouselOptions);
    static from(options: Omit<ICarousel, 'type'>): Carousel;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withBleed(bleed?: boolean): this;
    withMinHeight(minHeight: string): this;
    withPageAnimation(pageAnimation: CarouselPageAnimation): this;
    withFallback(fallback: FallbackElement): this;
    withPages(...pages: ICarouselPage[]): this;
}
/**
 * A badge element to show an icon and/or text in a compact form over a colored background.
 */
interface IBadge {
    /**
     * Must be **Badge**.
     */
    readonly type: 'Badge';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The text to display.
     */
    text?: string;
    /**
     * The name of an icon from the [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) to display, in the `<icon-name>[,regular|filled]` format. If the style is not specified, the regular style is used.
     */
    icon?: string;
    /**
     * Controls the position of the icon.
     */
    iconPosition?: BadgeIconPosition;
    /**
     * Controls the strength of the background color.
     */
    appearance?: BadgeAppearance;
    /**
     * The size of the badge.
     */
    size?: BadgeSize;
    /**
     * Controls the shape of the badge.
     */
    shape?: BadgeShape;
    /**
     * The style of the badge.
     */
    style?: BadgeStyle;
    /**
     * Controls the tooltip text to display when the badge is hovered over.
     */
    tooltip?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IBadge.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Badge, false otherwise.
 */
declare function isBadge(value: unknown): value is IBadge;
type BadgeOptions = Omit<IBadge, 'type'>;
/**
 * A badge element to show an icon and/or text in a compact form over a colored background.
 */
declare class Badge implements IBadge {
    /**
     * Must be **Badge**.
     */
    readonly type = "Badge";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The text to display.
     */
    text?: string;
    /**
     * The name of an icon from the [Adaptive Card icon catalog](https://adaptivecards.microsoft.com/?topic=icon-catalog) to display, in the `<icon-name>[,regular|filled]` format. If the style is not specified, the regular style is used.
     */
    icon?: string;
    /**
     * Controls the position of the icon.
     */
    iconPosition?: BadgeIconPosition;
    /**
     * Controls the strength of the background color.
     */
    appearance?: BadgeAppearance;
    /**
     * The size of the badge.
     */
    size?: BadgeSize;
    /**
     * Controls the shape of the badge.
     */
    shape?: BadgeShape;
    /**
     * The style of the badge.
     */
    style?: BadgeStyle;
    /**
     * Controls the tooltip text to display when the badge is hovered over.
     */
    tooltip?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: BadgeOptions);
    static from(options: Omit<IBadge, 'type'>): Badge;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withText(text: string): this;
    withIcon(icon: string): this;
    withIconPosition(iconPosition: BadgeIconPosition): this;
    withAppearance(appearance: BadgeAppearance): this;
    withSize(size: BadgeSize): this;
    withShape(shape: BadgeShape): this;
    withStyle(style: BadgeStyle): this;
    withTooltip(tooltip: string): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A donut chart.
 */
interface IDonutChart {
    /**
     * Must be **Chart.Donut**.
     */
    readonly type: 'Chart.Donut';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The data to display in the chart.
     */
    data?: IDonutChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IDonutChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of DonutChart, false otherwise.
 */
declare function isDonutChart(value: unknown): value is IDonutChart;
type DonutChartOptions = Omit<IDonutChart, 'type'>;
/**
 * A donut chart.
 */
declare class DonutChart implements IDonutChart {
    /**
     * Must be **Chart.Donut**.
     */
    readonly type = "Chart.Donut";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The data to display in the chart.
     */
    data?: IDonutChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: DonutChartOptions);
    static from(options: Omit<IDonutChart, 'type'>): DonutChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withData(...data: IDonutChartData[]): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A data point in a Donut chart.
 */
interface IDonutChartData {
    /**
     * The legend of the chart.
     */
    legend?: string;
    /**
     * The value associated with the data point.
     */
    value?: number;
    /**
     * The color to use for the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
}
type DonutChartDataOptions = IDonutChartData;
/**
 * A data point in a Donut chart.
 */
declare class DonutChartData implements IDonutChartData {
    /**
     * The legend of the chart.
     */
    legend?: string;
    /**
     * The value associated with the data point.
     */
    value?: number;
    /**
     * The color to use for the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    constructor(options?: DonutChartDataOptions);
    static from(options: IDonutChartData): DonutChartData;
    withLegend(legend: string): this;
    withValue(value: number): this;
    withColor(color: ChartColor): this;
}
/**
 * A pie chart.
 */
interface IPieChart {
    /**
     * Must be **Chart.Pie**.
     */
    readonly type: 'Chart.Pie';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The data to display in the chart.
     */
    data?: IDonutChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IPieChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of PieChart, false otherwise.
 */
declare function isPieChart(value: unknown): value is IPieChart;
type PieChartOptions = Omit<IPieChart, 'type'>;
/**
 * A pie chart.
 */
declare class PieChart implements IPieChart {
    /**
     * Must be **Chart.Pie**.
     */
    readonly type = "Chart.Pie";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The data to display in the chart.
     */
    data?: IDonutChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: PieChartOptions);
    static from(options: Omit<IPieChart, 'type'>): PieChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withData(...data: IDonutChartData[]): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A grouped vertical bar chart.
 */
interface IGroupedVerticalBarChart {
    /**
     * Must be **Chart.VerticalBar.Grouped**.
     */
    readonly type: 'Chart.VerticalBar.Grouped';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * Controls if bars in the chart should  be displayed as stacked instead of grouped.
     */
    stacked?: boolean;
    /**
     * The data points in a series.
     */
    data?: IGroupedVerticalBarChartData[];
    /**
     * Controls if values should be displayed on each bar.
     */
    showBarValues?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IGroupedVerticalBarChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of GroupedVerticalBarChart, false otherwise.
 */
declare function isGroupedVerticalBarChart(value: unknown): value is IGroupedVerticalBarChart;
type GroupedVerticalBarChartOptions = Omit<IGroupedVerticalBarChart, 'type'>;
/**
 * A grouped vertical bar chart.
 */
declare class GroupedVerticalBarChart implements IGroupedVerticalBarChart {
    /**
     * Must be **Chart.VerticalBar.Grouped**.
     */
    readonly type = "Chart.VerticalBar.Grouped";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * Controls if bars in the chart should  be displayed as stacked instead of grouped.
     */
    stacked?: boolean;
    /**
     * The data points in a series.
     */
    data?: IGroupedVerticalBarChartData[];
    /**
     * Controls if values should be displayed on each bar.
     */
    showBarValues?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: GroupedVerticalBarChartOptions);
    static from(options: Omit<IGroupedVerticalBarChart, 'type'>): GroupedVerticalBarChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withXAxisTitle(xAxisTitle: string): this;
    withYAxisTitle(yAxisTitle: string): this;
    withColor(color: ChartColor): this;
    withStacked(stacked?: boolean): this;
    withData(...data: IGroupedVerticalBarChartData[]): this;
    withShowBarValues(showBarValues?: boolean): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents a series of data points.
 */
interface IGroupedVerticalBarChartData {
    /**
     * The legend of the chart.
     */
    legend?: string;
    /**
     * The data points in the series.
     */
    values?: IBarChartDataValue[];
    /**
     * The color to use for all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
}
type GroupedVerticalBarChartDataOptions = IGroupedVerticalBarChartData;
/**
 * Represents a series of data points.
 */
declare class GroupedVerticalBarChartData implements IGroupedVerticalBarChartData {
    /**
     * The legend of the chart.
     */
    legend?: string;
    /**
     * The data points in the series.
     */
    values?: IBarChartDataValue[];
    /**
     * The color to use for all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    constructor(options?: GroupedVerticalBarChartDataOptions);
    static from(options: IGroupedVerticalBarChartData): GroupedVerticalBarChartData;
    withLegend(legend: string): this;
    withValues(...values: IBarChartDataValue[]): this;
    withColor(color: ChartColor): this;
}
/**
 * A single data point in a bar chart.
 */
interface IBarChartDataValue {
    /**
     * The x axis value of the data point.
     */
    x?: string;
    /**
     * The y axis value of the data point.
     */
    y?: number;
}
type BarChartDataValueOptions = IBarChartDataValue;
/**
 * A single data point in a bar chart.
 */
declare class BarChartDataValue implements IBarChartDataValue {
    /**
     * The x axis value of the data point.
     */
    x?: string;
    /**
     * The y axis value of the data point.
     */
    y?: number;
    constructor(options?: BarChartDataValueOptions);
    static from(options: IBarChartDataValue): BarChartDataValue;
    withX(x: string): this;
    withY(y: number): this;
}
/**
 * A vertical bar chart.
 */
interface IVerticalBarChart {
    /**
     * Must be **Chart.VerticalBar**.
     */
    readonly type: 'Chart.VerticalBar';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The data to display in the chart.
     */
    data?: IVerticalBarChartDataValue[];
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * Controls if the bar values should be displayed.
     */
    showBarValues?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IVerticalBarChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of VerticalBarChart, false otherwise.
 */
declare function isVerticalBarChart(value: unknown): value is IVerticalBarChart;
type VerticalBarChartOptions = Omit<IVerticalBarChart, 'type'>;
/**
 * A vertical bar chart.
 */
declare class VerticalBarChart implements IVerticalBarChart {
    /**
     * Must be **Chart.VerticalBar**.
     */
    readonly type = "Chart.VerticalBar";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The data to display in the chart.
     */
    data?: IVerticalBarChartDataValue[];
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * Controls if the bar values should be displayed.
     */
    showBarValues?: boolean;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: VerticalBarChartOptions);
    static from(options: Omit<IVerticalBarChart, 'type'>): VerticalBarChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withXAxisTitle(xAxisTitle: string): this;
    withYAxisTitle(yAxisTitle: string): this;
    withData(...data: IVerticalBarChartDataValue[]): this;
    withColor(color: ChartColor): this;
    withShowBarValues(showBarValues?: boolean): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents a data point in a vertical bar chart.
 */
interface IVerticalBarChartDataValue {
    /**
     * The x axis value of the data point.
     */
    x?: string | number;
    /**
     * The y axis value of the data point.
     */
    y?: number;
    /**
     * The color to use for the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
}
type VerticalBarChartDataValueOptions = IVerticalBarChartDataValue;
/**
 * Represents a data point in a vertical bar chart.
 */
declare class VerticalBarChartDataValue implements IVerticalBarChartDataValue {
    /**
     * The x axis value of the data point.
     */
    x?: string | number;
    /**
     * The y axis value of the data point.
     */
    y?: number;
    /**
     * The color to use for the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    constructor(options?: VerticalBarChartDataValueOptions);
    static from(options: IVerticalBarChartDataValue): VerticalBarChartDataValue;
    withX(x: string | number): this;
    withY(y: number): this;
    withColor(color: ChartColor): this;
}
/**
 * A horizontal bar chart.
 */
interface IHorizontalBarChart {
    /**
     * Must be **Chart.HorizontalBar**.
     */
    readonly type: 'Chart.HorizontalBar';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * The data points in the chart.
     */
    data?: IHorizontalBarChartDataValue[];
    /**
     * Controls how the chart should be visually laid out.
     */
    displayMode?: HorizontalBarChartDisplayMode;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IHorizontalBarChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of HorizontalBarChart, false otherwise.
 */
declare function isHorizontalBarChart(value: unknown): value is IHorizontalBarChart;
type HorizontalBarChartOptions = Omit<IHorizontalBarChart, 'type'>;
/**
 * A horizontal bar chart.
 */
declare class HorizontalBarChart implements IHorizontalBarChart {
    /**
     * Must be **Chart.HorizontalBar**.
     */
    readonly type = "Chart.HorizontalBar";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * The data points in the chart.
     */
    data?: IHorizontalBarChartDataValue[];
    /**
     * Controls how the chart should be visually laid out.
     */
    displayMode?: HorizontalBarChartDisplayMode;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: HorizontalBarChartOptions);
    static from(options: Omit<IHorizontalBarChart, 'type'>): HorizontalBarChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withXAxisTitle(xAxisTitle: string): this;
    withYAxisTitle(yAxisTitle: string): this;
    withColor(color: ChartColor): this;
    withData(...data: IHorizontalBarChartDataValue[]): this;
    withDisplayMode(displayMode: HorizontalBarChartDisplayMode): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents a single data point in a horizontal bar chart.
 */
interface IHorizontalBarChartDataValue {
    /**
     * The x axis value of the data point.
     */
    x?: string;
    /**
     * The y axis value of the data point.
     */
    y?: number;
    /**
     * The color of the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
}
type HorizontalBarChartDataValueOptions = IHorizontalBarChartDataValue;
/**
 * Represents a single data point in a horizontal bar chart.
 */
declare class HorizontalBarChartDataValue implements IHorizontalBarChartDataValue {
    /**
     * The x axis value of the data point.
     */
    x?: string;
    /**
     * The y axis value of the data point.
     */
    y?: number;
    /**
     * The color of the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    constructor(options?: HorizontalBarChartDataValueOptions);
    static from(options: IHorizontalBarChartDataValue): HorizontalBarChartDataValue;
    withX(x: string): this;
    withY(y: number): this;
    withColor(color: ChartColor): this;
}
/**
 * A stacked horizontal bar chart.
 */
interface IStackedHorizontalBarChart {
    /**
     * Must be **Chart.HorizontalBar.Stacked**.
     */
    readonly type: 'Chart.HorizontalBar.Stacked';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * The data to display in the chart.
     */
    data?: IStackedHorizontalBarChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IStackedHorizontalBarChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of StackedHorizontalBarChart, false otherwise.
 */
declare function isStackedHorizontalBarChart(value: unknown): value is IStackedHorizontalBarChart;
type StackedHorizontalBarChartOptions = Omit<IStackedHorizontalBarChart, 'type'>;
/**
 * A stacked horizontal bar chart.
 */
declare class StackedHorizontalBarChart implements IStackedHorizontalBarChart {
    /**
     * Must be **Chart.HorizontalBar.Stacked**.
     */
    readonly type = "Chart.HorizontalBar.Stacked";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * The data to display in the chart.
     */
    data?: IStackedHorizontalBarChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: StackedHorizontalBarChartOptions);
    static from(options: Omit<IStackedHorizontalBarChart, 'type'>): StackedHorizontalBarChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withXAxisTitle(xAxisTitle: string): this;
    withYAxisTitle(yAxisTitle: string): this;
    withColor(color: ChartColor): this;
    withData(...data: IStackedHorizontalBarChartData[]): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Defines the collection of data series to display in as a stacked horizontal bar chart.
 */
interface IStackedHorizontalBarChartData {
    /**
     * The title of the series.
     */
    title?: string;
    /**
     * The data points in the series.
     */
    data?: IStackedHorizontalBarChartDataPoint[];
}
type StackedHorizontalBarChartDataOptions = IStackedHorizontalBarChartData;
/**
 * Defines the collection of data series to display in as a stacked horizontal bar chart.
 */
declare class StackedHorizontalBarChartData implements IStackedHorizontalBarChartData {
    /**
     * The title of the series.
     */
    title?: string;
    /**
     * The data points in the series.
     */
    data?: IStackedHorizontalBarChartDataPoint[];
    constructor(options?: StackedHorizontalBarChartDataOptions);
    static from(options: IStackedHorizontalBarChartData): StackedHorizontalBarChartData;
    withTitle(title: string): this;
    withData(...data: IStackedHorizontalBarChartDataPoint[]): this;
}
/**
 * A data point in a series.
 */
interface IStackedHorizontalBarChartDataPoint {
    /**
     * The legend associated with the data point.
     */
    legend?: string;
    /**
     * The value of the data point.
     */
    value?: number;
    /**
     * The color to use to render the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
}
type StackedHorizontalBarChartDataPointOptions = IStackedHorizontalBarChartDataPoint;
/**
 * A data point in a series.
 */
declare class StackedHorizontalBarChartDataPoint implements IStackedHorizontalBarChartDataPoint {
    /**
     * The legend associated with the data point.
     */
    legend?: string;
    /**
     * The value of the data point.
     */
    value?: number;
    /**
     * The color to use to render the bar associated with the data point. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    constructor(options?: StackedHorizontalBarChartDataPointOptions);
    static from(options: IStackedHorizontalBarChartDataPoint): StackedHorizontalBarChartDataPoint;
    withLegend(legend: string): this;
    withValue(value: number): this;
    withColor(color: ChartColor): this;
}
/**
 * A line chart.
 */
interface ILineChart {
    /**
     * Must be **Chart.Line**.
     */
    readonly type: 'Chart.Line';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * The data point series in the line chart.
     */
    data?: ILineChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ILineChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of LineChart, false otherwise.
 */
declare function isLineChart(value: unknown): value is ILineChart;
type LineChartOptions = Omit<ILineChart, 'type'>;
/**
 * A line chart.
 */
declare class LineChart implements ILineChart {
    /**
     * Must be **Chart.Line**.
     */
    readonly type = "Chart.Line";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The title of the x axis.
     */
    xAxisTitle?: string;
    /**
     * The title of the y axis.
     */
    yAxisTitle?: string;
    /**
     * The color to use for all data points. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    /**
     * The data point series in the line chart.
     */
    data?: ILineChartData[];
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: LineChartOptions);
    static from(options: Omit<ILineChart, 'type'>): LineChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withXAxisTitle(xAxisTitle: string): this;
    withYAxisTitle(yAxisTitle: string): this;
    withColor(color: ChartColor): this;
    withData(...data: ILineChartData[]): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents a collection of data points series in a line chart.
 */
interface ILineChartData {
    /**
     * The legend of the chart.
     */
    legend?: string;
    /**
     * The data points in the series.
     */
    values?: ILineChartValue[];
    /**
     * The color all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
}
type LineChartDataOptions = ILineChartData;
/**
 * Represents a collection of data points series in a line chart.
 */
declare class LineChartData implements ILineChartData {
    /**
     * The legend of the chart.
     */
    legend?: string;
    /**
     * The data points in the series.
     */
    values?: ILineChartValue[];
    /**
     * The color all data points in the series. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    constructor(options?: LineChartDataOptions);
    static from(options: ILineChartData): LineChartData;
    withLegend(legend: string): this;
    withValues(...values: ILineChartValue[]): this;
    withColor(color: ChartColor): this;
}
/**
 * Represents a single data point in a line chart.
 */
interface ILineChartValue {
    /**
     * The x axis value of the data point.
  
  If all x values of the x [Chart.Line](https://adaptivecards.microsoft.com/?topic=Chart.Line) are expressed as a number, or if all x values are expressed as a date string in the `YYYY-MM-DD` format, the chart will be rendered as a time series chart, i.e. x axis values will span across the minimum x value to maximum x value range.
  
  Otherwise, if x values are represented as a mix of numbers and strings or if at least one x value isn't in the `YYYY-MM-DD` format, the chart will be rendered as a categorical chart, i.e. x axis values will be displayed as categories.
     */
    x?: number | string;
    /**
     * The y axis value of the data point.
     */
    y?: number;
}
type LineChartValueOptions = ILineChartValue;
/**
 * Represents a single data point in a line chart.
 */
declare class LineChartValue implements ILineChartValue {
    /**
     * The x axis value of the data point.
  
  If all x values of the x [Chart.Line](https://adaptivecards.microsoft.com/?topic=Chart.Line) are expressed as a number, or if all x values are expressed as a date string in the `YYYY-MM-DD` format, the chart will be rendered as a time series chart, i.e. x axis values will span across the minimum x value to maximum x value range.
  
  Otherwise, if x values are represented as a mix of numbers and strings or if at least one x value isn't in the `YYYY-MM-DD` format, the chart will be rendered as a categorical chart, i.e. x axis values will be displayed as categories.
     */
    x?: number | string;
    /**
     * The y axis value of the data point.
     */
    y?: number;
    constructor(options?: LineChartValueOptions);
    static from(options: ILineChartValue): LineChartValue;
    withX(x: number | string): this;
    withY(y: number): this;
}
/**
 * A gauge chart.
 */
interface IGaugeChart {
    /**
     * Must be **Chart.Gauge**.
     */
    readonly type: 'Chart.Gauge';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The minimum value of the gauge.
     */
    min?: number;
    /**
     * The maximum value of the gauge.
     */
    max?: number;
    /**
     * The sub-label of the gauge.
     */
    subLabel?: string;
    /**
     * Controls if the min/max values should be displayed.
     */
    showMinMax?: boolean;
    /**
     * Controls if the legend should be displayed.
     */
    showLegend?: boolean;
    /**
     * The segments to display in the gauge.
     */
    segments?: IGaugeChartLegend[];
    /**
     * The value of the gauge.
     */
    value?: number;
    /**
     * The format used to display the gauge's value.
     */
    valueFormat?: GaugeChartValueFormat;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IGaugeChart.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of GaugeChart, false otherwise.
 */
declare function isGaugeChart(value: unknown): value is IGaugeChart;
type GaugeChartOptions = Omit<IGaugeChart, 'type'>;
/**
 * A gauge chart.
 */
declare class GaugeChart implements IGaugeChart {
    /**
     * Must be **Chart.Gauge**.
     */
    readonly type = "Chart.Gauge";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The title of the chart.
     */
    title?: string;
    /**
     * The name of the set of colors to use to render the chart. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    colorSet?: ChartColorSet;
    /**
     * The minimum value of the gauge.
     */
    min?: number;
    /**
     * The maximum value of the gauge.
     */
    max?: number;
    /**
     * The sub-label of the gauge.
     */
    subLabel?: string;
    /**
     * Controls if the min/max values should be displayed.
     */
    showMinMax?: boolean;
    /**
     * Controls if the legend should be displayed.
     */
    showLegend?: boolean;
    /**
     * The segments to display in the gauge.
     */
    segments?: IGaugeChartLegend[];
    /**
     * The value of the gauge.
     */
    value?: number;
    /**
     * The format used to display the gauge's value.
     */
    valueFormat?: GaugeChartValueFormat;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: GaugeChartOptions);
    static from(options: Omit<IGaugeChart, 'type'>): GaugeChart;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withTitle(title: string): this;
    withColorSet(colorSet: ChartColorSet): this;
    withMin(min: number): this;
    withMax(max: number): this;
    withSubLabel(subLabel: string): this;
    withShowMinMax(showMinMax?: boolean): this;
    withShowLegend(showLegend?: boolean): this;
    withSegments(...segments: IGaugeChartLegend[]): this;
    withValue(value: number): this;
    withValueFormat(valueFormat: GaugeChartValueFormat): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * The legend of the chart.
 */
interface IGaugeChartLegend {
    /**
     * The size of the segment.
     */
    size?: number;
    /**
     * The legend text associated with the segment.
     */
    legend?: string;
    /**
     * The color to use for the segment. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
}
type GaugeChartLegendOptions = IGaugeChartLegend;
/**
 * The legend of the chart.
 */
declare class GaugeChartLegend implements IGaugeChartLegend {
    /**
     * The size of the segment.
     */
    size?: number;
    /**
     * The legend text associated with the segment.
     */
    legend?: string;
    /**
     * The color to use for the segment. See [Chart colors reference](https://adaptivecards.microsoft.com/?topic=chart-colors-reference).
     */
    color?: ChartColor;
    constructor(options?: GaugeChartLegendOptions);
    static from(options: IGaugeChartLegend): GaugeChartLegend;
    withSize(size: number): this;
    withLegend(legend: string): this;
    withColor(color: ChartColor): this;
}
/**
 * A formatted and syntax-colored code block.
 */
interface ICodeBlock {
    /**
     * Must be **CodeBlock**.
     */
    readonly type: 'CodeBlock';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The code snippet to display.
     */
    codeSnippet?: string;
    /**
     * The language the code snippet is expressed in.
     */
    language?: 'Bash' | 'C' | 'Cpp' | 'CSharp' | 'Css' | 'Dos' | 'Go' | 'Graphql' | 'Html' | 'Java' | 'JavaScript' | 'Json' | 'ObjectiveC' | 'Perl' | 'Php' | 'PlainText' | 'PowerShell' | 'Python' | 'Sql' | 'TypeScript' | 'VbNet' | 'Verilog' | 'Vhdl' | 'Xml';
    /**
     * A number that represents the line in the file from where the code snippet was extracted.
     */
    startLineNumber?: number;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ICodeBlock.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of CodeBlock, false otherwise.
 */
declare function isCodeBlock(value: unknown): value is ICodeBlock;
type CodeBlockOptions = Omit<ICodeBlock, 'type'>;
/**
 * A formatted and syntax-colored code block.
 */
declare class CodeBlock implements ICodeBlock {
    /**
     * Must be **CodeBlock**.
     */
    readonly type = "CodeBlock";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The code snippet to display.
     */
    codeSnippet?: string;
    /**
     * The language the code snippet is expressed in.
     */
    language?: 'Bash' | 'C' | 'Cpp' | 'CSharp' | 'Css' | 'Dos' | 'Go' | 'Graphql' | 'Html' | 'Java' | 'JavaScript' | 'Json' | 'ObjectiveC' | 'Perl' | 'Php' | 'PlainText' | 'PowerShell' | 'Python' | 'Sql' | 'TypeScript' | 'VbNet' | 'Verilog' | 'Vhdl' | 'Xml';
    /**
     * A number that represents the line in the file from where the code snippet was extracted.
     */
    startLineNumber?: number;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: CodeBlockOptions);
    static from(options: Omit<ICodeBlock, 'type'>): CodeBlock;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withCodeSnippet(codeSnippet: string): this;
    withLanguage(language: 'Bash' | 'C' | 'Cpp' | 'CSharp' | 'Css' | 'Dos' | 'Go' | 'Graphql' | 'Html' | 'Java' | 'JavaScript' | 'Json' | 'ObjectiveC' | 'Perl' | 'Php' | 'PlainText' | 'PowerShell' | 'Python' | 'Sql' | 'TypeScript' | 'VbNet' | 'Verilog' | 'Vhdl' | 'Xml'): this;
    withStartLineNumber(startLineNumber: number): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Displays a user's information, including their profile picture.
 */
interface IComUserMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type: 'Component';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/user**.
     */
    readonly name: 'graph.microsoft.com/user';
    /**
     * The properties of the user.
     */
    properties?: IPersonaProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IComUserMicrosoftGraphComponent.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ComUserMicrosoftGraphComponent, false otherwise.
 */
declare function isComUserMicrosoftGraphComponent(value: unknown): value is IComUserMicrosoftGraphComponent;
type ComUserMicrosoftGraphComponentOptions = Omit<IComUserMicrosoftGraphComponent, 'type' | 'name'>;
/**
 * Displays a user's information, including their profile picture.
 */
declare class ComUserMicrosoftGraphComponent implements IComUserMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type = "Component";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/user**.
     */
    readonly name = "graph.microsoft.com/user";
    /**
     * The properties of the user.
     */
    properties?: IPersonaProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: ComUserMicrosoftGraphComponentOptions);
    static from(options: Omit<IComUserMicrosoftGraphComponent, 'type' | 'name'>): ComUserMicrosoftGraphComponent;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withProperties(properties: IPersonaProperties): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents the properties of a Persona component.
 */
interface IPersonaProperties {
    /**
     * The UPN of the persona.
     */
    userPrincipalName?: string;
    /**
     * The display name of the persona.
     */
    displayName?: string;
}
type PersonaPropertiesOptions = IPersonaProperties;
/**
 * Represents the properties of a Persona component.
 */
declare class PersonaProperties implements IPersonaProperties {
    /**
     * The UPN of the persona.
     */
    userPrincipalName?: string;
    /**
     * The display name of the persona.
     */
    displayName?: string;
    constructor(options?: PersonaPropertiesOptions);
    static from(options: IPersonaProperties): PersonaProperties;
    withUserPrincipalName(userPrincipalName: string): this;
    withDisplayName(displayName: string): this;
}
/**
 * Displays multiple users' information, including their profile pictures.
 */
interface IComUsersMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type: 'Component';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/users**.
     */
    readonly name: 'graph.microsoft.com/users';
    /**
     * The properties of the set.
     */
    properties?: IPersonaSetProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IComUsersMicrosoftGraphComponent.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ComUsersMicrosoftGraphComponent, false otherwise.
 */
declare function isComUsersMicrosoftGraphComponent(value: unknown): value is IComUsersMicrosoftGraphComponent;
type ComUsersMicrosoftGraphComponentOptions = Omit<IComUsersMicrosoftGraphComponent, 'type' | 'name'>;
/**
 * Displays multiple users' information, including their profile pictures.
 */
declare class ComUsersMicrosoftGraphComponent implements IComUsersMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type = "Component";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/users**.
     */
    readonly name = "graph.microsoft.com/users";
    /**
     * The properties of the set.
     */
    properties?: IPersonaSetProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: ComUsersMicrosoftGraphComponentOptions);
    static from(options: Omit<IComUsersMicrosoftGraphComponent, 'type' | 'name'>): ComUsersMicrosoftGraphComponent;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withProperties(properties: IPersonaSetProperties): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents the properties of a PersonaSet component.
 */
interface IPersonaSetProperties {
    /**
     * The users a PersonaSet component should display.
     */
    users?: IPersonaProperties[];
}
type PersonaSetPropertiesOptions = IPersonaSetProperties;
/**
 * Represents the properties of a PersonaSet component.
 */
declare class PersonaSetProperties implements IPersonaSetProperties {
    /**
     * The users a PersonaSet component should display.
     */
    users?: IPersonaProperties[];
    constructor(options?: PersonaSetPropertiesOptions);
    static from(options: IPersonaSetProperties): PersonaSetProperties;
    withUsers(...users: IPersonaProperties[]): this;
}
/**
 * Displays information about a generic graph resource.
 */
interface IComResourceMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type: 'Component';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/resource**.
     */
    readonly name: 'graph.microsoft.com/resource';
    /**
     * The properties of the resource.
     */
    properties?: IResourceProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IComResourceMicrosoftGraphComponent.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ComResourceMicrosoftGraphComponent, false otherwise.
 */
declare function isComResourceMicrosoftGraphComponent(value: unknown): value is IComResourceMicrosoftGraphComponent;
type ComResourceMicrosoftGraphComponentOptions = Omit<IComResourceMicrosoftGraphComponent, 'type' | 'name'>;
/**
 * Displays information about a generic graph resource.
 */
declare class ComResourceMicrosoftGraphComponent implements IComResourceMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type = "Component";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/resource**.
     */
    readonly name = "graph.microsoft.com/resource";
    /**
     * The properties of the resource.
     */
    properties?: IResourceProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: ComResourceMicrosoftGraphComponentOptions);
    static from(options: Omit<IComResourceMicrosoftGraphComponent, 'type' | 'name'>): ComResourceMicrosoftGraphComponent;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withProperties(properties: IResourceProperties): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents the properties of a resource component.
 */
interface IResourceProperties {
    /**
     * The Id of the resource.
     */
    id?: string;
    /**
     * The reference to the resource.
     */
    resourceReference?: Record<string, string>;
    /**
     * The visualization of the resource.
     */
    resourceVisualization?: IResourceVisualization;
}
type ResourcePropertiesOptions = IResourceProperties;
/**
 * Represents the properties of a resource component.
 */
declare class ResourceProperties implements IResourceProperties {
    /**
     * The Id of the resource.
     */
    id?: string;
    /**
     * The reference to the resource.
     */
    resourceReference?: Record<string, string>;
    /**
     * The visualization of the resource.
     */
    resourceVisualization?: IResourceVisualization;
    constructor(options?: ResourcePropertiesOptions);
    static from(options: IResourceProperties): ResourceProperties;
    withId(id: string): this;
    withResourceReference(resourceReference: Record<string, string>): this;
    withResourceVisualization(resourceVisualization: IResourceVisualization): this;
}
/**
 * Represents a visualization of a resource.
 */
interface IResourceVisualization {
    /**
     * The media associated with the resource.
     */
    media?: string;
}
type ResourceVisualizationOptions = IResourceVisualization;
/**
 * Represents a visualization of a resource.
 */
declare class ResourceVisualization implements IResourceVisualization {
    /**
     * The media associated with the resource.
     */
    media?: string;
    constructor(options?: ResourceVisualizationOptions);
    static from(options: IResourceVisualization): ResourceVisualization;
    withMedia(media: string): this;
}
/**
 * Displays information about a file resource.
 */
interface IComFileMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type: 'Component';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/file**.
     */
    readonly name: 'graph.microsoft.com/file';
    /**
     * The properties of the file.
     */
    properties?: IFileProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IComFileMicrosoftGraphComponent.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ComFileMicrosoftGraphComponent, false otherwise.
 */
declare function isComFileMicrosoftGraphComponent(value: unknown): value is IComFileMicrosoftGraphComponent;
type ComFileMicrosoftGraphComponentOptions = Omit<IComFileMicrosoftGraphComponent, 'type' | 'name'>;
/**
 * Displays information about a file resource.
 */
declare class ComFileMicrosoftGraphComponent implements IComFileMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type = "Component";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/file**.
     */
    readonly name = "graph.microsoft.com/file";
    /**
     * The properties of the file.
     */
    properties?: IFileProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: ComFileMicrosoftGraphComponentOptions);
    static from(options: Omit<IComFileMicrosoftGraphComponent, 'type' | 'name'>): ComFileMicrosoftGraphComponent;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withProperties(properties: IFileProperties): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * Represents the properties of a file component.
 */
interface IFileProperties {
    /**
     * The name of the file.
     */
    name?: string;
    /**
     * The file extension.
     */
    extension?: string;
    /**
     * The URL of the file.
     */
    url?: string;
}
type FilePropertiesOptions = IFileProperties;
/**
 * Represents the properties of a file component.
 */
declare class FileProperties implements IFileProperties {
    /**
     * The name of the file.
     */
    name?: string;
    /**
     * The file extension.
     */
    extension?: string;
    /**
     * The URL of the file.
     */
    url?: string;
    constructor(options?: FilePropertiesOptions);
    static from(options: IFileProperties): FileProperties;
    withName(name: string): this;
    withExtension(extension: string): this;
    withUrl(url: string): this;
}
/**
 * Displays information about a calendar event.
 */
interface IComEventMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type: 'Component';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/event**.
     */
    readonly name: 'graph.microsoft.com/event';
    /**
     * The properties of the event.
     */
    properties?: ICalendarEventProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IComEventMicrosoftGraphComponent.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of ComEventMicrosoftGraphComponent, false otherwise.
 */
declare function isComEventMicrosoftGraphComponent(value: unknown): value is IComEventMicrosoftGraphComponent;
type ComEventMicrosoftGraphComponentOptions = Omit<IComEventMicrosoftGraphComponent, 'type' | 'name'>;
/**
 * Displays information about a calendar event.
 */
declare class ComEventMicrosoftGraphComponent implements IComEventMicrosoftGraphComponent {
    /**
     * Must be **Component**.
     */
    readonly type = "Component";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Must be **graph.microsoft.com/event**.
     */
    readonly name = "graph.microsoft.com/event";
    /**
     * The properties of the event.
     */
    properties?: ICalendarEventProperties;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(options?: ComEventMicrosoftGraphComponentOptions);
    static from(options: Omit<IComEventMicrosoftGraphComponent, 'type' | 'name'>): ComEventMicrosoftGraphComponent;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withProperties(properties: ICalendarEventProperties): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * The properties of a calendar event.
 */
interface ICalendarEventProperties {
    /**
     * The ID of the event.
     */
    id?: string;
    /**
     * The title of the event.
     */
    title?: string;
    /**
     * The start date and time of the event.
     */
    start?: string;
    /**
     * The end date and time of the event.
     */
    end?: string;
    /**
     * The status of the event.
     */
    status?: string;
    /**
     * The locations of the event.
     */
    locations?: string[];
    /**
     * The URL of the online meeting.
     */
    onlineMeetingUrl?: string;
    /**
     * Indicates if the event is all day.
     */
    isAllDay?: boolean;
    /**
     * The extension of the event.
     */
    extension?: string;
    /**
     * The URL of the event.
     */
    url?: string;
    /**
     * The attendees of the event.
     */
    attendees?: ICalendarEventAttendee[];
    /**
     * The organizer of the event.
     */
    organizer?: ICalendarEventAttendee;
}
type CalendarEventPropertiesOptions = ICalendarEventProperties;
/**
 * The properties of a calendar event.
 */
declare class CalendarEventProperties implements ICalendarEventProperties {
    /**
     * The ID of the event.
     */
    id?: string;
    /**
     * The title of the event.
     */
    title?: string;
    /**
     * The start date and time of the event.
     */
    start?: string;
    /**
     * The end date and time of the event.
     */
    end?: string;
    /**
     * The status of the event.
     */
    status?: string;
    /**
     * The locations of the event.
     */
    locations?: string[];
    /**
     * The URL of the online meeting.
     */
    onlineMeetingUrl?: string;
    /**
     * Indicates if the event is all day.
     */
    isAllDay?: boolean;
    /**
     * The extension of the event.
     */
    extension?: string;
    /**
     * The URL of the event.
     */
    url?: string;
    /**
     * The attendees of the event.
     */
    attendees?: ICalendarEventAttendee[];
    /**
     * The organizer of the event.
     */
    organizer?: ICalendarEventAttendee;
    constructor(options?: CalendarEventPropertiesOptions);
    static from(options: ICalendarEventProperties): CalendarEventProperties;
    withId(id: string): this;
    withTitle(title: string): this;
    withStart(start: string): this;
    withEnd(end: string): this;
    withStatus(status: string): this;
    withLocations(...locations: string[]): this;
    withOnlineMeetingUrl(onlineMeetingUrl: string): this;
    withIsAllDay(isAllDay: boolean): this;
    withExtension(extension: string): this;
    withUrl(url: string): this;
    withAttendees(...attendees: ICalendarEventAttendee[]): this;
    withOrganizer(organizer: ICalendarEventAttendee): this;
}
/**
 * Represents a calendar event attendee.
 */
interface ICalendarEventAttendee {
    /**
     * The name of the attendee.
     */
    name?: string;
    /**
     * The email address of the attendee.
     */
    email?: string;
    /**
     * The title of the attendee.
     */
    title?: string;
    /**
     * The type of the attendee.
     */
    type?: string;
    /**
     * The status of the attendee.
     */
    status?: string;
}
type CalendarEventAttendeeOptions = ICalendarEventAttendee;
/**
 * Represents a calendar event attendee.
 */
declare class CalendarEventAttendee implements ICalendarEventAttendee {
    /**
     * The name of the attendee.
     */
    name?: string;
    /**
     * The email address of the attendee.
     */
    email?: string;
    /**
     * The title of the attendee.
     */
    title?: string;
    /**
     * The type of the attendee.
     */
    type?: string;
    /**
     * The status of the attendee.
     */
    status?: string;
    constructor(options?: CalendarEventAttendeeOptions);
    static from(options: ICalendarEventAttendee): CalendarEventAttendee;
    withName(name: string): this;
    withEmail(email: string): this;
    withTitle(title: string): this;
    withType(type: string): this;
    withStatus(status: string): this;
}
/**
 * A page inside a Carousel element.
 */
interface ICarouselPage {
    /**
     * Must be **CarouselPage**.
     */
    readonly type: 'CarouselPage';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The elements in the page.
     */
    items: CardElementArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ICarouselPage.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of CarouselPage, false otherwise.
 */
declare function isCarouselPage(value: unknown): value is ICarouselPage;
type CarouselPageOptions = Omit<ICarouselPage, 'type' | 'items'>;
/**
 * A page inside a Carousel element.
 */
declare class CarouselPage implements ICarouselPage {
    /**
     * Must be **CarouselPage**.
     */
    readonly type = "CarouselPage";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The elements in the page.
     */
    items: CardElementArray;
    constructor(...items: CardElementArray);
    withOptions(value: CarouselPageOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withHeight(height: ElementHeight): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withStyle(style: ContainerStyle): this;
    withShowBorder(showBorder?: boolean): this;
    withRoundedCorners(roundedCorners?: boolean): this;
    withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this;
    withMinHeight(minHeight: string): this;
    withBackgroundImage(backgroundImage: string | IBackgroundImage): this;
    withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this;
    withRtl(rtl: boolean): this;
    withMaxHeight(maxHeight: string): this;
    withFallback(fallback: FallbackElement): this;
    withItems(...items: CardElementArray): this;
}
/**
 * Represents a row of cells in a table.
 */
interface ITableRow {
    /**
     * Must be **TableRow**.
     */
    readonly type: 'TableRow';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls how the content of every cell in the row should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table and columns.
     */
    horizontalCellContentAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of every cell in the row should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table and columns.
     */
    verticalCellContentAlignment?: VerticalAlignment;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The cells in the row.
     */
    cells?: TableCellArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ITableRow.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of TableRow, false otherwise.
 */
declare function isTableRow(value: unknown): value is ITableRow;
type TableRowOptions = Omit<ITableRow, 'type'>;
/**
 * Represents a row of cells in a table.
 */
declare class TableRow implements ITableRow {
    /**
     * Must be **TableRow**.
     */
    readonly type = "TableRow";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls how the content of every cell in the row should be horizontally aligned by default. This property overrides the horizontalCellContentAlignment property of the table and columns.
     */
    horizontalCellContentAlignment?: HorizontalAlignment;
    /**
     * Controls how the content of every cell in the row should be vertically aligned by default. This property overrides the verticalCellContentAlignment property of the table and columns.
     */
    verticalCellContentAlignment?: VerticalAlignment;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The cells in the row.
     */
    cells?: TableCellArray;
    constructor(options?: TableRowOptions);
    static from(options: Omit<ITableRow, 'type'>): TableRow;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withShowBorder(showBorder?: boolean): this;
    withRoundedCorners(roundedCorners?: boolean): this;
    withStyle(style: ContainerStyle): this;
    withHorizontalCellContentAlignment(horizontalCellContentAlignment: HorizontalAlignment): this;
    withVerticalCellContentAlignment(verticalCellContentAlignment: VerticalAlignment): this;
    withFallback(fallback: FallbackElement): this;
    withCells(...cells: TableCellArray): this;
}
/**
 * Represents a cell in a table row.
 */
interface ITableCell {
    /**
     * Must be **TableCell**.
     */
    readonly type: 'TableCell';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The items (elements) in the cell.
     */
    items: CardElementArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ITableCell.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of TableCell, false otherwise.
 */
declare function isTableCell(value: unknown): value is ITableCell;
type TableCellOptions = Omit<ITableCell, 'type' | 'items'>;
/**
 * Represents a cell in a table row.
 */
declare class TableCell implements ITableCell {
    /**
     * Must be **TableCell**.
     */
    readonly type = "TableCell";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The items (elements) in the cell.
     */
    items: CardElementArray;
    constructor(...items: CardElementArray);
    withOptions(value: TableCellOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withStyle(style: ContainerStyle): this;
    withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this;
    withBleed(bleed?: boolean): this;
    withMinHeight(minHeight: string): this;
    withBackgroundImage(backgroundImage: string | IBackgroundImage): this;
    withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this;
    withRtl(rtl: boolean): this;
    withMaxHeight(maxHeight: string): this;
    withFallback(fallback: FallbackElement): this;
    withItems(...items: CardElementArray): this;
}
/**
 * A block of text inside a RichTextBlock element.
 */
interface ITextRun {
    /**
     * Must be **TextRun**.
     */
    readonly type: 'TextRun';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The text to display. A subset of markdown is supported.
     */
    text: string;
    /**
     * The size of the text.
     */
    size?: TextSize;
    /**
     * The weight of the text.
     */
    weight?: TextWeight;
    /**
     * The color of the text.
     */
    color?: TextColor;
    /**
     * Controls whether the text should be renderer using a subtler variant of the select color.
     */
    isSubtle?: boolean;
    /**
     * The type of font to use for rendering.
     */
    fontType?: FontType;
    /**
     * Controls if the text should be italicized.
     */
    italic?: boolean;
    /**
     * Controls if the text should be struck through.
     */
    strikethrough?: boolean;
    /**
     * Controls if the text should be highlighted.
     */
    highlight?: boolean;
    /**
     * Controls if the text should be underlined.
     */
    underline?: boolean;
    /**
     * An Action that will be invoked when the text is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type ITextRun.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of TextRun, false otherwise.
 */
declare function isTextRun(value: unknown): value is ITextRun;
type TextRunOptions = Omit<ITextRun, 'type' | 'text'>;
/**
 * A block of text inside a RichTextBlock element.
 */
declare class TextRun implements ITextRun {
    /**
     * Must be **TextRun**.
     */
    readonly type = "TextRun";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * The text to display. A subset of markdown is supported.
     */
    text: string;
    /**
     * The size of the text.
     */
    size?: TextSize;
    /**
     * The weight of the text.
     */
    weight?: TextWeight;
    /**
     * The color of the text.
     */
    color?: TextColor;
    /**
     * Controls whether the text should be renderer using a subtler variant of the select color.
     */
    isSubtle?: boolean;
    /**
     * The type of font to use for rendering.
     */
    fontType?: FontType;
    /**
     * Controls if the text should be italicized.
     */
    italic?: boolean;
    /**
     * Controls if the text should be struck through.
     */
    strikethrough?: boolean;
    /**
     * Controls if the text should be highlighted.
     */
    highlight?: boolean;
    /**
     * Controls if the text should be underlined.
     */
    underline?: boolean;
    /**
     * An Action that will be invoked when the text is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    constructor(text: string, options?: TextRunOptions);
    static from(options: Omit<ITextRun, 'type'>): TextRun;
    withId(id: string): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withIsSortKey(isSortKey?: boolean): this;
    withText(text: string): this;
    withSize(size: TextSize): this;
    withWeight(weight: TextWeight): this;
    withColor(color: TextColor): this;
    withIsSubtle(isSubtle: boolean): this;
    withFontType(fontType: FontType): this;
    withItalic(italic?: boolean): this;
    withStrikethrough(strikethrough?: boolean): this;
    withHighlight(highlight?: boolean): this;
    withUnderline(underline?: boolean): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withFallback(fallback: FallbackElement): this;
}
/**
 * A column in a ColumnSet element.
 */
interface IColumn {
    /**
     * Optional. If specified, must be **Column**.
     */
    readonly type: 'Column';
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The width of the column. If expressed as a number, represents the relative weight of the column in the set. If expressed as a string, `auto` will automatically adjust the column's width according to its content, `stretch` will make the column use the remaining horizontal space (shared with other columns with width set to `stretch`) and using the `<number>px` format will give the column an explicit width in pixels.
     */
    width?: 'auto' | 'stretch' | string | number;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The elements in the column.
     */
    items: CardElementArray;
}
/**
 * @hidden
 * @internal
 *
 * Type guard to check if a value is of type IColumn.
 *
 * @param value The value to check.
 * @returns True if the value is an instance of Column, false otherwise.
 */
declare function isColumn(value: unknown): value is IColumn;
type ColumnOptions = Omit<IColumn, 'type' | 'items'>;
/**
 * A column in a ColumnSet element.
 */
declare class Column implements IColumn {
    /**
     * Optional. If specified, must be **Column**.
     */
    readonly type = "Column";
    /**
     * A unique identifier for the element or action. Input elements must have an id, otherwise they will not be validated and their values will not be sent to the Bot.
     */
    id?: string;
    /**
     * A list of capabilities the element requires the host application to support. If the host application doesn't support at least one of the listed capabilities, the element is not rendered (or its fallback is rendered if provided).
     */
    requires?: IHostCapabilities;
    /**
     * The locale associated with the element.
     */
    lang?: string;
    /**
     * Controls the visibility of the element.
     */
    isVisible?: boolean;
    /**
     * Controls whether a separator line should be displayed above the element to visually separate it from the previous element. No separator will be displayed for the first element in a container, even if this property is set to true.
     */
    separator?: boolean;
    /**
     * The height of the element. When set to stretch, the element will use the remaining vertical space in its container.
     */
    height?: ElementHeight;
    /**
     * Controls how the element should be horizontally aligned.
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * Controls the amount of space between this element and the previous one. No space will be added for the first element in a container.
     */
    spacing?: Spacing;
    /**
     * Controls for which card width the element should be displayed. If targetWidth isn't specified, the element is rendered at all card widths. Using targetWidth makes it possible to author responsive cards that adapt their layout to the available horizontal space. For more details, see [Responsive layout](https://adaptivecards.microsoft.com/?topic=responsive-layout).
     */
    targetWidth?: TargetWidth;
    /**
     * Controls whether the element should be used as a sort key by elements that allow sorting across a collection of elements.
     */
    isSortKey?: boolean;
    /**
     * An Action that will be invoked when the element is tapped or clicked. Action.ShowCard is not supported.
     */
    selectAction?: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction;
    /**
     * The style of the container. Container styles control the colors of the background, border and text inside the container, in such a way that contrast requirements are always met.
     */
    style?: ContainerStyle;
    /**
     * Controls if a border should be displayed around the container.
     */
    showBorder?: boolean;
    /**
     * Controls if the container should have rounded corners.
     */
    roundedCorners?: boolean;
    /**
     * The layouts associated with the container. The container can dynamically switch from one layout to another as the card's width changes. See [Container layouts](https://adaptivecards.microsoft.com/?topic=container-layouts) for more details.
     */
    layouts?: (IStackLayout | IFlowLayout | IAreaGridLayout)[];
    /**
     * Controls if the container should bleed into its parent. A bleeding container extends into its parent's padding.
     */
    bleed?: boolean;
    /**
     * The minimum height, in pixels, of the container, in the `<number>px` format.
     */
    minHeight?: string;
    /**
     * Defines the container's background image.
     */
    backgroundImage?: string | IBackgroundImage;
    /**
     * Controls how the container's content should be vertically aligned.
     */
    verticalContentAlignment?: VerticalAlignment;
    /**
     * Controls if the content of the card is to be rendered left-to-right or right-to-left.
     */
    rtl?: boolean;
    /**
     * The maximum height, in pixels, of the container, in the `<number>px` format. When the content of a container exceeds the container's maximum height, a vertical scrollbar is displayed.
     */
    maxHeight?: string;
    /**
     * The width of the column. If expressed as a number, represents the relative weight of the column in the set. If expressed as a string, `auto` will automatically adjust the column's width according to its content, `stretch` will make the column use the remaining horizontal space (shared with other columns with width set to `stretch`) and using the `<number>px` format will give the column an explicit width in pixels.
     */
    width?: 'auto' | 'stretch' | string | number;
    /**
     * The area of a Layout.AreaGrid layout in which an element should be displayed.
     */
    'grid.area'?: string;
    /**
     * An alternate element to render if the type of this one is unsupported or if the host application doesn't support all the capabilities specified in the requires property.
     */
    fallback?: FallbackElement;
    /**
     * The elements in the column.
     */
    items: CardElementArray;
    constructor(...items: CardElementArray);
    withOptions(value: ColumnOptions): this;
    withId(id: string): this;
    withRequires(requires: IHostCapabilities): this;
    withLang(lang: string): this;
    withIsVisible(isVisible?: boolean): this;
    withSeparator(separator?: boolean): this;
    withHeight(height: ElementHeight): this;
    withHorizontalAlignment(horizontalAlignment: HorizontalAlignment): this;
    withSpacing(spacing: Spacing): this;
    withTargetWidth(targetWidth: TargetWidth): this;
    withIsSortKey(isSortKey?: boolean): this;
    withSelectAction(selectAction: IExecuteAction | IOpenUrlAction | IResetInputsAction | ISubmitAction | IToggleVisibilityAction): this;
    withStyle(style: ContainerStyle): this;
    withShowBorder(showBorder?: boolean): this;
    withRoundedCorners(roundedCorners?: boolean): this;
    withLayouts(...layouts: (IStackLayout | IFlowLayout | IAreaGridLayout)[]): this;
    withBleed(bleed?: boolean): this;
    withMinHeight(minHeight: string): this;
    withBackgroundImage(backgroundImage: string | IBackgroundImage): this;
    withVerticalContentAlignment(verticalContentAlignment: VerticalAlignment): this;
    withRtl(rtl: boolean): this;
    withMaxHeight(maxHeight: string): this;
    withWidth(width: 'auto' | 'stretch' | string | number): this;
    withFallback(fallback: FallbackElement): this;
    withItems(...items: CardElementArray): this;
}

export { type ActionArray, type ActionMode, ActionSet, type ActionSetOptions, type ActionStyle, AdaptiveCard, type AdaptiveCardOptions, AreaGridLayout, type AreaGridLayoutOptions, AuthCardButton, type AuthCardButtonOptions, Authentication, type AuthenticationOptions, BackgroundImage, type BackgroundImageOptions, Badge, type BadgeAppearance, type BadgeIconPosition, type BadgeOptions, type BadgeShape, type BadgeSize, type BadgeStyle, BarChartDataValue, type BarChartDataValueOptions, CalendarEventAttendee, type CalendarEventAttendeeOptions, CalendarEventProperties, type CalendarEventPropertiesOptions, CaptionSource, type CaptionSourceOptions, type CardAction, type CardElement, type CardElementArray, CardMetadata, type CardMetadataOptions, Carousel, type CarouselOptions, CarouselPage, type CarouselPageAnimation, type CarouselPageOptions, type ChartColor, type ChartColorSet, Choice, type ChoiceOptions, ChoiceSetInput, type ChoiceSetInputOptions, CodeBlock, type CodeBlockOptions, Column, type ColumnArray, ColumnDefinition, type ColumnDefinitionOptions, type ColumnOptions, ColumnSet, type ColumnSetOptions, ComEventMicrosoftGraphComponent, type ComEventMicrosoftGraphComponentOptions, ComFileMicrosoftGraphComponent, type ComFileMicrosoftGraphComponentOptions, ComResourceMicrosoftGraphComponent, type ComResourceMicrosoftGraphComponentOptions, ComUserMicrosoftGraphComponent, type ComUserMicrosoftGraphComponentOptions, ComUsersMicrosoftGraphComponent, type ComUsersMicrosoftGraphComponentOptions, CompoundButton, type CompoundButtonOptions, Container, type ContainerOptions, type ContainerStyle, DateInput, type DateInputOptions, DonutChart, DonutChartData, type DonutChartDataOptions, type DonutChartOptions, type ElementHeight, ExecuteAction, type ExecuteActionOptions, Fact, type FactOptions, FactSet, type FactSetOptions, type FallbackAction, type FallbackElement, FileProperties, type FilePropertiesOptions, type FillMode, FlowLayout, type FlowLayoutItemFit, type FlowLayoutOptions, type FontType, GaugeChart, GaugeChartLegend, type GaugeChartLegendOptions, type GaugeChartOptions, type GaugeChartValueFormat, GridArea, type GridAreaOptions, GroupedVerticalBarChart, GroupedVerticalBarChartData, type GroupedVerticalBarChartDataOptions, type GroupedVerticalBarChartOptions, type HorizontalAlignment, HorizontalBarChart, HorizontalBarChartDataValue, type HorizontalBarChartDataValueOptions, type HorizontalBarChartDisplayMode, type HorizontalBarChartOptions, HostCapabilities, type IActionSet, type IAdaptiveCard, type IAreaGridLayout, type IAuthCardButton, type IAuthentication, type IBackgroundImage, type IBadge, type IBarChartDataValue, type ICalendarEventAttendee, type ICalendarEventProperties, type ICaptionSource, type ICardMetadata, type ICarousel, type ICarouselPage, type IChoice, type IChoiceSetInput, type ICodeBlock, type IColumn, type IColumnDefinition, type IColumnSet, type IComEventMicrosoftGraphComponent, type IComFileMicrosoftGraphComponent, type IComResourceMicrosoftGraphComponent, type IComUserMicrosoftGraphComponent, type IComUsersMicrosoftGraphComponent, type ICompoundButton, type IContainer, type IDateInput, type IDonutChart, type IDonutChartData, type IExecuteAction, type IFact, type IFactSet, type IFileProperties, type IFlowLayout, type IGaugeChart, type IGaugeChartLegend, type IGridArea, type IGroupedVerticalBarChart, type IGroupedVerticalBarChartData, type IHorizontalBarChart, type IHorizontalBarChartDataValue, type IHostCapabilities, type IIcon, type IIconInfo, type IImage, type IImageSet, type ILineChart, type ILineChartData, type ILineChartValue, type IMedia, type IMediaSource, type IMention, type IMentionedEntity, type INumberInput, type IOpenUrlAction, type IPersonaProperties, type IPersonaSetProperties, type IPieChart, type IQueryData, type IRating, type IRatingInput, type IRefreshDefinition, type IResetInputsAction, type IResourceProperties, type IResourceVisualization, type IRichTextBlock, type IShowCardAction, type IStackLayout, type IStackedHorizontalBarChart, type IStackedHorizontalBarChartData, type IStackedHorizontalBarChartDataPoint, type ISubmitAction, type ITable, type ITableCell, type ITableRow, type ITargetElement, type ITeamsCardProperties, type ITeamsImageProperties, type ITeamsSubmitActionFeedback, type ITeamsSubmitActionProperties, type ITextBlock, type ITextInput, type ITextRun, type ITimeInput, type IToggleInput, type IToggleVisibilityAction, type ITokenExchangeResource, type IVerticalBarChart, type IVerticalBarChartDataValue, Icon, IconInfo, type IconInfoOptions, type IconName, type IconOptions, type IconSize, type IconStyle, Image, type ImageOptions, ImageSet, type ImageSetOptions, type ImageSize, type ImageStyle, type InputTextStyle, LineChart, LineChartData, type LineChartDataOptions, type LineChartOptions, LineChartValue, type LineChartValueOptions, Media, type MediaOptions, MediaSource, type MediaSourceOptions, Mention, type MentionOptions, type MentionType, MentionedEntity, type MentionedEntityOptions, NumberInput, type NumberInputOptions, OpenUrlAction, type OpenUrlActionOptions, PersonaProperties, type PersonaPropertiesOptions, PersonaSetProperties, type PersonaSetPropertiesOptions, PieChart, type PieChartOptions, QueryData, type QueryDataOptions, Rating, type RatingColor, RatingInput, type RatingInputOptions, type RatingOptions, type RatingSize, type RatingStyle, RefreshDefinition, type RefreshDefinitionOptions, ResetInputsAction, type ResetInputsActionOptions, ResourceProperties, type ResourcePropertiesOptions, ResourceVisualization, type ResourceVisualizationOptions, RichTextBlock, type RichTextBlockInlineArray, type RichTextBlockOptions, ShowCardAction, type ShowCardActionOptions, type Size, type Spacing, StackLayout, type StackLayoutOptions, StackedHorizontalBarChart, StackedHorizontalBarChartData, type StackedHorizontalBarChartDataOptions, StackedHorizontalBarChartDataPoint, type StackedHorizontalBarChartDataPointOptions, type StackedHorizontalBarChartOptions, SubmitAction, type SubmitActionOptions, Table, TableCell, type TableCellArray, type TableCellOptions, type TableOptions, TableRow, type TableRowArray, type TableRowOptions, TargetElement, type TargetElementOptions, type TargetWidth, TeamsCardProperties, type TeamsCardPropertiesOptions, TeamsImageProperties, type TeamsImagePropertiesOptions, TeamsSubmitActionFeedback, type TeamsSubmitActionFeedbackOptions, TeamsSubmitActionProperties, type TeamsSubmitActionPropertiesOptions, TextBlock, type TextBlockOptions, type TextColor, TextInput, type TextInputOptions, TextRun, type TextRunOptions, type TextSize, type TextWeight, TimeInput, type TimeInputOptions, ToggleInput, type ToggleInputOptions, ToggleVisibilityAction, type ToggleVisibilityActionOptions, TokenExchangeResource, type TokenExchangeResourceOptions, type VerticalAlignment, VerticalBarChart, VerticalBarChartDataValue, type VerticalBarChartDataValueOptions, type VerticalBarChartOptions, isActionSet, isAdaptiveCard, isAreaGridLayout, isBadge, isCarousel, isCarouselPage, isChoiceSetInput, isCodeBlock, isColumn, isColumnSet, isComEventMicrosoftGraphComponent, isComFileMicrosoftGraphComponent, isComResourceMicrosoftGraphComponent, isComUserMicrosoftGraphComponent, isComUsersMicrosoftGraphComponent, isCompoundButton, isContainer, isDateInput, isDonutChart, isExecuteAction, isFactSet, isFlowLayout, isGaugeChart, isGroupedVerticalBarChart, isHorizontalBarChart, isIcon, isImage, isImageSet, isLineChart, isMedia, isMention, isNumberInput, isOpenUrlAction, isPieChart, isQueryData, isRating, isRatingInput, isResetInputsAction, isRichTextBlock, isShowCardAction, isStackLayout, isStackedHorizontalBarChart, isSubmitAction, isTable, isTableCell, isTableRow, isTextBlock, isTextInput, isTextRun, isTimeInput, isToggleInput, isToggleVisibilityAction, isVerticalBarChart };
