'use strict';

var ansi = require('./ansi');

class ConsoleLogger {
  name;
  level;
  _enabled;
  _levels = {
    error: 100,
    warn: 200,
    info: 300,
    debug: 400
  };
  _colors = {
    error: ansi.ANSI.ForegroundRed,
    warn: ansi.ANSI.ForegroundYellow,
    info: ansi.ANSI.ForegroundCyan,
    debug: ansi.ANSI.ForegroundMagenta
  };
  constructor(name, options) {
    this.name = name;
    const env = typeof process === "undefined" ? void 0 : process.env;
    const logNamePattern = env?.LOG || options?.pattern || "*";
    this._enabled = parseMagicExpr(logNamePattern).test(name);
    this.level = parseLogLevel(env?.LOG_LEVEL) || options?.level || "info";
  }
  error(...msg) {
    this.log("error", ...msg);
  }
  warn(...msg) {
    this.log("warn", ...msg);
  }
  info(...msg) {
    this.log("info", ...msg);
  }
  debug(...msg) {
    this.log("debug", ...msg);
  }
  log(level, ...msg) {
    if (!this._enabled) {
      return;
    }
    if (this._levels[level] > this._levels[this.level]) {
      return;
    }
    const prefix = [this._colors[level], ansi.ANSI.Bold, `[${level.toUpperCase()}]`];
    const name = [this.name, ansi.ANSI.ForegroundReset, ansi.ANSI.BoldReset];
    for (const m of msg) {
      let text = new String(m);
      if (typeof m === "object") {
        text = JSON.stringify(m, null, 2);
      }
      for (const line of text.split("\n")) {
        console[level](prefix.join(""), name.join(""), line);
      }
    }
  }
  child(name) {
    return new ConsoleLogger(`${this.name}/${name}`, {
      level: this.level
    });
  }
}
function parseMagicExpr(pattern) {
  let res = "";
  const parts = pattern.split("*");
  for (let i = 0; i < parts.length; i++) {
    if (i > 0) {
      res += ".*";
    }
    res += parts[i];
  }
  return new RegExp(res);
}
function parseLogLevel(level) {
  const value = level?.toLowerCase();
  switch (value) {
    case "error":
    case "warn":
    case "info":
    case "debug":
      return value;
    default:
      return void 0;
  }
}

exports.ConsoleLogger = ConsoleLogger;
//# sourceMappingURL=console.js.map
//# sourceMappingURL=console.js.map